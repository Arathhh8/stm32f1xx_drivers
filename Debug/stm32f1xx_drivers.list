
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005fc  08000604  00010604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005fc  080005fc  00010604  2**0
                  CONTENTS
  4 .ARM          00000000  080005fc  080005fc  00010604  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005fc  08000604  00010604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005fc  080005fc  000105fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000604  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000604  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010604  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006fc  00000000  00000000  0001062d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022c  00000000  00000000  00010d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00010f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000012c0  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cb9  00000000  00000000  00012360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004d93  00000000  00000000  00013019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00017dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  00017dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005e4 	.word	0x080005e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005e4 	.word	0x080005e4

08000170 <delay>:
 *      Author: arath
 */

#include"stm32f103xx.h"

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0007a11f 	.word	0x0007a11f

0800019c <main>:

int main(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80001a2:	2101      	movs	r1, #1
 80001a4:	480b      	ldr	r0, [pc, #44]	; (80001d4 <main+0x38>)
 80001a6:	f000 f841 	bl	800022c <GPIO_PeriClockControl>

	GpioLed.pGPIOx = GPIOC;
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <main+0x38>)
 80001ac:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001ae:	230d      	movs	r3, #13
 80001b0:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 80001b2:	2300      	movs	r3, #0
 80001b4:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 80001b6:	2303      	movs	r3, #3
 80001b8:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_PP;
 80001ba:	2300      	movs	r3, #0
 80001bc:	733b      	strb	r3, [r7, #12]
	//GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PD;

	GPIO_Init(&GpioLed);
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 f8eb 	bl	800039c <GPIO_Init>

	while(1){
		GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_13);
 80001c6:	210d      	movs	r1, #13
 80001c8:	4802      	ldr	r0, [pc, #8]	; (80001d4 <main+0x38>)
 80001ca:	f000 f9d2 	bl	8000572 <GPIO_ToggleOutputPin>
		delay();
 80001ce:	f7ff ffcf 	bl	8000170 <delay>
		GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_13);
 80001d2:	e7f8      	b.n	80001c6 <main+0x2a>
 80001d4:	40011000 	.word	0x40011000

080001d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d8:	480d      	ldr	r0, [pc, #52]	; (8000210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	; (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	; (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000206:	f000 f9c9 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f7ff ffc7 	bl	800019c <main>

0800020e <LoopForever>:

LoopForever:
    b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   r0, =_estack
 8000210:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800021c:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000220:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000224:	2000001c 	.word	0x2000001c

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	460b      	mov	r3, r1
 8000236:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000238:	78fb      	ldrb	r3, [r7, #3]
 800023a:	2b01      	cmp	r3, #1
 800023c:	f040 8099 	bne.w	8000372 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4a4e      	ldr	r2, [pc, #312]	; (800037c <GPIO_PeriClockControl+0x150>)
 8000244:	4293      	cmp	r3, r2
 8000246:	d106      	bne.n	8000256 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000248:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a4c      	ldr	r2, [pc, #304]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000254:	e08d      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a4a      	ldr	r2, [pc, #296]	; (8000384 <GPIO_PeriClockControl+0x158>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d106      	bne.n	800026c <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 800025e:	4b48      	ldr	r3, [pc, #288]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a47      	ldr	r2, [pc, #284]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000264:	f043 0308 	orr.w	r3, r3, #8
 8000268:	6193      	str	r3, [r2, #24]
}
 800026a:	e082      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a46      	ldr	r2, [pc, #280]	; (8000388 <GPIO_PeriClockControl+0x15c>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d106      	bne.n	8000282 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000274:	4b42      	ldr	r3, [pc, #264]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a41      	ldr	r2, [pc, #260]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6193      	str	r3, [r2, #24]
}
 8000280:	e077      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a41      	ldr	r2, [pc, #260]	; (800038c <GPIO_PeriClockControl+0x160>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800028a:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a3c      	ldr	r2, [pc, #240]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000290:	f043 0320 	orr.w	r3, r3, #32
 8000294:	6193      	str	r3, [r2, #24]
}
 8000296:	e06c      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a3d      	ldr	r2, [pc, #244]	; (8000390 <GPIO_PeriClockControl+0x164>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a36      	ldr	r2, [pc, #216]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002aa:	6193      	str	r3, [r2, #24]
}
 80002ac:	e061      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a38      	ldr	r2, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x168>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80002b6:	4b32      	ldr	r3, [pc, #200]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a31      	ldr	r2, [pc, #196]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c0:	6193      	str	r3, [r2, #24]
}
 80002c2:	e056      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a34      	ldr	r2, [pc, #208]	; (8000398 <GPIO_PeriClockControl+0x16c>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d106      	bne.n	80002da <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80002cc:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d6:	6193      	str	r3, [r2, #24]
}
 80002d8:	e04b      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <GPIO_PeriClockControl+0x150>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80002e2:	4b27      	ldr	r3, [pc, #156]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a26      	ldr	r2, [pc, #152]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002e8:	f023 0304 	bic.w	r3, r3, #4
 80002ec:	6193      	str	r3, [r2, #24]
}
 80002ee:	e040      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a24      	ldr	r2, [pc, #144]	; (8000384 <GPIO_PeriClockControl+0x158>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80002f8:	4b21      	ldr	r3, [pc, #132]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a20      	ldr	r2, [pc, #128]	; (8000380 <GPIO_PeriClockControl+0x154>)
 80002fe:	f023 0308 	bic.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
}
 8000304:	e035      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a1f      	ldr	r2, [pc, #124]	; (8000388 <GPIO_PeriClockControl+0x15c>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000314:	f023 0310 	bic.w	r3, r3, #16
 8000318:	6193      	str	r3, [r2, #24]
}
 800031a:	e02a      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a1b      	ldr	r2, [pc, #108]	; (800038c <GPIO_PeriClockControl+0x160>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000324:	4b16      	ldr	r3, [pc, #88]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a15      	ldr	r2, [pc, #84]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800032a:	f023 0320 	bic.w	r3, r3, #32
 800032e:	6193      	str	r3, [r2, #24]
}
 8000330:	e01f      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a16      	ldr	r2, [pc, #88]	; (8000390 <GPIO_PeriClockControl+0x164>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000344:	6193      	str	r3, [r2, #24]
}
 8000346:	e014      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <GPIO_PeriClockControl+0x168>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035a:	6193      	str	r3, [r2, #24]
}
 800035c:	e009      	b.n	8000372 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <GPIO_PeriClockControl+0x16c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d105      	bne.n	8000372 <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <GPIO_PeriClockControl+0x154>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <GPIO_PeriClockControl+0x154>)
 800036c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000370:	6193      	str	r3, [r2, #24]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40010800 	.word	0x40010800
 8000380:	40021000 	.word	0x40021000
 8000384:	40010c00 	.word	0x40010c00
 8000388:	40011000 	.word	0x40011000
 800038c:	40011400 	.word	0x40011400
 8000390:	40011800 	.word	0x40011800
 8000394:	40011c00 	.word	0x40011c00
 8000398:	40012000 	.word	0x40012000

0800039c <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	791b      	ldrb	r3, [r3, #4]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d820      	bhi.n	80003f2 <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	799b      	ldrb	r3, [r3, #6]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	2103      	movs	r1, #3
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	43db      	mvns	r3, r3
 80003d6:	4619      	mov	r1, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	400a      	ands	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	430a      	orrs	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	e020      	b.n	8000434 <GPIO_Init+0x98>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	799b      	ldrb	r3, [r3, #6]
 80003f6:	461a      	mov	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	3b08      	subs	r3, #8
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	2103      	movs	r1, #3
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	400a      	ands	r2, r1
 8000422:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6859      	ldr	r1, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	430a      	orrs	r2, r1
 8000432:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d849      	bhi.n	80004d4 <GPIO_Init+0x138>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	2b07      	cmp	r3, #7
 8000446:	d821      	bhi.n	800048c <GPIO_Init+0xf0>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	461a      	mov	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	3302      	adds	r3, #2
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	2103      	movs	r1, #3
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43db      	mvns	r3, r3
 8000470:	4619      	mov	r1, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	400a      	ands	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6819      	ldr	r1, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	e023      	b.n	80004d4 <GPIO_Init+0x138>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	795b      	ldrb	r3, [r3, #5]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	3b08      	subs	r3, #8
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	3302      	adds	r3, #2
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	3b08      	subs	r3, #8
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	3302      	adds	r3, #2
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	400a      	ands	r2, r1
 80004c2:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6859      	ldr	r1, [r3, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	605a      	str	r2, [r3, #4]
	}else{
		// this part will code later . (interrupt mode)
	}

	// 3. Configure pupd settings
	temp = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	79db      	ldrb	r3, [r3, #7]
 80004dc:	461a      	mov	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68da      	ldr	r2, [r3, #12]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	4619      	mov	r1, r3
 80004f4:	2301      	movs	r3, #1
 80004f6:	408b      	lsls	r3, r1
 80004f8:	43db      	mvns	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	400a      	ands	r2, r1
 8000502:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68d9      	ldr	r1, [r3, #12]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	430a      	orrs	r2, r1
 8000512:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7a1b      	ldrb	r3, [r3, #8]
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	68da      	ldr	r2, [r3, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	4619      	mov	r1, r3
 8000534:	2301      	movs	r3, #1
 8000536:	408b      	lsls	r3, r1
 8000538:	43db      	mvns	r3, r3
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	400a      	ands	r2, r1
 8000542:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68d9      	ldr	r1, [r3, #12]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	430a      	orrs	r2, r1
 8000552:	60da      	str	r2, [r3, #12]

	// 5. Configure the alt functionality
	temp = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
	if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b01      	cmp	r3, #1
 800055e:	bf8c      	ite	hi
 8000560:	2301      	movhi	r3, #1
 8000562:	2300      	movls	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	60fb      	str	r3, [r7, #12]
		// configure the alternate function registers
	}
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <GPIO_ToggleOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	405a      	eors	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	60da      	str	r2, [r3, #12]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2600      	movs	r6, #0
 80005a0:	4d0c      	ldr	r5, [pc, #48]	; (80005d4 <__libc_init_array+0x38>)
 80005a2:	4c0d      	ldr	r4, [pc, #52]	; (80005d8 <__libc_init_array+0x3c>)
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	f000 f81a 	bl	80005e4 <_init>
 80005b0:	2600      	movs	r6, #0
 80005b2:	4d0a      	ldr	r5, [pc, #40]	; (80005dc <__libc_init_array+0x40>)
 80005b4:	4c0a      	ldr	r4, [pc, #40]	; (80005e0 <__libc_init_array+0x44>)
 80005b6:	1b64      	subs	r4, r4, r5
 80005b8:	10a4      	asrs	r4, r4, #2
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	080005fc 	.word	0x080005fc
 80005dc:	080005fc 	.word	0x080005fc
 80005e0:	08000600 	.word	0x08000600

080005e4 <_init>:
 80005e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e6:	bf00      	nop
 80005e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ea:	bc08      	pop	{r3}
 80005ec:	469e      	mov	lr, r3
 80005ee:	4770      	bx	lr

080005f0 <_fini>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr
