
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000668  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000660  08000660  00010668  2**0
                  CONTENTS
  4 .ARM          00000000  08000660  08000660  00010668  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000660  08000668  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000668  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000668  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010691  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006d5  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024f  00000000  00000000  00010da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000012fc  00000000  00000000  0001112e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c64  00000000  00000000  0001242a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004e40  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000224  00000000  00000000  00017ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000180f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000648 	.word	0x08000648

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000648 	.word	0x08000648

08000170 <delay>:
#include"stm32f103xx.h"

#define HIGH 1
#define LOW  0

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0003d08f 	.word	0x0003d08f

0800019c <main>:

int main(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GpioBtn;

	GpioLed.pGPIOx = GPIOC;
 80001a2:	4b19      	ldr	r3, [pc, #100]	; (8000208 <main+0x6c>)
 80001a4:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001a6:	230d      	movs	r3, #13
 80001a8:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 80001aa:	2300      	movs	r3, #0
 80001ac:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 80001ae:	2303      	movs	r3, #3
 80001b0:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 80001b2:	2300      	movs	r3, #0
 80001b4:	753b      	strb	r3, [r7, #20]
	//GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PP;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80001b6:	2101      	movs	r1, #1
 80001b8:	4813      	ldr	r0, [pc, #76]	; (8000208 <main+0x6c>)
 80001ba:	f000 f853 	bl	8000264 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f906 	bl	80003d4 <GPIO_Init>

	GpioBtn.pGPIOx = GPIOA;
 80001c8:	4b10      	ldr	r3, [pc, #64]	; (800020c <main+0x70>)
 80001ca:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 80001d0:	2302      	movs	r3, #2
 80001d2:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80001dc:	2101      	movs	r1, #1
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <main+0x70>)
 80001e0:	f000 f840 	bl	8000264 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 80001e4:	463b      	mov	r3, r7
 80001e6:	4618      	mov	r0, r3
 80001e8:	f000 f8f4 	bl	80003d4 <GPIO_Init>

	while(1){
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == LOW){
 80001ec:	2100      	movs	r1, #0
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <main+0x70>)
 80001f0:	f000 f9dc 	bl	80005ac <GPIO_ReadFromInputPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d1f8      	bne.n	80001ec <main+0x50>
			delay();
 80001fa:	f7ff ffb9 	bl	8000170 <delay>
			GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_13);
 80001fe:	210d      	movs	r1, #13
 8000200:	4801      	ldr	r0, [pc, #4]	; (8000208 <main+0x6c>)
 8000202:	f000 f9e8 	bl	80005d6 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == LOW){
 8000206:	e7f1      	b.n	80001ec <main+0x50>
 8000208:	40011000 	.word	0x40011000
 800020c:	40010800 	.word	0x40010800

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f9df 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffab 	bl	800019c <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000270:	78fb      	ldrb	r3, [r7, #3]
 8000272:	2b01      	cmp	r3, #1
 8000274:	f040 8099 	bne.w	80003aa <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4e      	ldr	r2, [pc, #312]	; (80003b4 <GPIO_PeriClockControl+0x150>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000280:	4b4d      	ldr	r3, [pc, #308]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a4c      	ldr	r2, [pc, #304]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 800028c:	e08d      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PeriClockControl+0x158>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000296:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a47      	ldr	r2, [pc, #284]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6193      	str	r3, [r2, #24]
}
 80002a2:	e082      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PeriClockControl+0x15c>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a41      	ldr	r2, [pc, #260]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
}
 80002b8:	e077      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PeriClockControl+0x160>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 80002c2:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	6193      	str	r3, [r2, #24]
}
 80002ce:	e06c      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a3d      	ldr	r2, [pc, #244]	; (80003c8 <GPIO_PeriClockControl+0x164>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 80002d8:	4b37      	ldr	r3, [pc, #220]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a36      	ldr	r2, [pc, #216]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e2:	6193      	str	r3, [r2, #24]
}
 80002e4:	e061      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a38      	ldr	r2, [pc, #224]	; (80003cc <GPIO_PeriClockControl+0x168>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80002ee:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f8:	6193      	str	r3, [r2, #24]
}
 80002fa:	e056      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a34      	ldr	r2, [pc, #208]	; (80003d0 <GPIO_PeriClockControl+0x16c>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800030a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030e:	6193      	str	r3, [r2, #24]
}
 8000310:	e04b      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <GPIO_PeriClockControl+0x150>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a26      	ldr	r2, [pc, #152]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000320:	f023 0304 	bic.w	r3, r3, #4
 8000324:	6193      	str	r3, [r2, #24]
}
 8000326:	e040      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a24      	ldr	r2, [pc, #144]	; (80003bc <GPIO_PeriClockControl+0x158>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a20      	ldr	r2, [pc, #128]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000336:	f023 0308 	bic.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
}
 800033c:	e035      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <GPIO_PeriClockControl+0x15c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800034c:	f023 0310 	bic.w	r3, r3, #16
 8000350:	6193      	str	r3, [r2, #24]
}
 8000352:	e02a      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <GPIO_PeriClockControl+0x160>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6193      	str	r3, [r2, #24]
}
 8000368:	e01f      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <GPIO_PeriClockControl+0x164>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800037c:	6193      	str	r3, [r2, #24]
}
 800037e:	e014      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <GPIO_PeriClockControl+0x168>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800038e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000392:	6193      	str	r3, [r2, #24]
}
 8000394:	e009      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <GPIO_PeriClockControl+0x16c>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d105      	bne.n	80003aa <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80003a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003a8:	6193      	str	r3, [r2, #24]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40011400 	.word	0x40011400
 80003c8:	40011800 	.word	0x40011800
 80003cc:	40011c00 	.word	0x40011c00
 80003d0:	40012000 	.word	0x40012000

080003d4 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	799b      	ldrb	r3, [r3, #6]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e020      	b.n	800046c <GPIO_Init+0x98>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	799b      	ldrb	r3, [r3, #6]
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	3b08      	subs	r3, #8
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	2103      	movs	r1, #3
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	4619      	mov	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	400a      	ands	r2, r1
 800045a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6859      	ldr	r1, [r3, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	430a      	orrs	r2, r1
 800046a:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d84a      	bhi.n	800050e <GPIO_Init+0x13a>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d822      	bhi.n	80004c6 <GPIO_Init+0xf2>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	3302      	adds	r3, #2
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	3302      	adds	r3, #2
 80004a2:	2103      	movs	r1, #3
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	400a      	ands	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6819      	ldr	r1, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	430a      	orrs	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e023      	b.n	800050e <GPIO_Init+0x13a>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	461a      	mov	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	3b08      	subs	r3, #8
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3302      	adds	r3, #2
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	3b08      	subs	r3, #8
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	3302      	adds	r3, #2
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	430a      	orrs	r2, r1
 800050c:	605a      	str	r2, [r3, #4]
	}else{
		// this part will code later . (interrupt mode)
	}

	// 3. Configure pupd settings
	temp = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	79db      	ldrb	r3, [r3, #7]
 8000516:	461a      	mov	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	2301      	movs	r3, #1
 8000530:	408b      	lsls	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68d9      	ldr	r1, [r3, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	430a      	orrs	r2, r1
 800054c:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7a1b      	ldrb	r3, [r3, #8]
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	4619      	mov	r1, r3
 800056e:	2301      	movs	r3, #1
 8000570:	408b      	lsls	r3, r1
 8000572:	43db      	mvns	r3, r3
 8000574:	4619      	mov	r1, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	400a      	ands	r2, r1
 800057c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68d9      	ldr	r1, [r3, #12]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	430a      	orrs	r2, r1
 800058c:	60da      	str	r2, [r3, #12]

	// 5. Configure the alt functionality
	temp = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
	if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b01      	cmp	r3, #1
 8000598:	bf8c      	ite	hi
 800059a:	2301      	movhi	r3, #1
 800059c:	2300      	movls	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	60fb      	str	r3, [r7, #12]
		// configure the alternate function registers
	}
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	fa22 f303 	lsr.w	r3, r2, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
	return value;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <GPIO_ToggleOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	2101      	movs	r1, #1
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	405a      	eors	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	; (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	f000 f81a 	bl	8000648 <_init>
 8000614:	2600      	movs	r6, #0
 8000616:	4d0a      	ldr	r5, [pc, #40]	; (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
