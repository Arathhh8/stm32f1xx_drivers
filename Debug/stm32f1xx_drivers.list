
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e08  08000e08  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e08  08000e08  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000e08  08000e08  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e08  08000e08  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000034  08000e44  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000e44  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011e6  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e5  00000000  00000000  00021243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00021728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e51  00000000  00000000  000219c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ba4  00000000  00000000  00024811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b0e9  00000000  00000000  000263b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003149e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004fc  00000000  00000000  000314f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000034 	.word	0x20000034
 800014c:	00000000 	.word	0x00000000
 8000150:	08000df0 	.word	0x08000df0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000038 	.word	0x20000038
 800016c:	08000df0 	.word	0x08000df0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:


// some data
uint8_t some_data[] = "We are testing I2C master Tx\n";

void delay(void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <delay+0x28>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	0003d08f 	.word	0x0003d08f

080001ac <I2C1_GPIOInits>:
/*
 * PB6 -->  I2C1_SCL
 * PB7 --> I2C1_SDA
 */

void I2C1_GPIOInits(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0

	// Remap pines
	uint32_t tempreg = 0;  // temporal register
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 1);
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	60fb      	str	r3, [r7, #12]

	AFIO_PCLK_EN();
 80001be:	4b11      	ldr	r3, [pc, #68]	; (8000204 <I2C1_GPIOInits+0x58>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	4a10      	ldr	r2, [pc, #64]	; (8000204 <I2C1_GPIOInits+0x58>)
 80001c4:	f043 0301 	orr.w	r3, r3, #1
 80001c8:	6193      	str	r3, [r2, #24]

	AFIO->MAPR = tempreg;  // Remap I2C1_SCL and I2C_SDA (PB6,PB7) a I2C1_SCL and I2C_SDA (PB8,PB9)
 80001ca:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <I2C1_GPIOInits+0x5c>)
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	6053      	str	r3, [r2, #4]

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <I2C1_GPIOInits+0x60>)
 80001d2:	603b      	str	r3, [r7, #0]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF_OD;
 80001d4:	2303      	movs	r3, #3
 80001d6:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_OD;
 80001d8:	2301      	movs	r3, #1
 80001da:	723b      	strb	r3, [r7, #8]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_INPUT_FLOATING;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_10;
 80001e0:	2301      	movs	r3, #1
 80001e2:	71bb      	strb	r3, [r7, #6]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 80001e4:	2308      	movs	r3, #8
 80001e6:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001e8:	463b      	mov	r3, r7
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f952 	bl	8000494 <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80001f0:	2309      	movs	r3, #9
 80001f2:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001f4:	463b      	mov	r3, r7
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f94c 	bl	8000494 <GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010000 	.word	0x40010000
 800020c:	40010c00 	.word	0x40010c00

08000210 <I2C1_Inits>:

void I2C1_Inits(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx = I2C1;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <I2C1_Inits+0x2c>)
 8000216:	4a0a      	ldr	r2, [pc, #40]	; (8000240 <I2C1_Inits+0x30>)
 8000218:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <I2C1_Inits+0x2c>)
 800021c:	2201      	movs	r2, #1
 800021e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <I2C1_Inits+0x2c>)
 8000222:	2261      	movs	r2, #97	; 0x61
 8000224:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <I2C1_Inits+0x2c>)
 8000228:	2200      	movs	r2, #0
 800022a:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <I2C1_Inits+0x2c>)
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <I2C1_Inits+0x34>)
 8000230:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000232:	4802      	ldr	r0, [pc, #8]	; (800023c <I2C1_Inits+0x2c>)
 8000234:	f000 fc7e 	bl	8000b34 <I2C_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000050 	.word	0x20000050
 8000240:	40005400 	.word	0x40005400
 8000244:	000186a0 	.word	0x000186a0

08000248 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <GPIO_ButtonInit+0x2c>)
 8000250:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000252:	2300      	movs	r3, #0
 8000254:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 8000256:	2302      	movs	r3, #2
 8000258:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 800025a:	2300      	movs	r3, #0
 800025c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800025e:	2301      	movs	r3, #1
 8000260:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f915 	bl	8000494 <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <main>:


int main(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//initialise_monitor_handles();
	//printf("Hello STM32\n");

	GPIO_ButtonInit();
 800027c:	f7ff ffe4 	bl	8000248 <GPIO_ButtonInit>

	// I2C Pin inits
	I2C1_GPIOInits();
 8000280:	f7ff ff94 	bl	80001ac <I2C1_GPIOInits>

	// I2C Peripheral configuration
	I2C1_Inits();
 8000284:	f7ff ffc4 	bl	8000210 <I2C1_Inits>


	I2C_PeripheralControl(I2C1, ENABLE);
 8000288:	2101      	movs	r1, #1
 800028a:	480d      	ldr	r0, [pc, #52]	; (80002c0 <main+0x48>)
 800028c:	f000 fbda 	bl	8000a44 <I2C_PeripheralControl>

	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <main+0x48>)
 8000294:	f000 fd6d 	bl	8000d72 <I2C_ManageAcking>

	// Wait for button press
	while(1){
		// Wait till button is pressed
			while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000298:	bf00      	nop
 800029a:	2100      	movs	r1, #0
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <main+0x4c>)
 800029e:	f000 fb3b 	bl	8000918 <GPIO_ReadFromInputPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f8      	bne.n	800029a <main+0x22>

			// To avoid button de-bouncing related issues 200ms of delay
			delay();
 80002a8:	f7ff ff6a 	bl	8000180 <delay>

			// Send some data to the slave
			I2C_MasterSendData(&I2C1Handle,some_data, strlen((char*)some_data), SLAVE_ADDR);
 80002ac:	4806      	ldr	r0, [pc, #24]	; (80002c8 <main+0x50>)
 80002ae:	f7ff ff5f 	bl	8000170 <strlen>
 80002b2:	4602      	mov	r2, r0
 80002b4:	23a6      	movs	r3, #166	; 0xa6
 80002b6:	4904      	ldr	r1, [pc, #16]	; (80002c8 <main+0x50>)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <main+0x54>)
 80002ba:	f000 fcf5 	bl	8000ca8 <I2C_MasterSendData>
			while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002be:	e7eb      	b.n	8000298 <main+0x20>
 80002c0:	40005400 	.word	0x40005400
 80002c4:	40010800 	.word	0x40010800
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000050 	.word	0x20000050

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fd53 	bl	8000da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffb9 	bl	8000278 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000314:	08000e10 	.word	0x08000e10
  ldr r2, =_sbss
 8000318:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800031c:	2000005c 	.word	0x2000005c

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b01      	cmp	r3, #1
 8000334:	f040 8099 	bne.w	800046a <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a4e      	ldr	r2, [pc, #312]	; (8000474 <GPIO_PeriClockControl+0x150>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000340:	4b4d      	ldr	r3, [pc, #308]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a4c      	ldr	r2, [pc, #304]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 800034c:	e08d      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a4a      	ldr	r2, [pc, #296]	; (800047c <GPIO_PeriClockControl+0x158>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000356:	4b48      	ldr	r3, [pc, #288]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a47      	ldr	r2, [pc, #284]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	6193      	str	r3, [r2, #24]
}
 8000362:	e082      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a46      	ldr	r2, [pc, #280]	; (8000480 <GPIO_PeriClockControl+0x15c>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 800036c:	4b42      	ldr	r3, [pc, #264]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a41      	ldr	r2, [pc, #260]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
}
 8000378:	e077      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a41      	ldr	r2, [pc, #260]	; (8000484 <GPIO_PeriClockControl+0x160>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 8000382:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	6193      	str	r3, [r2, #24]
}
 800038e:	e06c      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a3d      	ldr	r2, [pc, #244]	; (8000488 <GPIO_PeriClockControl+0x164>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a36      	ldr	r2, [pc, #216]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a2:	6193      	str	r3, [r2, #24]
}
 80003a4:	e061      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <GPIO_PeriClockControl+0x168>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a31      	ldr	r2, [pc, #196]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b8:	6193      	str	r3, [r2, #24]
}
 80003ba:	e056      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a34      	ldr	r2, [pc, #208]	; (8000490 <GPIO_PeriClockControl+0x16c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80003c4:	4b2c      	ldr	r3, [pc, #176]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a2b      	ldr	r2, [pc, #172]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ce:	6193      	str	r3, [r2, #24]
}
 80003d0:	e04b      	b.n	800046a <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a27      	ldr	r2, [pc, #156]	; (8000474 <GPIO_PeriClockControl+0x150>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80003da:	4b27      	ldr	r3, [pc, #156]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a26      	ldr	r2, [pc, #152]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003e0:	f023 0304 	bic.w	r3, r3, #4
 80003e4:	6193      	str	r3, [r2, #24]
}
 80003e6:	e040      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a24      	ldr	r2, [pc, #144]	; (800047c <GPIO_PeriClockControl+0x158>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a20      	ldr	r2, [pc, #128]	; (8000478 <GPIO_PeriClockControl+0x154>)
 80003f6:	f023 0308 	bic.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
}
 80003fc:	e035      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <GPIO_PeriClockControl+0x15c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 8000406:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800040c:	f023 0310 	bic.w	r3, r3, #16
 8000410:	6193      	str	r3, [r2, #24]
}
 8000412:	e02a      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <GPIO_PeriClockControl+0x160>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000422:	f023 0320 	bic.w	r3, r3, #32
 8000426:	6193      	str	r3, [r2, #24]
}
 8000428:	e01f      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <GPIO_PeriClockControl+0x164>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a10      	ldr	r2, [pc, #64]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800043c:	6193      	str	r3, [r2, #24]
}
 800043e:	e014      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <GPIO_PeriClockControl+0x168>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <GPIO_PeriClockControl+0x154>)
 800044e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000452:	6193      	str	r3, [r2, #24]
}
 8000454:	e009      	b.n	800046a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <GPIO_PeriClockControl+0x16c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d105      	bne.n	800046a <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <GPIO_PeriClockControl+0x154>)
 8000464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000468:	6193      	str	r3, [r2, #24]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40010800 	.word	0x40010800
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00
 8000480:	40011000 	.word	0x40011000
 8000484:	40011400 	.word	0x40011400
 8000488:	40011800 	.word	0x40011800
 800048c:	40011c00 	.word	0x40011c00
 8000490:	40012000 	.word	0x40012000

08000494 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff3c 	bl	8000324 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d820      	bhi.n	80004f6 <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	799b      	ldrb	r3, [r3, #6]
 80004b8:	461a      	mov	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	4619      	mov	r1, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	400a      	ands	r2, r1
 80004e2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	430a      	orrs	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	e020      	b.n	8000538 <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	799b      	ldrb	r3, [r3, #6]
 80004fa:	461a      	mov	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	3b08      	subs	r3, #8
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6859      	ldr	r1, [r3, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	430a      	orrs	r2, r1
 8000536:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d84b      	bhi.n	80005dc <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	2b07      	cmp	r3, #7
 800054a:	d822      	bhi.n	8000592 <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	3302      	adds	r3, #2
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	2103      	movs	r1, #3
 8000570:	fa01 f303 	lsl.w	r3, r1, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	400a      	ands	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	430a      	orrs	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e114      	b.n	80007bc <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	3b08      	subs	r3, #8
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	3302      	adds	r3, #2
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	3b08      	subs	r3, #8
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	3302      	adds	r3, #2
 80005b8:	2103      	movs	r1, #3
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	e0ef      	b.n	80007bc <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	d85e      	bhi.n	80006a2 <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	2b07      	cmp	r3, #7
 80005ea:	d820      	bhi.n	800062e <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	3302      	adds	r3, #2
 80005f4:	2202      	movs	r2, #2
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3302      	adds	r3, #2
 800060a:	2103      	movs	r1, #3
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	400a      	ands	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6819      	ldr	r1, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	430a      	orrs	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e021      	b.n	8000672 <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	3b08      	subs	r3, #8
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	2202      	movs	r2, #2
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	3b08      	subs	r3, #8
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	3302      	adds	r3, #2
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	400a      	ands	r2, r1
 8000660:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6859      	ldr	r1, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	430a      	orrs	r2, r1
 8000670:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000672:	4b8b      	ldr	r3, [pc, #556]	; (80008a0 <GPIO_Init+0x40c>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	4611      	mov	r1, r2
 8000682:	4a87      	ldr	r2, [pc, #540]	; (80008a0 <GPIO_Init+0x40c>)
 8000684:	430b      	orrs	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000688:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <GPIO_Init+0x40c>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	7912      	ldrb	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	43d2      	mvns	r2, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a81      	ldr	r2, [pc, #516]	; (80008a0 <GPIO_Init+0x40c>)
 800069c:	400b      	ands	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
 80006a0:	e035      	b.n	800070e <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	795b      	ldrb	r3, [r3, #5]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	d817      	bhi.n	80006da <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	4b7d      	ldr	r3, [pc, #500]	; (80008a0 <GPIO_Init+0x40c>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	7912      	ldrb	r2, [r2, #4]
 80006b2:	4611      	mov	r1, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	408a      	lsls	r2, r1
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a79      	ldr	r2, [pc, #484]	; (80008a0 <GPIO_Init+0x40c>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c0:	4b77      	ldr	r3, [pc, #476]	; (80008a0 <GPIO_Init+0x40c>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	7912      	ldrb	r2, [r2, #4]
 80006c8:	4611      	mov	r1, r2
 80006ca:	2201      	movs	r2, #1
 80006cc:	408a      	lsls	r2, r1
 80006ce:	43d2      	mvns	r2, r2
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a73      	ldr	r2, [pc, #460]	; (80008a0 <GPIO_Init+0x40c>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	60d3      	str	r3, [r2, #12]
 80006d8:	e019      	b.n	800070e <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d815      	bhi.n	800070e <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	4b6f      	ldr	r3, [pc, #444]	; (80008a0 <GPIO_Init+0x40c>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7912      	ldrb	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a6b      	ldr	r2, [pc, #428]	; (80008a0 <GPIO_Init+0x40c>)
 80006f4:	430b      	orrs	r3, r1
 80006f6:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f8:	4b69      	ldr	r3, [pc, #420]	; (80008a0 <GPIO_Init+0x40c>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	7912      	ldrb	r2, [r2, #4]
 8000700:	4611      	mov	r1, r2
 8000702:	2201      	movs	r2, #1
 8000704:	408a      	lsls	r2, r1
 8000706:	4611      	mov	r1, r2
 8000708:	4a65      	ldr	r2, [pc, #404]	; (80008a0 <GPIO_Init+0x40c>)
 800070a:	430b      	orrs	r3, r1
 800070c:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a5f      	ldr	r2, [pc, #380]	; (80008a4 <GPIO_Init+0x410>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d02b      	beq.n	8000782 <GPIO_Init+0x2ee>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a5e      	ldr	r2, [pc, #376]	; (80008a8 <GPIO_Init+0x414>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d024      	beq.n	800077e <GPIO_Init+0x2ea>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a5c      	ldr	r2, [pc, #368]	; (80008ac <GPIO_Init+0x418>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d01d      	beq.n	800077a <GPIO_Init+0x2e6>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a5b      	ldr	r2, [pc, #364]	; (80008b0 <GPIO_Init+0x41c>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d016      	beq.n	8000776 <GPIO_Init+0x2e2>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a59      	ldr	r2, [pc, #356]	; (80008b4 <GPIO_Init+0x420>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d00f      	beq.n	8000772 <GPIO_Init+0x2de>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a58      	ldr	r2, [pc, #352]	; (80008b8 <GPIO_Init+0x424>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d008      	beq.n	800076e <GPIO_Init+0x2da>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a56      	ldr	r2, [pc, #344]	; (80008bc <GPIO_Init+0x428>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <GPIO_Init+0x2d6>
 8000766:	2306      	movs	r3, #6
 8000768:	e00c      	b.n	8000784 <GPIO_Init+0x2f0>
 800076a:	2300      	movs	r3, #0
 800076c:	e00a      	b.n	8000784 <GPIO_Init+0x2f0>
 800076e:	2305      	movs	r3, #5
 8000770:	e008      	b.n	8000784 <GPIO_Init+0x2f0>
 8000772:	2304      	movs	r3, #4
 8000774:	e006      	b.n	8000784 <GPIO_Init+0x2f0>
 8000776:	2303      	movs	r3, #3
 8000778:	e004      	b.n	8000784 <GPIO_Init+0x2f0>
 800077a:	2302      	movs	r3, #2
 800077c:	e002      	b.n	8000784 <GPIO_Init+0x2f0>
 800077e:	2301      	movs	r3, #1
 8000780:	e000      	b.n	8000784 <GPIO_Init+0x2f0>
 8000782:	2300      	movs	r3, #0
 8000784:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 8000786:	4b4e      	ldr	r3, [pc, #312]	; (80008c0 <GPIO_Init+0x42c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a4d      	ldr	r2, [pc, #308]	; (80008c0 <GPIO_Init+0x42c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 8000792:	7a7a      	ldrb	r2, [r7, #9]
 8000794:	7abb      	ldrb	r3, [r7, #10]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	fa02 f103 	lsl.w	r1, r2, r3
 800079c:	4a49      	ldr	r2, [pc, #292]	; (80008c4 <GPIO_Init+0x430>)
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	3302      	adds	r3, #2
 80007a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <GPIO_Init+0x40c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	7912      	ldrb	r2, [r2, #4]
 80007ae:	4611      	mov	r1, r2
 80007b0:	2201      	movs	r2, #1
 80007b2:	408a      	lsls	r2, r1
 80007b4:	4611      	mov	r1, r2
 80007b6:	4a3a      	ldr	r2, [pc, #232]	; (80008a0 <GPIO_Init+0x40c>)
 80007b8:	430b      	orrs	r3, r1
 80007ba:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	79db      	ldrb	r3, [r3, #7]
 80007c4:	461a      	mov	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	4619      	mov	r1, r3
 80007dc:	2301      	movs	r3, #1
 80007de:	408b      	lsls	r3, r1
 80007e0:	43db      	mvns	r3, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	400a      	ands	r2, r1
 80007ea:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68d9      	ldr	r1, [r3, #12]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7a1b      	ldrb	r3, [r3, #8]
 8000804:	2b07      	cmp	r3, #7
 8000806:	d11d      	bne.n	8000844 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7a1b      	ldrb	r3, [r3, #8]
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	4619      	mov	r1, r3
 8000824:	2301      	movs	r3, #1
 8000826:	408b      	lsls	r3, r1
 8000828:	43db      	mvns	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	400a      	ands	r2, r1
 8000832:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68d9      	ldr	r1, [r3, #12]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	430a      	orrs	r2, r1
 8000842:	60da      	str	r2, [r3, #12]
	}

//	// 5. Configure the alt functionality
	temp = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF_OD )){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7a5b      	ldrb	r3, [r3, #9]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d15f      	bne.n	8000910 <GPIO_Init+0x47c>
		// configure the alternate function registers
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	2b07      	cmp	r3, #7
 8000856:	d837      	bhi.n	80008c8 <GPIO_Init+0x434>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	3302      	adds	r3, #2
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	3302      	adds	r3, #2
 800087a:	2103      	movs	r1, #3
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	43db      	mvns	r3, r3
 8000882:	4619      	mov	r1, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	400a      	ands	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
			pGPIOHandle->pGPIOx->CRH |= temp;
		}
	}
}
 800089c:	e038      	b.n	8000910 <GPIO_Init+0x47c>
 800089e:	bf00      	nop
 80008a0:	40010400 	.word	0x40010400
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40011400 	.word	0x40011400
 80008b4:	40011800 	.word	0x40011800
 80008b8:	40011c00 	.word	0x40011c00
 80008bc:	40012000 	.word	0x40012000
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7a5b      	ldrb	r3, [r3, #9]
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	3b08      	subs	r3, #8
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	3302      	adds	r3, #2
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	3b08      	subs	r3, #8
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	3302      	adds	r3, #2
 80008ee:	2103      	movs	r1, #3
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	400a      	ands	r2, r1
 80008fe:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6859      	ldr	r1, [r3, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	430a      	orrs	r2, r1
 800090e:	605a      	str	r2, [r3, #4]
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	fa22 f303 	lsr.w	r3, r2, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
	return value;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <I2C_GenerateStartCondition>:
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADRRFlag(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <I2C_GetFlagStatus>:
	SlaveAddr |= 1; // SlaveAdrr is Slave address + r/nw bit = 1
	pI2Cx->DR = SlaveAddr;

}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
 8000986:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	4013      	ands	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <I2C_ClearADRRFlag>:

static void I2C_ClearADRRFlag(I2C_RegDef_t *pI2Cx){
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

	uint32_t dummyRead = pI2Cx->SR1;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
	...

080009c4 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t  EnorDi){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d115      	bne.n	8000a02 <I2C_PeriClockControl+0x3e>
		if(pI2Cx == I2C1){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <I2C_PeriClockControl+0x74>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		}else if(pI2Cx == I2C2){
			I2C2_PCLK_DI();
		}
	}
}
 80009ea:	e01f      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		}else if(pI2Cx == I2C2){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <I2C_PeriClockControl+0x7c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d11b      	bne.n	8000a2c <I2C_PeriClockControl+0x68>
			I2C2_PCLK_EN();
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fe:	61d3      	str	r3, [r2, #28]
}
 8000a00:	e014      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		if(pI2Cx == I2C1){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <I2C_PeriClockControl+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <I2C_PeriClockControl+0x54>
			I2C1_PCLK_DI();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a14:	61d3      	str	r3, [r2, #28]
}
 8000a16:	e009      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		}else if(pI2Cx == I2C2){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <I2C_PeriClockControl+0x7c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d105      	bne.n	8000a2c <I2C_PeriClockControl+0x68>
			I2C2_PCLK_DI();
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a26:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a2a:	61d3      	str	r3, [r2, #28]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40005800 	.word	0x40005800

08000a44 <I2C_PeripheralControl>:
	 * @return				-
	 *
	 * @Note				-
	 */

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d106      	bne.n	8000a64 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f043 0201 	orr.w	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000a62:	e005      	b.n	8000a70 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 0201 	bic.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(){
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

	return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000a9c:	7a7b      	ldrb	r3, [r7, #9]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <RCC_GetPCLK1Value+0x20>
		SystemClk = 8000000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <RCC_GetPCLK1Value+0xa0>)
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e00b      	b.n	8000ac0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000aa8:	7a7b      	ldrb	r3, [r7, #9]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <RCC_GetPCLK1Value+0xa0>)
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e005      	b.n	8000ac0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d102      	bne.n	8000ac0 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000aba:	f7ff ffde 	bl	8000a7a <RCC_GetPLLOutputClock>
 8000abe:	60f8      	str	r0, [r7, #12]
	}

	//ahbp
	temp = (RCC->CFGR >> 4) & 0xF;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000ace:	7a3b      	ldrb	r3, [r7, #8]
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d802      	bhi.n	8000ada <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	e005      	b.n	8000ae6 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp - 8];
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	3b08      	subs	r3, #8
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <RCC_GetPCLK1Value+0xa4>)
 8000ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae4:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 8) & 0x7;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000af4:	7a3b      	ldrb	r3, [r7, #8]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d802      	bhi.n	8000b00 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	72bb      	strb	r3, [r7, #10]
 8000afe:	e004      	b.n	8000b0a <RCC_GetPCLK1Value+0x82>
	}else{
		ahbp = APB1_PreScaler[temp - 4];
 8000b00:	7a3b      	ldrb	r3, [r7, #8]
 8000b02:	3b04      	subs	r3, #4
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <RCC_GetPCLK1Value+0xa8>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	72fb      	strb	r3, [r7, #11]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b12:	7abb      	ldrb	r3, [r7, #10]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	007a1200 	.word	0x007a1200
 8000b2c:	20000020 	.word	0x20000020
 8000b30:	20000030 	.word	0x20000030

08000b34 <I2C_Init>:
 * @return				-
 *
 * @Note				-
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


	uint32_t tempreg = 0;  // temporal register
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

	// Enable the clock for the I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff3c 	bl	80009c4 <I2C_PeriClockControl>

	// Enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4852      	ldr	r0, [pc, #328]	; (8000c98 <I2C_Init+0x164>)
 8000b50:	f7ff ff78 	bl	8000a44 <I2C_PeripheralControl>
	// ACK control bit
	//pI2CHandle->pI2Cx->CR1 = tempreg;
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	029b      	lsls	r3, r3, #10
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000b76:	f7ff ff87 	bl	8000a88 <RCC_GetPCLK1Value>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a47      	ldr	r2, [pc, #284]	; (8000c9c <I2C_Init+0x168>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
	//pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
	pI2CHandle->pI2Cx->CR2 = 0x8;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2208      	movs	r2, #8
 8000b90:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7a1b      	ldrb	r3, [r3, #8]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <I2C_Init+0x16c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d80f      	bhi.n	8000be6 <I2C_Init+0xb2>
		// mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000bc6:	f7ff ff5f 	bl	8000a88 <RCC_GetPCLK1Value>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bd8:	897b      	ldrh	r3, [r7, #10]
 8000bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e02d      	b.n	8000c42 <I2C_Init+0x10e>
	}else{
		// mode is fast mode
		tempreg |= (1 << 15); // configuring bit 15 of I2C_CCR
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bec:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a9b      	ldrb	r3, [r3, #10]
 8000bf2:	039b      	lsls	r3, r3, #14
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7a9b      	ldrb	r3, [r3, #10]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10b      	bne.n	8000c1c <I2C_Init+0xe8>
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c04:	f7ff ff40 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	817b      	strh	r3, [r7, #10]
 8000c1a:	e00c      	b.n	8000c36 <I2C_Init+0x102>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c1c:	f7ff ff34 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c20:	4601      	mov	r1, r0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009a      	lsls	r2, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c36:	897b      	ldrh	r3, [r7, #10]
 8000c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <I2C_Init+0x16c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d809      	bhi.n	8000c68 <I2C_Init+0x134>
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000c54:	f7ff ff18 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <I2C_Init+0x168>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	0c9b      	lsrs	r3, r3, #18
 8000c62:	3301      	adds	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e00d      	b.n	8000c84 <I2C_Init+0x150>
	}else{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c68:	f7ff ff0e 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <I2C_Init+0x170>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	09db      	lsrs	r3, r3, #7
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8e:	621a      	str	r2, [r3, #32]
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	000186a0 	.word	0x000186a0
 8000ca4:	00044b83 	.word	0x00044b83

08000ca8 <I2C_MasterSendData>:
 * @return				-
 *
 * @Note				-
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	70fb      	strb	r3, [r7, #3]

	//I2C_PeripheralControl(I2C1, ENABLE);
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe41 	bl	8000942 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// NOTE: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000cc0:	bf00      	nop
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe58 	bl	800097e <I2C_GetFlagStatus>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f6      	beq.n	8000cc2 <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	//I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
	pI2CHandle->pI2Cx->DR |= ((SlaveAddr<<1)&0xFE);	//Shift Slave Address to insert at 0th position the r/w bit (write)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6919      	ldr	r1, [r3, #16]
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	611a      	str	r2, [r3, #16]
	// 4. Confirm that adress phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000ce8:	bf00      	nop
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe44 	bl	800097e <I2C_GetFlagStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f6      	beq.n	8000cea <I2C_MasterSendData+0x42>

	// 5. Clear the ADDR Flag according to its software sequence
	// NOTE: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADRRFlag(pI2CHandle->pI2Cx);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe4f 	bl	80009a4 <I2C_ClearADRRFlag>

	// 6. Send data until Len becomes 0
	while(Len > 0){
 8000d06:	e014      	b.n	8000d32 <I2C_MasterSendData+0x8a>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TxE)); // Wait till TXE is set
 8000d08:	bf00      	nop
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe34 	bl	800097e <I2C_GetFlagStatus>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f6      	beq.n	8000d0a <I2C_MasterSendData+0x62>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1e7      	bne.n	8000d08 <I2C_MasterSendData+0x60>
	}

	// 7. When Len becomes 0 wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1, BF1 = 1, means that both SR and DR are empty and next transmission should begin
	// when BTF = 1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TxE));
 8000d38:	bf00      	nop
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fe1c 	bl	800097e <I2C_GetFlagStatus>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f6      	beq.n	8000d3a <I2C_MasterSendData+0x92>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000d4c:	bf00      	nop
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2104      	movs	r1, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe12 	bl	800097e <I2C_GetFlagStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f6      	beq.n	8000d4e <I2C_MasterSendData+0xa6>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	// NOTE: generating STOP, automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fdfb 	bl	8000960 <I2C_GenerateStopCondition>

}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <I2C_ManageAcking>:
	}

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == I2C_ACK_ENABLE){
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d106      	bne.n	8000d92 <I2C_ManageAcking+0x20>
		// enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	601a      	str	r2, [r3, #0]
	}else{
		// disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000d90:	e005      	b.n	8000d9e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <__libc_init_array>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	2600      	movs	r6, #0
 8000dac:	4d0c      	ldr	r5, [pc, #48]	; (8000de0 <__libc_init_array+0x38>)
 8000dae:	4c0d      	ldr	r4, [pc, #52]	; (8000de4 <__libc_init_array+0x3c>)
 8000db0:	1b64      	subs	r4, r4, r5
 8000db2:	10a4      	asrs	r4, r4, #2
 8000db4:	42a6      	cmp	r6, r4
 8000db6:	d109      	bne.n	8000dcc <__libc_init_array+0x24>
 8000db8:	f000 f81a 	bl	8000df0 <_init>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	4d0a      	ldr	r5, [pc, #40]	; (8000de8 <__libc_init_array+0x40>)
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <__libc_init_array+0x44>)
 8000dc2:	1b64      	subs	r4, r4, r5
 8000dc4:	10a4      	asrs	r4, r4, #2
 8000dc6:	42a6      	cmp	r6, r4
 8000dc8:	d105      	bne.n	8000dd6 <__libc_init_array+0x2e>
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd0:	4798      	blx	r3
 8000dd2:	3601      	adds	r6, #1
 8000dd4:	e7ee      	b.n	8000db4 <__libc_init_array+0xc>
 8000dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dda:	4798      	blx	r3
 8000ddc:	3601      	adds	r6, #1
 8000dde:	e7f2      	b.n	8000dc6 <__libc_init_array+0x1e>
 8000de0:	08000e08 	.word	0x08000e08
 8000de4:	08000e08 	.word	0x08000e08
 8000de8:	08000e08 	.word	0x08000e08
 8000dec:	08000e0c 	.word	0x08000e0c

08000df0 <_init>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr

08000dfc <_fini>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	bf00      	nop
 8000e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e02:	bc08      	pop	{r3}
 8000e04:	469e      	mov	lr, r3
 8000e06:	4770      	bx	lr
