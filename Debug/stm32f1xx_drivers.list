
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c24  08000c24  00010c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c30  08000c30  00010c38  2**0
                  CONTENTS
  4 .ARM          00000000  08000c30  08000c30  00010c38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c30  08000c38  00010c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c30  08000c30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c38  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fa1  00000000  00000000  00010c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000042b  00000000  00000000  00011c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  00012030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00012178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000219f  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001858  00000000  00000000  00014427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009276  00000000  00000000  00015c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001eef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000478  00000000  00000000  0001ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c0c 	.word	0x08000c0c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c0c 	.word	0x08000c0c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI2_GPIOInits>:
 * 	 PB14 --> SPI2_MISO
 *	 PB13 --> SPI2_SCK
 *	 PB12 --> SPI2_NSS
 */

void SPI2_GPIOInits(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <SPI2_GPIOInits+0x40>)
 8000188:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 800018a:	2302      	movs	r3, #2
 800018c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 800018e:	2303      	movs	r3, #3
 8000190:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000192:	230d      	movs	r3, #13
 8000194:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f98b 	bl	80004b4 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800019e:	230f      	movs	r3, #15
 80001a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 f985 	bl	80004b4 <GPIO_Init>
	// MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001aa:	230c      	movs	r3, #12
 80001ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f97f 	bl	80004b4 <GPIO_Init>
}
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <SPI2_Inits>:

void SPI2_Inits(void){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <SPI2_Inits+0x38>)
 80001cc:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80001ce:	2301      	movs	r3, #1
 80001d0:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001d2:	2301      	movs	r3, #1
 80001d4:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates SLCK of 8 MHz
 80001d6:	2302      	movs	r3, #2
 80001d8:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80001da:	2300      	movs	r3, #0
 80001dc:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80001de:	2300      	movs	r3, #0
 80001e0:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80001e2:	2300      	movs	r3, #0
 80001e4:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave managment enabled for NSS pin
 80001e6:	2300      	movs	r3, #0
 80001e8:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fbc1 	bl	8000974 <SPI_Init>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40003800 	.word	0x40003800

08000200 <delay>:

void delay(void){
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e002      	b.n	8000212 <delay+0x12>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <delay+0x28>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d9f8      	bls.n	800020c <delay+0xc>
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	0003d08f 	.word	0x0003d08f

0800022c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <GPIO_ButtonInit+0x2c>)
 8000234:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000236:	2300      	movs	r3, #0
 8000238:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 800023a:	2302      	movs	r3, #2
 800023c:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 800023e:	2300      	movs	r3, #0
 8000240:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 8000242:	2301      	movs	r3, #1
 8000244:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f933 	bl	80004b4 <GPIO_Init>
	}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010800 	.word	0x40010800

0800025c <main>:

int main(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 8000262:	4a20      	ldr	r2, [pc, #128]	; (80002e4 <main+0x88>)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	ca07      	ldmia	r2, {r0, r1, r2}
 8000268:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 800026c:	f7ff ffde 	bl	800022c <GPIO_ButtonInit>

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000270:	f7ff ff86 	bl	8000180 <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000274:	f7ff ffa6 	bl	80001c4 <SPI2_Inits>
	 *  Making SSOE 1 does NSS output enable
	 *  The NSS pin is automatically managed by hardware
	 *  i.e when SPE = 1, NSS will be pulled to LOW
	 *  and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000278:	2101      	movs	r1, #1
 800027a:	481b      	ldr	r0, [pc, #108]	; (80002e8 <main+0x8c>)
 800027c:	f000 fc86 	bl	8000b8c <SPI_SSOEConfig>

	while(1){
	// Wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000280:	bf00      	nop
 8000282:	2100      	movs	r1, #0
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <main+0x90>)
 8000286:	f000 fb07 	bl	8000898 <GPIO_ReadFromInputPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d1f8      	bne.n	8000282 <main+0x26>
		//while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == HIGH);

		delay();
 8000290:	f7ff ffb6 	bl	8000200 <delay>

		// Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	4814      	ldr	r0, [pc, #80]	; (80002e8 <main+0x8c>)
 8000298:	f000 fc5d 	bl	8000b56 <SPI_PeripheralControl>

		// First send length information
		uint8_t dataLen = strlen(user_data);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff66 	bl	8000170 <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2, &dataLen, 1);
 80002aa:	1cfb      	adds	r3, r7, #3
 80002ac:	2201      	movs	r2, #1
 80002ae:	4619      	mov	r1, r3
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <main+0x8c>)
 80002b2:	f000 fc19 	bl	8000ae8 <SPI_SendData>

		// Function to send data
		SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff59 	bl	8000170 <strlen>
 80002be:	4602      	mov	r2, r0
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4808      	ldr	r0, [pc, #32]	; (80002e8 <main+0x8c>)
 80002c6:	f000 fc0f 	bl	8000ae8 <SPI_SendData>

		// Lets confirm SPI is not busy
		while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 80002ca:	bf00      	nop
 80002cc:	2180      	movs	r1, #128	; 0x80
 80002ce:	4806      	ldr	r0, [pc, #24]	; (80002e8 <main+0x8c>)
 80002d0:	f000 fbf7 	bl	8000ac2 <SPI_GetFlagStatus>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <main+0x70>

		// Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 80002da:	2100      	movs	r1, #0
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <main+0x8c>)
 80002de:	f000 fc3a 	bl	8000b56 <SPI_PeripheralControl>
	while(1){
 80002e2:	e7cd      	b.n	8000280 <main+0x24>
 80002e4:	08000c24 	.word	0x08000c24
 80002e8:	40003800 	.word	0x40003800
 80002ec:	40010800 	.word	0x40010800

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 fc51 	bl	8000bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff9b 	bl	800025c <main>

08000326 <LoopForever>:

LoopForever:
    b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	08000c38 	.word	0x08000c38
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b01      	cmp	r3, #1
 8000354:	f040 8099 	bne.w	800048a <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a4e      	ldr	r2, [pc, #312]	; (8000494 <GPIO_PeriClockControl+0x150>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000360:	4b4d      	ldr	r3, [pc, #308]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a4c      	ldr	r2, [pc, #304]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 800036c:	e08d      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a4a      	ldr	r2, [pc, #296]	; (800049c <GPIO_PeriClockControl+0x158>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000376:	4b48      	ldr	r3, [pc, #288]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a47      	ldr	r2, [pc, #284]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800037c:	f043 0308 	orr.w	r3, r3, #8
 8000380:	6193      	str	r3, [r2, #24]
}
 8000382:	e082      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a46      	ldr	r2, [pc, #280]	; (80004a0 <GPIO_PeriClockControl+0x15c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 800038c:	4b42      	ldr	r3, [pc, #264]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a41      	ldr	r2, [pc, #260]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6193      	str	r3, [r2, #24]
}
 8000398:	e077      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a41      	ldr	r2, [pc, #260]	; (80004a4 <GPIO_PeriClockControl+0x160>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 80003a2:	4b3d      	ldr	r3, [pc, #244]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a3c      	ldr	r2, [pc, #240]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003a8:	f043 0320 	orr.w	r3, r3, #32
 80003ac:	6193      	str	r3, [r2, #24]
}
 80003ae:	e06c      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3d      	ldr	r2, [pc, #244]	; (80004a8 <GPIO_PeriClockControl+0x164>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 80003b8:	4b37      	ldr	r3, [pc, #220]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a36      	ldr	r2, [pc, #216]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	6193      	str	r3, [r2, #24]
}
 80003c4:	e061      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a38      	ldr	r2, [pc, #224]	; (80004ac <GPIO_PeriClockControl+0x168>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80003ce:	4b32      	ldr	r3, [pc, #200]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a31      	ldr	r2, [pc, #196]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d8:	6193      	str	r3, [r2, #24]
}
 80003da:	e056      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a34      	ldr	r2, [pc, #208]	; (80004b0 <GPIO_PeriClockControl+0x16c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ee:	6193      	str	r3, [r2, #24]
}
 80003f0:	e04b      	b.n	800048a <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a27      	ldr	r2, [pc, #156]	; (8000494 <GPIO_PeriClockControl+0x150>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <GPIO_PeriClockControl+0x154>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000400:	f023 0304 	bic.w	r3, r3, #4
 8000404:	6193      	str	r3, [r2, #24]
}
 8000406:	e040      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <GPIO_PeriClockControl+0x158>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a20      	ldr	r2, [pc, #128]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000416:	f023 0308 	bic.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
}
 800041c:	e035      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <GPIO_PeriClockControl+0x15c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800042c:	f023 0310 	bic.w	r3, r3, #16
 8000430:	6193      	str	r3, [r2, #24]
}
 8000432:	e02a      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <GPIO_PeriClockControl+0x160>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a15      	ldr	r2, [pc, #84]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000442:	f023 0320 	bic.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
}
 8000448:	e01f      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <GPIO_PeriClockControl+0x164>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	4a10      	ldr	r2, [pc, #64]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800045c:	6193      	str	r3, [r2, #24]
}
 800045e:	e014      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <GPIO_PeriClockControl+0x168>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <GPIO_PeriClockControl+0x154>)
 800046e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000472:	6193      	str	r3, [r2, #24]
}
 8000474:	e009      	b.n	800048a <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <GPIO_PeriClockControl+0x16c>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d105      	bne.n	800048a <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a05      	ldr	r2, [pc, #20]	; (8000498 <GPIO_PeriClockControl+0x154>)
 8000484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000488:	6193      	str	r3, [r2, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40010800 	.word	0x40010800
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00
 80004a0:	40011000 	.word	0x40011000
 80004a4:	40011400 	.word	0x40011400
 80004a8:	40011800 	.word	0x40011800
 80004ac:	40011c00 	.word	0x40011c00
 80004b0:	40012000 	.word	0x40012000

080004b4 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff3c 	bl	8000344 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	2b07      	cmp	r3, #7
 80004d2:	d820      	bhi.n	8000516 <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	799b      	ldrb	r3, [r3, #6]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	2103      	movs	r1, #3
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	4619      	mov	r1, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	400a      	ands	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	e020      	b.n	8000558 <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	799b      	ldrb	r3, [r3, #6]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	3b08      	subs	r3, #8
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	fa02 f303 	lsl.w	r3, r2, r3
 8000528:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	791b      	ldrb	r3, [r3, #4]
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	2103      	movs	r1, #3
 8000538:	fa01 f303 	lsl.w	r3, r1, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	400a      	ands	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6859      	ldr	r1, [r3, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	430a      	orrs	r2, r1
 8000556:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d84b      	bhi.n	80005fc <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d822      	bhi.n	80005b2 <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	3302      	adds	r3, #2
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	3302      	adds	r3, #2
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	400a      	ands	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6819      	ldr	r1, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	e114      	b.n	80007dc <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	3b08      	subs	r3, #8
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	3b08      	subs	r3, #8
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	3302      	adds	r3, #2
 80005d8:	2103      	movs	r1, #3
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	4619      	mov	r1, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	e0ef      	b.n	80007dc <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	795b      	ldrb	r3, [r3, #5]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d85e      	bhi.n	80006c2 <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	2b07      	cmp	r3, #7
 800060a:	d820      	bhi.n	800064e <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	3302      	adds	r3, #2
 8000614:	2202      	movs	r2, #2
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	3302      	adds	r3, #2
 800062a:	2103      	movs	r1, #3
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	400a      	ands	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6819      	ldr	r1, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	430a      	orrs	r2, r1
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e021      	b.n	8000692 <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	3b08      	subs	r3, #8
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	3302      	adds	r3, #2
 8000658:	2202      	movs	r2, #2
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	3b08      	subs	r3, #8
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	3302      	adds	r3, #2
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f303 	lsl.w	r3, r1, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6859      	ldr	r1, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	430a      	orrs	r2, r1
 8000690:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000692:	4b77      	ldr	r3, [pc, #476]	; (8000870 <GPIO_Init+0x3bc>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	7912      	ldrb	r2, [r2, #4]
 800069a:	4611      	mov	r1, r2
 800069c:	2201      	movs	r2, #1
 800069e:	408a      	lsls	r2, r1
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a73      	ldr	r2, [pc, #460]	; (8000870 <GPIO_Init+0x3bc>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a8:	4b71      	ldr	r3, [pc, #452]	; (8000870 <GPIO_Init+0x3bc>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	43d2      	mvns	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a6d      	ldr	r2, [pc, #436]	; (8000870 <GPIO_Init+0x3bc>)
 80006bc:	400b      	ands	r3, r1
 80006be:	6093      	str	r3, [r2, #8]
 80006c0:	e035      	b.n	800072e <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	795b      	ldrb	r3, [r3, #5]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d817      	bhi.n	80006fa <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ca:	4b69      	ldr	r3, [pc, #420]	; (8000870 <GPIO_Init+0x3bc>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7912      	ldrb	r2, [r2, #4]
 80006d2:	4611      	mov	r1, r2
 80006d4:	2201      	movs	r2, #1
 80006d6:	408a      	lsls	r2, r1
 80006d8:	4611      	mov	r1, r2
 80006da:	4a65      	ldr	r2, [pc, #404]	; (8000870 <GPIO_Init+0x3bc>)
 80006dc:	430b      	orrs	r3, r1
 80006de:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <GPIO_Init+0x3bc>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	7912      	ldrb	r2, [r2, #4]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a5f      	ldr	r2, [pc, #380]	; (8000870 <GPIO_Init+0x3bc>)
 80006f4:	400b      	ands	r3, r1
 80006f6:	60d3      	str	r3, [r2, #12]
 80006f8:	e019      	b.n	800072e <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d815      	bhi.n	800072e <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000702:	4b5b      	ldr	r3, [pc, #364]	; (8000870 <GPIO_Init+0x3bc>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7912      	ldrb	r2, [r2, #4]
 800070a:	4611      	mov	r1, r2
 800070c:	2201      	movs	r2, #1
 800070e:	408a      	lsls	r2, r1
 8000710:	4611      	mov	r1, r2
 8000712:	4a57      	ldr	r2, [pc, #348]	; (8000870 <GPIO_Init+0x3bc>)
 8000714:	430b      	orrs	r3, r1
 8000716:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000718:	4b55      	ldr	r3, [pc, #340]	; (8000870 <GPIO_Init+0x3bc>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	7912      	ldrb	r2, [r2, #4]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	4611      	mov	r1, r2
 8000728:	4a51      	ldr	r2, [pc, #324]	; (8000870 <GPIO_Init+0x3bc>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	f003 0303 	and.w	r3, r3, #3
 800073e:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a4b      	ldr	r2, [pc, #300]	; (8000874 <GPIO_Init+0x3c0>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d02b      	beq.n	80007a2 <GPIO_Init+0x2ee>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a4a      	ldr	r2, [pc, #296]	; (8000878 <GPIO_Init+0x3c4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d024      	beq.n	800079e <GPIO_Init+0x2ea>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a48      	ldr	r2, [pc, #288]	; (800087c <GPIO_Init+0x3c8>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d01d      	beq.n	800079a <GPIO_Init+0x2e6>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a47      	ldr	r2, [pc, #284]	; (8000880 <GPIO_Init+0x3cc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d016      	beq.n	8000796 <GPIO_Init+0x2e2>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a45      	ldr	r2, [pc, #276]	; (8000884 <GPIO_Init+0x3d0>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d00f      	beq.n	8000792 <GPIO_Init+0x2de>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a44      	ldr	r2, [pc, #272]	; (8000888 <GPIO_Init+0x3d4>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d008      	beq.n	800078e <GPIO_Init+0x2da>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a42      	ldr	r2, [pc, #264]	; (800088c <GPIO_Init+0x3d8>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d101      	bne.n	800078a <GPIO_Init+0x2d6>
 8000786:	2306      	movs	r3, #6
 8000788:	e00c      	b.n	80007a4 <GPIO_Init+0x2f0>
 800078a:	2300      	movs	r3, #0
 800078c:	e00a      	b.n	80007a4 <GPIO_Init+0x2f0>
 800078e:	2305      	movs	r3, #5
 8000790:	e008      	b.n	80007a4 <GPIO_Init+0x2f0>
 8000792:	2304      	movs	r3, #4
 8000794:	e006      	b.n	80007a4 <GPIO_Init+0x2f0>
 8000796:	2303      	movs	r3, #3
 8000798:	e004      	b.n	80007a4 <GPIO_Init+0x2f0>
 800079a:	2302      	movs	r3, #2
 800079c:	e002      	b.n	80007a4 <GPIO_Init+0x2f0>
 800079e:	2301      	movs	r3, #1
 80007a0:	e000      	b.n	80007a4 <GPIO_Init+0x2f0>
 80007a2:	2300      	movs	r3, #0
 80007a4:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 80007a6:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <GPIO_Init+0x3dc>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <GPIO_Init+0x3dc>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 80007b2:	7a7a      	ldrb	r2, [r7, #9]
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	fa02 f103 	lsl.w	r1, r2, r3
 80007bc:	4a35      	ldr	r2, [pc, #212]	; (8000894 <GPIO_Init+0x3e0>)
 80007be:	7afb      	ldrb	r3, [r7, #11]
 80007c0:	3302      	adds	r3, #2
 80007c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <GPIO_Init+0x3bc>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	7912      	ldrb	r2, [r2, #4]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a26      	ldr	r2, [pc, #152]	; (8000870 <GPIO_Init+0x3bc>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	79db      	ldrb	r3, [r3, #7]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2301      	movs	r3, #1
 80007fe:	408b      	lsls	r3, r1
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	430a      	orrs	r2, r1
 800081a:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7a1b      	ldrb	r3, [r3, #8]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d11d      	bne.n	8000864 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	461a      	mov	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	4619      	mov	r1, r3
 8000844:	2301      	movs	r3, #1
 8000846:	408b      	lsls	r3, r1
 8000848:	43db      	mvns	r3, r3
 800084a:	4619      	mov	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68d9      	ldr	r1, [r3, #12]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	430a      	orrs	r2, r1
 8000862:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	//if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
		// configure the alternate function registers
	//}
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40010400 	.word	0x40010400
 8000874:	40010800 	.word	0x40010800
 8000878:	40010c00 	.word	0x40010c00
 800087c:	40011000 	.word	0x40011000
 8000880:	40011400 	.word	0x40011400
 8000884:	40011800 	.word	0x40011800
 8000888:	40011c00 	.word	0x40011c00
 800088c:	40012000 	.word	0x40012000
 8000890:	40021000 	.word	0x40021000
 8000894:	40010000 	.word	0x40010000

08000898 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	fa22 f303 	lsr.w	r3, r2, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
	return value;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <SPI_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t  EnorDi){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d120      	bne.n	8000918 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <SPI_PeriClockControl+0xa0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SPI_PeriClockControl+0xa4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SPI_PeriClockControl+0xa4>)
 80008e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e8:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 80008ea:	e035      	b.n	8000958 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <SPI_PeriClockControl+0xa8>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d106      	bne.n	8000902 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <SPI_PeriClockControl+0xa4>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <SPI_PeriClockControl+0xa4>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	61d3      	str	r3, [r2, #28]
}
 8000900:	e02a      	b.n	8000958 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <SPI_PeriClockControl+0xac>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d126      	bne.n	8000958 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <SPI_PeriClockControl+0xa4>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <SPI_PeriClockControl+0xa4>)
 8000910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000914:	61d3      	str	r3, [r2, #28]
}
 8000916:	e01f      	b.n	8000958 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <SPI_PeriClockControl+0xa0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d106      	bne.n	800092e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <SPI_PeriClockControl+0xa4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a10      	ldr	r2, [pc, #64]	; (8000968 <SPI_PeriClockControl+0xa4>)
 8000926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800092a:	6193      	str	r3, [r2, #24]
}
 800092c:	e014      	b.n	8000958 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <SPI_PeriClockControl+0xa8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <SPI_PeriClockControl+0xa4>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <SPI_PeriClockControl+0xa4>)
 800093c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000940:	61d3      	str	r3, [r2, #28]
}
 8000942:	e009      	b.n	8000958 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SPI_PeriClockControl+0xac>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d105      	bne.n	8000958 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SPI_PeriClockControl+0xa4>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SPI_PeriClockControl+0xa4>)
 8000952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000956:	61d3      	str	r3, [r2, #28]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40013000 	.word	0x40013000
 8000968:	40021000 	.word	0x40021000
 800096c:	40003800 	.word	0x40003800
 8000970:	40003c00 	.word	0x40003c00

08000974 <SPI_Init>:
 * @return				-
 *
 * @Note				-
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	// Enable peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff9e 	bl	80008c4 <SPI_PeriClockControl>

	// First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;  // temporal register
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	795b      	ldrb	r3, [r3, #5]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10c      	bne.n	80009cc <SPI_Init+0x58>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b8:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	e02c      	b.n	8000a26 <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d10c      	bne.n	80009ee <SPI_Init+0x7a>
		// BIDIMODE should be set
		tempreg |= (1 << 15);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009da:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6819      	ldr	r1, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e01b      	b.n	8000a26 <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	795b      	ldrb	r3, [r3, #5]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d117      	bne.n	8000a26 <SPI_Init+0xb2>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009fc:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6819      	ldr	r1, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
		// RXONLY bit must be set
		tempreg &= ~(1 << 10);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a14:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
	}

	// 3. Configure the Sclk Speed SPI_SclkSpeed;
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6819      	ldr	r1, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	430a      	orrs	r2, r1
 8000a42:	601a      	str	r2, [r3, #0]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	79db      	ldrb	r3, [r3, #7]
 8000a48:	02db      	lsls	r3, r3, #11
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a1b      	ldrb	r3, [r3, #8]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	461a      	mov	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6819      	ldr	r1, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]

	//6. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	7a5b      	ldrb	r3, [r3, #9]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]

	//7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7a9b      	ldrb	r3, [r3, #10]
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <SPI_GetFlagStatus>:
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SPI_SendData>:
 * @Note				- This is blocking call
 */



void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000af4:	e027      	b.n	8000b46 <SPI_SendData+0x5e>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000af6:	bf00      	nop
 8000af8:	2102      	movs	r1, #2
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ffe1 	bl	8000ac2 <SPI_GetFlagStatus>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00e      	beq.n	8000b30 <SPI_SendData+0x48>
			// 16 BIT DFF
			// 1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	60da      	str	r2, [r3, #12]
			Len--;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
			Len--;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	e00a      	b.n	8000b46 <SPI_SendData+0x5e>
		}else{
			// 8 BIT
			// 1. Load the data in to the DR
			pSPIx->DR = *pTxBuffer;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	60da      	str	r2, [r3, #12]
			Len--;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1d4      	bne.n	8000af6 <SPI_SendData+0xe>
		}
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SPI_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d106      	bne.n	8000b76 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000b74:	e005      	b.n	8000b82 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SPI_SSOEConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d106      	bne.n	8000bac <SPI_SSOEConfig+0x20>
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f043 0204 	orr.w	r2, r3, #4
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	605a      	str	r2, [r3, #4]
	}else{
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000baa:	e005      	b.n	8000bb8 <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f023 0204 	bic.w	r2, r3, #4
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	605a      	str	r2, [r3, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <__libc_init_array>:
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4d0c      	ldr	r5, [pc, #48]	; (8000bfc <__libc_init_array+0x38>)
 8000bca:	4c0d      	ldr	r4, [pc, #52]	; (8000c00 <__libc_init_array+0x3c>)
 8000bcc:	1b64      	subs	r4, r4, r5
 8000bce:	10a4      	asrs	r4, r4, #2
 8000bd0:	42a6      	cmp	r6, r4
 8000bd2:	d109      	bne.n	8000be8 <__libc_init_array+0x24>
 8000bd4:	f000 f81a 	bl	8000c0c <_init>
 8000bd8:	2600      	movs	r6, #0
 8000bda:	4d0a      	ldr	r5, [pc, #40]	; (8000c04 <__libc_init_array+0x40>)
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <__libc_init_array+0x44>)
 8000bde:	1b64      	subs	r4, r4, r5
 8000be0:	10a4      	asrs	r4, r4, #2
 8000be2:	42a6      	cmp	r6, r4
 8000be4:	d105      	bne.n	8000bf2 <__libc_init_array+0x2e>
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
 8000be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bec:	4798      	blx	r3
 8000bee:	3601      	adds	r6, #1
 8000bf0:	e7ee      	b.n	8000bd0 <__libc_init_array+0xc>
 8000bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf6:	4798      	blx	r3
 8000bf8:	3601      	adds	r6, #1
 8000bfa:	e7f2      	b.n	8000be2 <__libc_init_array+0x1e>
 8000bfc:	08000c30 	.word	0x08000c30
 8000c00:	08000c30 	.word	0x08000c30
 8000c04:	08000c30 	.word	0x08000c30
 8000c08:	08000c34 	.word	0x08000c34

08000c0c <_init>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr

08000c18 <_fini>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr
