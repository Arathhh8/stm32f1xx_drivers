
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002794  08002794  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002794  08002794  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002794  08002794  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002794  08002794  00012794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800279c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  0800280c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800280c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012e7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c3  00000000  00000000  00021380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00021848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  000219b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026be  00000000  00000000  00021af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001bb8  00000000  00000000  000241ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a423  00000000  00000000  00025d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001134  00000000  00000000  000301dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	080025f4 	.word	0x080025f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	080025f4 	.word	0x080025f4

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
 * 	 PB14 --> SPI2_MISO
 *	 PB13 --> SPI2_SCK
 *	 PB12 --> SPI2_NSS
 */

void delay(void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <delay+0x28>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	0003d08f 	.word	0x0003d08f

080001ac <SPI2_GPIOInits>:

void SPI2_GPIOInits(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <SPI2_GPIOInits+0x4c>)
 80001b4:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 80001b6:	2302      	movs	r3, #2
 80001b8:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 80001ba:	2303      	movs	r3, #3
 80001bc:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001be:	230d      	movs	r3, #13
 80001c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fb5b 	bl	8000880 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80001ca:	230f      	movs	r3, #15
 80001cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fb55 	bl	8000880 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80001d6:	230e      	movs	r3, #14
 80001d8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fb4f 	bl	8000880 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001e2:	230c      	movs	r3, #12
 80001e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fb49 	bl	8000880 <GPIO_Init>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010c00 	.word	0x40010c00

080001fc <SPI2_Inits>:

void SPI2_Inits(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <SPI2_Inits+0x38>)
 8000204:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000206:	2301      	movs	r3, #1
 8000208:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800020a:	2301      	movs	r3, #1
 800020c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates SLCK of 8 MHz
 800020e:	2302      	movs	r3, #2
 8000210:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000216:	2300      	movs	r3, #0
 8000218:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800021a:	2300      	movs	r3, #0
 800021c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave managment enabled for NSS pin
 800021e:	2300      	movs	r3, #0
 8000220:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000222:	463b      	mov	r3, r7
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fd8b 	bl	8000d40 <SPI_Init>
}
 800022a:	bf00      	nop
 800022c:	3720      	adds	r7, #32
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40003800 	.word	0x40003800

08000238 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <GPIO_ButtonInit+0x2c>)
 8000240:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000242:	2300      	movs	r3, #0
 8000244:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 800024a:	2300      	movs	r3, #0
 800024c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fb13 	bl	8000880 <GPIO_Init>
	}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010800 	.word	0x40010800

08000268 <GPIO_LedInit>:

void GPIO_LedInit(void){
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOC;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <GPIO_LedInit+0x34>)
 8000270:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000272:	230d      	movs	r3, #13
 8000274:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 8000276:	2300      	movs	r3, #0
 8000278:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 800027a:	2303      	movs	r3, #3
 800027c:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 800027e:	2300      	movs	r3, #0
 8000280:	733b      	strb	r3, [r7, #12]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000282:	2101      	movs	r1, #1
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <GPIO_LedInit+0x34>)
 8000286:	f000 fa43 	bl	8000710 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 faf7 	bl	8000880 <GPIO_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40011000 	.word	0x40011000

080002a0 <SPI_VeryfyResponse>:

uint8_t SPI_VeryfyResponse(uint8_t ackByte){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]

	if(ackByte == 0xF5){
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2bf5      	cmp	r3, #245	; 0xf5
 80002ae:	d101      	bne.n	80002b4 <SPI_VeryfyResponse+0x14>
		// ack
		return 1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e000      	b.n	80002b6 <SPI_VeryfyResponse+0x16>
	}else{
		return 0;
 80002b4:	2300      	movs	r3, #0
	}
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <main>:

int main(void){
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b08e      	sub	sp, #56	; 0x38
 80002c4:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 80002c6:	23ff      	movs	r3, #255	; 0xff
 80002c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	initialise_monitor_handles();
 80002cc:	f002 f910 	bl	80024f0 <initialise_monitor_handles>

	printf("Application is running\n");
 80002d0:	48ae      	ldr	r0, [pc, #696]	; (800058c <main+0x2cc>)
 80002d2:	f000 ff45 	bl	8001160 <puts>

	GPIO_ButtonInit();
 80002d6:	f7ff ffaf 	bl	8000238 <GPIO_ButtonInit>
	GPIO_LedInit();
 80002da:	f7ff ffc5 	bl	8000268 <GPIO_LedInit>

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002de:	f7ff ff65 	bl	80001ac <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002e2:	f7ff ff8b 	bl	80001fc <SPI2_Inits>

	printf("SPI Init. Done\n");
 80002e6:	48aa      	ldr	r0, [pc, #680]	; (8000590 <main+0x2d0>)
 80002e8:	f000 ff3a 	bl	8001160 <puts>
	 *  Making SSOE 1 does NSS output enable
	 *  The NSS pin is automatically managed by hardware
	 *  i.e when SPE = 1, NSS will be pulled to LOW
	 *  and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	48a9      	ldr	r0, [pc, #676]	; (8000594 <main+0x2d4>)
 80002f0:	f000 fe69 	bl	8000fc6 <SPI_SSOEConfig>

	while(1){
	// Wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002f4:	bf00      	nop
 80002f6:	2100      	movs	r1, #0
 80002f8:	48a7      	ldr	r0, [pc, #668]	; (8000598 <main+0x2d8>)
 80002fa:	f000 fcb3 	bl	8000c64 <GPIO_ReadFromInputPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f8      	bne.n	80002f6 <main+0x36>

		// To avoid button de-bouncing related issues 200ms of delay
		delay();
 8000304:	f7ff ff3c 	bl	8000180 <delay>

		// Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	48a2      	ldr	r0, [pc, #648]	; (8000594 <main+0x2d4>)
 800030c:	f000 fe40 	bl	8000f90 <SPI_PeripheralControl>

		// 1. CMD_LED_CTRL <pin no(1)>		<value(1)>
		uint8_t commandCode = COMMAND_LED_CTRL;
 8000310:	2350      	movs	r3, #80	; 0x50
 8000312:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackByte;
		uint8_t args[2];

		// Send command
		SPI_SendData(SPI2, &commandCode, 1);
 8000316:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	489d      	ldr	r0, [pc, #628]	; (8000594 <main+0x2d4>)
 8000320:	f000 fdc8 	bl	8000eb4 <SPI_SendData>

		// Do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000324:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	4899      	ldr	r0, [pc, #612]	; (8000594 <main+0x2d4>)
 800032e:	f000 fdf8 	bl	8000f22 <SPI_ReceiveData>

		// Send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000332:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	4896      	ldr	r0, [pc, #600]	; (8000594 <main+0x2d4>)
 800033c:	f000 fdba 	bl	8000eb4 <SPI_SendData>

		// Read the ack byte received
		SPI_ReceiveData(SPI2, &ackByte, 1);
 8000340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	4892      	ldr	r0, [pc, #584]	; (8000594 <main+0x2d4>)
 800034a:	f000 fdea 	bl	8000f22 <SPI_ReceiveData>

		if(SPI_VeryfyResponse(ackByte)){
 800034e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffa4 	bl	80002a0 <SPI_VeryfyResponse>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00f      	beq.n	800037e <main+0xbe>
			// Send arguments
			args[0] = LED_PIN;
 800035e:	2309      	movs	r3, #9
 8000360:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			// send args
			SPI_SendData(SPI2, args, 2);
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2202      	movs	r2, #2
 8000370:	4619      	mov	r1, r3
 8000372:	4888      	ldr	r0, [pc, #544]	; (8000594 <main+0x2d4>)
 8000374:	f000 fd9e 	bl	8000eb4 <SPI_SendData>
			printf("COMMAND_LED_CTRL Executed\n");
 8000378:	4888      	ldr	r0, [pc, #544]	; (800059c <main+0x2dc>)
 800037a:	f000 fef1 	bl	8001160 <puts>
		// End of COMMAND_LED_CTRL

		// 2. CMD_SENSOR_READ	<analog pin number(1)>

		// Wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800037e:	bf00      	nop
 8000380:	2100      	movs	r1, #0
 8000382:	4885      	ldr	r0, [pc, #532]	; (8000598 <main+0x2d8>)
 8000384:	f000 fc6e 	bl	8000c64 <GPIO_ReadFromInputPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f8      	bne.n	8000380 <main+0xc0>

		// To avoid button de-bouncing related issues 200ms of delay
		delay();
 800038e:	f7ff fef7 	bl	8000180 <delay>

		commandCode = COMMAND_SENSOR_READ;
 8000392:	2351      	movs	r3, #81	; 0x51
 8000394:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Send command
		SPI_SendData(SPI2, &commandCode, 1);
 8000398:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	487c      	ldr	r0, [pc, #496]	; (8000594 <main+0x2d4>)
 80003a2:	f000 fd87 	bl	8000eb4 <SPI_SendData>

		// Do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003a6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	4879      	ldr	r0, [pc, #484]	; (8000594 <main+0x2d4>)
 80003b0:	f000 fdb7 	bl	8000f22 <SPI_ReceiveData>

		// Send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80003b4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	4875      	ldr	r0, [pc, #468]	; (8000594 <main+0x2d4>)
 80003be:	f000 fd79 	bl	8000eb4 <SPI_SendData>

		// Read the ack byte received
		SPI_ReceiveData(SPI2, &ackByte, 1);
 80003c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003c6:	2201      	movs	r2, #1
 80003c8:	4619      	mov	r1, r3
 80003ca:	4872      	ldr	r0, [pc, #456]	; (8000594 <main+0x2d4>)
 80003cc:	f000 fda9 	bl	8000f22 <SPI_ReceiveData>

		if(SPI_VeryfyResponse(ackByte)){
 80003d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff63 	bl	80002a0 <SPI_VeryfyResponse>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d024      	beq.n	800042a <main+0x16a>
			// Send arguments
			args[0] = ANALOG_PIN0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			// send args
			SPI_SendData(SPI2, args, 1); // sending one byte of
 80003e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	4869      	ldr	r0, [pc, #420]	; (8000594 <main+0x2d4>)
 80003f0:	f000 fd60 	bl	8000eb4 <SPI_SendData>

			// Do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80003f4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80003f8:	2201      	movs	r2, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	4865      	ldr	r0, [pc, #404]	; (8000594 <main+0x2d4>)
 80003fe:	f000 fd90 	bl	8000f22 <SPI_ReceiveData>

			// Insert some delay so that slave can ready with the data
			delay();
 8000402:	f7ff febd 	bl	8000180 <delay>

			// Send some dummy bits (1 byte) to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000406:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	4861      	ldr	r0, [pc, #388]	; (8000594 <main+0x2d4>)
 8000410:	f000 fd50 	bl	8000eb4 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000414:	1cfb      	adds	r3, r7, #3
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	485e      	ldr	r0, [pc, #376]	; (8000594 <main+0x2d4>)
 800041c:	f000 fd81 	bl	8000f22 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ %d\n", analog_read);
 8000420:	78fb      	ldrb	r3, [r7, #3]
 8000422:	4619      	mov	r1, r3
 8000424:	485e      	ldr	r0, [pc, #376]	; (80005a0 <main+0x2e0>)
 8000426:	f000 fe15 	bl	8001054 <iprintf>
		// End of COMMAND_SENSOR_READ

		// 3. COMMAND_LED_READ	<analog pin number(1)>

		// Wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800042a:	bf00      	nop
 800042c:	2100      	movs	r1, #0
 800042e:	485a      	ldr	r0, [pc, #360]	; (8000598 <main+0x2d8>)
 8000430:	f000 fc18 	bl	8000c64 <GPIO_ReadFromInputPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d1f8      	bne.n	800042c <main+0x16c>

		// To avoid button de-bouncing related issues 200ms of delay
		delay();
 800043a:	f7ff fea1 	bl	8000180 <delay>

		commandCode = COMMAND_LED_READ;
 800043e:	2352      	movs	r3, #82	; 0x52
 8000440:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Send command
		SPI_SendData(SPI2, &commandCode, 1);
 8000444:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	4851      	ldr	r0, [pc, #324]	; (8000594 <main+0x2d4>)
 800044e:	f000 fd31 	bl	8000eb4 <SPI_SendData>

		// Do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000452:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	484e      	ldr	r0, [pc, #312]	; (8000594 <main+0x2d4>)
 800045c:	f000 fd61 	bl	8000f22 <SPI_ReceiveData>

		// Send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000460:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000464:	2201      	movs	r2, #1
 8000466:	4619      	mov	r1, r3
 8000468:	484a      	ldr	r0, [pc, #296]	; (8000594 <main+0x2d4>)
 800046a:	f000 fd23 	bl	8000eb4 <SPI_SendData>

		// Read the ack byte received
		SPI_ReceiveData(SPI2, &ackByte, 1);
 800046e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000472:	2201      	movs	r2, #1
 8000474:	4619      	mov	r1, r3
 8000476:	4847      	ldr	r0, [pc, #284]	; (8000594 <main+0x2d4>)
 8000478:	f000 fd53 	bl	8000f22 <SPI_ReceiveData>

		if(SPI_VeryfyResponse(ackByte)){
 800047c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff0d 	bl	80002a0 <SPI_VeryfyResponse>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d024      	beq.n	80004d6 <main+0x216>
			// Send arguments
			args[0] = LED_PIN;
 800048c:	2309      	movs	r3, #9
 800048e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			// send args
			SPI_SendData(SPI2, args, 1); // sending one byte of
 8000492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	483e      	ldr	r0, [pc, #248]	; (8000594 <main+0x2d4>)
 800049c:	f000 fd0a 	bl	8000eb4 <SPI_SendData>

			// Do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004a0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	483a      	ldr	r0, [pc, #232]	; (8000594 <main+0x2d4>)
 80004aa:	f000 fd3a 	bl	8000f22 <SPI_ReceiveData>

			// Insert some delay so that slave can ready with the data
			delay();
 80004ae:	f7ff fe67 	bl	8000180 <delay>

			// Send some dummy bits (1 byte) to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 80004b2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004b6:	2201      	movs	r2, #1
 80004b8:	4619      	mov	r1, r3
 80004ba:	4836      	ldr	r0, [pc, #216]	; (8000594 <main+0x2d4>)
 80004bc:	f000 fcfa 	bl	8000eb4 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2, &led_status, 1);
 80004c0:	1cbb      	adds	r3, r7, #2
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4833      	ldr	r0, [pc, #204]	; (8000594 <main+0x2d4>)
 80004c8:	f000 fd2b 	bl	8000f22 <SPI_ReceiveData>
			printf("COMMAND_LED_READ %d\n", led_status);
 80004cc:	78bb      	ldrb	r3, [r7, #2]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4834      	ldr	r0, [pc, #208]	; (80005a4 <main+0x2e4>)
 80004d2:	f000 fdbf 	bl	8001054 <iprintf>


		//4. CMD_PRINT 		<len(2)>  <message(len) >

		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004d6:	bf00      	nop
 80004d8:	2100      	movs	r1, #0
 80004da:	482f      	ldr	r0, [pc, #188]	; (8000598 <main+0x2d8>)
 80004dc:	f000 fbc2 	bl	8000c64 <GPIO_ReadFromInputPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1f8      	bne.n	80004d8 <main+0x218>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80004e6:	f7ff fe4b 	bl	8000180 <delay>

		commandCode = COMMAND_PRINT;
 80004ea:	2353      	movs	r3, #83	; 0x53
 80004ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandCode,1);
 80004f0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	4826      	ldr	r0, [pc, #152]	; (8000594 <main+0x2d4>)
 80004fa:	f000 fcdb 	bl	8000eb4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 80004fe:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4823      	ldr	r0, [pc, #140]	; (8000594 <main+0x2d4>)
 8000508:	f000 fd0b 	bl	8000f22 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800050c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	481f      	ldr	r0, [pc, #124]	; (8000594 <main+0x2d4>)
 8000516:	f000 fccd 	bl	8000eb4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackByte,1);
 800051a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	481c      	ldr	r0, [pc, #112]	; (8000594 <main+0x2d4>)
 8000524:	f000 fcfd 	bl	8000f22 <SPI_ReceiveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <main+0x2e8>)
 800052a:	f107 0410 	add.w	r4, r7, #16
 800052e:	461d      	mov	r5, r3
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000538:	6020      	str	r0, [r4, #0]
 800053a:	3404      	adds	r4, #4
 800053c:	8021      	strh	r1, [r4, #0]
 800053e:	3402      	adds	r4, #2
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	7023      	strb	r3, [r4, #0]
		if( SPI_VeryfyResponse(ackByte)){
 8000544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fea9 	bl	80002a0 <SPI_VeryfyResponse>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d047      	beq.n	80005e4 <main+0x324>
			args[0] = strlen((char*)message);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe09 	bl	8000170 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

			//send arguments
			SPI_SendData(SPI2,args,1); //sending length
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <main+0x2d4>)
 8000570:	f000 fca0 	bl	8000eb4 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000574:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <main+0x2d4>)
 800057e:	f000 fcd0 	bl	8000f22 <SPI_ReceiveData>

			delay();
 8000582:	f7ff fdfd 	bl	8000180 <delay>

			//send message
			for(int i = 0 ; i < args[0] ; i++){
 8000586:	2300      	movs	r3, #0
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
 800058a:	e022      	b.n	80005d2 <main+0x312>
 800058c:	0800260c 	.word	0x0800260c
 8000590:	08002624 	.word	0x08002624
 8000594:	40003800 	.word	0x40003800
 8000598:	40010800 	.word	0x40010800
 800059c:	08002634 	.word	0x08002634
 80005a0:	08002650 	.word	0x08002650
 80005a4:	08002668 	.word	0x08002668
 80005a8:	080026c8 	.word	0x080026c8
				SPI_SendData(SPI2,&message[i],1);
 80005ac:	f107 0210 	add.w	r2, r7, #16
 80005b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b2:	4413      	add	r3, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	4619      	mov	r1, r3
 80005b8:	483b      	ldr	r0, [pc, #236]	; (80006a8 <main+0x3e8>)
 80005ba:	f000 fc7b 	bl	8000eb4 <SPI_SendData>
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80005be:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	4838      	ldr	r0, [pc, #224]	; (80006a8 <main+0x3e8>)
 80005c8:	f000 fcab 	bl	8000f22 <SPI_ReceiveData>
			for(int i = 0 ; i < args[0] ; i++){
 80005cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ce:	3301      	adds	r3, #1
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
 80005d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80005d6:	461a      	mov	r2, r3
 80005d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005da:	4293      	cmp	r3, r2
 80005dc:	dbe6      	blt.n	80005ac <main+0x2ec>
			}

			printf("COMMAND_PRINT Executed \n");
 80005de:	4833      	ldr	r0, [pc, #204]	; (80006ac <main+0x3ec>)
 80005e0:	f000 fdbe 	bl	8001160 <puts>
		} // End of COMMAND_PRINT

		//5. CMD_ID_READ

		//wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80005e4:	bf00      	nop
 80005e6:	2100      	movs	r1, #0
 80005e8:	4831      	ldr	r0, [pc, #196]	; (80006b0 <main+0x3f0>)
 80005ea:	f000 fb3b 	bl	8000c64 <GPIO_ReadFromInputPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1f8      	bne.n	80005e6 <main+0x326>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80005f4:	f7ff fdc4 	bl	8000180 <delay>

		commandCode = COMMAND_ID_READ;
 80005f8:	2354      	movs	r3, #84	; 0x54
 80005fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//send command
		SPI_SendData(SPI2,&commandCode,1);
 80005fe:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	4828      	ldr	r0, [pc, #160]	; (80006a8 <main+0x3e8>)
 8000608:	f000 fc54 	bl	8000eb4 <SPI_SendData>

		//do dummy read to clear off the RXNE
		SPI_ReceiveData(SPI2,&dummy_read,1);
 800060c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	4824      	ldr	r0, [pc, #144]	; (80006a8 <main+0x3e8>)
 8000616:	f000 fc84 	bl	8000f22 <SPI_ReceiveData>

		//Send some dummy byte to fetch the response from the slave
		SPI_SendData(SPI2,&dummy_write,1);
 800061a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800061e:	2201      	movs	r2, #1
 8000620:	4619      	mov	r1, r3
 8000622:	4821      	ldr	r0, [pc, #132]	; (80006a8 <main+0x3e8>)
 8000624:	f000 fc46 	bl	8000eb4 <SPI_SendData>

		//read the ack byte received
		SPI_ReceiveData(SPI2,&ackByte,1);
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <main+0x3e8>)
 8000632:	f000 fc76 	bl	8000f22 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 8000636:	2300      	movs	r3, #0
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
		if( SPI_VeryfyResponse(ackByte))
 800063a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe2e 	bl	80002a0 <SPI_VeryfyResponse>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d01e      	beq.n	8000688 <main+0x3c8>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
 800064e:	e011      	b.n	8000674 <main+0x3b4>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000650:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000654:	2201      	movs	r2, #1
 8000656:	4619      	mov	r1, r3
 8000658:	4813      	ldr	r0, [pc, #76]	; (80006a8 <main+0x3e8>)
 800065a:	f000 fc2b 	bl	8000eb4 <SPI_SendData>
				SPI_ReceiveData(SPI2,&id[i],1);
 800065e:	1d3a      	adds	r2, r7, #4
 8000660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000662:	4413      	add	r3, r2
 8000664:	2201      	movs	r2, #1
 8000666:	4619      	mov	r1, r3
 8000668:	480f      	ldr	r0, [pc, #60]	; (80006a8 <main+0x3e8>)
 800066a:	f000 fc5a 	bl	8000f22 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 800066e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000670:	3301      	adds	r3, #1
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
 8000674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000676:	2b09      	cmp	r3, #9
 8000678:	d9ea      	bls.n	8000650 <main+0x390>
			}

			id[10] = '\0';
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x3f4>)
 8000684:	f000 fce6 	bl	8001054 <iprintf>

		} // End of COMMAND_ID_READ


		// Lets confirm SPI is not busy
		while (SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 8000688:	bf00      	nop
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <main+0x3e8>)
 800068e:	f000 fbfe 	bl	8000e8e <SPI_GetFlagStatus>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f8      	bne.n	800068a <main+0x3ca>

		// Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 8000698:	2100      	movs	r1, #0
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <main+0x3e8>)
 800069c:	f000 fc78 	bl	8000f90 <SPI_PeripheralControl>

		printf("SPI Communication closed\n");
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x3f8>)
 80006a2:	f000 fd5d 	bl	8001160 <puts>
	while(1){
 80006a6:	e625      	b.n	80002f4 <main+0x34>
 80006a8:	40003800 	.word	0x40003800
 80006ac:	08002680 	.word	0x08002680
 80006b0:	40010800 	.word	0x40010800
 80006b4:	08002698 	.word	0x08002698
 80006b8:	080026ac 	.word	0x080026ac

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f000 fc87 	bl	8000ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fde7 	bl	80002c0 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000700:	0800279c 	.word	0x0800279c
  ldr r2, =_sbss
 8000704:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000708:	2000014c 	.word	0x2000014c

0800070c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_2_IRQHandler>
	...

08000710 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b01      	cmp	r3, #1
 8000720:	f040 8099 	bne.w	8000856 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a4e      	ldr	r2, [pc, #312]	; (8000860 <GPIO_PeriClockControl+0x150>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 800072c:	4b4d      	ldr	r3, [pc, #308]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000738:	e08d      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a4a      	ldr	r2, [pc, #296]	; (8000868 <GPIO_PeriClockControl+0x158>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a47      	ldr	r2, [pc, #284]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6193      	str	r3, [r2, #24]
}
 800074e:	e082      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a46      	ldr	r2, [pc, #280]	; (800086c <GPIO_PeriClockControl+0x15c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000758:	4b42      	ldr	r3, [pc, #264]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a41      	ldr	r2, [pc, #260]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6193      	str	r3, [r2, #24]
}
 8000764:	e077      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a41      	ldr	r2, [pc, #260]	; (8000870 <GPIO_PeriClockControl+0x160>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a3c      	ldr	r2, [pc, #240]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000774:	f043 0320 	orr.w	r3, r3, #32
 8000778:	6193      	str	r3, [r2, #24]
}
 800077a:	e06c      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a3d      	ldr	r2, [pc, #244]	; (8000874 <GPIO_PeriClockControl+0x164>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000784:	4b37      	ldr	r3, [pc, #220]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a36      	ldr	r2, [pc, #216]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800078a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078e:	6193      	str	r3, [r2, #24]
}
 8000790:	e061      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a38      	ldr	r2, [pc, #224]	; (8000878 <GPIO_PeriClockControl+0x168>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a31      	ldr	r2, [pc, #196]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	6193      	str	r3, [r2, #24]
}
 80007a6:	e056      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a34      	ldr	r2, [pc, #208]	; (800087c <GPIO_PeriClockControl+0x16c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	6193      	str	r3, [r2, #24]
}
 80007bc:	e04b      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <GPIO_PeriClockControl+0x150>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a26      	ldr	r2, [pc, #152]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007cc:	f023 0304 	bic.w	r3, r3, #4
 80007d0:	6193      	str	r3, [r2, #24]
}
 80007d2:	e040      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a24      	ldr	r2, [pc, #144]	; (8000868 <GPIO_PeriClockControl+0x158>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d106      	bne.n	80007ea <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007e2:	f023 0308 	bic.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
}
 80007e8:	e035      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <GPIO_PeriClockControl+0x15c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <GPIO_PeriClockControl+0x154>)
 80007f8:	f023 0310 	bic.w	r3, r3, #16
 80007fc:	6193      	str	r3, [r2, #24]
}
 80007fe:	e02a      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <GPIO_PeriClockControl+0x160>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800080e:	f023 0320 	bic.w	r3, r3, #32
 8000812:	6193      	str	r3, [r2, #24]
}
 8000814:	e01f      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <GPIO_PeriClockControl+0x164>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000828:	6193      	str	r3, [r2, #24]
}
 800082a:	e014      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <GPIO_PeriClockControl+0x168>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800083a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800083e:	6193      	str	r3, [r2, #24]
}
 8000840:	e009      	b.n	8000856 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <GPIO_PeriClockControl+0x16c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d105      	bne.n	8000856 <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <GPIO_PeriClockControl+0x154>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <GPIO_PeriClockControl+0x154>)
 8000850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000854:	6193      	str	r3, [r2, #24]
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	40010800 	.word	0x40010800
 8000864:	40021000 	.word	0x40021000
 8000868:	40010c00 	.word	0x40010c00
 800086c:	40011000 	.word	0x40011000
 8000870:	40011400 	.word	0x40011400
 8000874:	40011800 	.word	0x40011800
 8000878:	40011c00 	.word	0x40011c00
 800087c:	40012000 	.word	0x40012000

08000880 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff3c 	bl	8000710 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	791b      	ldrb	r3, [r3, #4]
 800089c:	2b07      	cmp	r3, #7
 800089e:	d820      	bhi.n	80008e2 <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	799b      	ldrb	r3, [r3, #6]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	2103      	movs	r1, #3
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	400a      	ands	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e020      	b.n	8000924 <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	799b      	ldrb	r3, [r3, #6]
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791b      	ldrb	r3, [r3, #4]
 80008ec:	3b08      	subs	r3, #8
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	2103      	movs	r1, #3
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	4619      	mov	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	400a      	ands	r2, r1
 8000912:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6859      	ldr	r1, [r3, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	430a      	orrs	r2, r1
 8000922:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d84b      	bhi.n	80009c8 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d822      	bhi.n	800097e <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	3302      	adds	r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	3302      	adds	r3, #2
 800095a:	2103      	movs	r1, #3
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	400a      	ands	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6819      	ldr	r1, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	e114      	b.n	8000ba8 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	795b      	ldrb	r3, [r3, #5]
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	3b08      	subs	r3, #8
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	3302      	adds	r3, #2
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	3b08      	subs	r3, #8
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	2103      	movs	r1, #3
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	4619      	mov	r1, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	400a      	ands	r2, r1
 80009b4:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6859      	ldr	r1, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	e0ef      	b.n	8000ba8 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	795b      	ldrb	r3, [r3, #5]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d85e      	bhi.n	8000a8e <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	791b      	ldrb	r3, [r3, #4]
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	d820      	bhi.n	8000a1a <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3302      	adds	r3, #2
 80009e0:	2202      	movs	r2, #2
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	791b      	ldrb	r3, [r3, #4]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	2103      	movs	r1, #3
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	400a      	ands	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e021      	b.n	8000a5e <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	3b08      	subs	r3, #8
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	2202      	movs	r2, #2
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	3b08      	subs	r3, #8
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6859      	ldr	r1, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a5e:	4b77      	ldr	r3, [pc, #476]	; (8000c3c <GPIO_Init+0x3bc>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	7912      	ldrb	r2, [r2, #4]
 8000a66:	4611      	mov	r1, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	408a      	lsls	r2, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a73      	ldr	r2, [pc, #460]	; (8000c3c <GPIO_Init+0x3bc>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a74:	4b71      	ldr	r3, [pc, #452]	; (8000c3c <GPIO_Init+0x3bc>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	7912      	ldrb	r2, [r2, #4]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	408a      	lsls	r2, r1
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a6d      	ldr	r2, [pc, #436]	; (8000c3c <GPIO_Init+0x3bc>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	6093      	str	r3, [r2, #8]
 8000a8c:	e035      	b.n	8000afa <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	795b      	ldrb	r3, [r3, #5]
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	d817      	bhi.n	8000ac6 <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a96:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <GPIO_Init+0x3bc>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	7912      	ldrb	r2, [r2, #4]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	408a      	lsls	r2, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a65      	ldr	r2, [pc, #404]	; (8000c3c <GPIO_Init+0x3bc>)
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aac:	4b63      	ldr	r3, [pc, #396]	; (8000c3c <GPIO_Init+0x3bc>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	7912      	ldrb	r2, [r2, #4]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	408a      	lsls	r2, r1
 8000aba:	43d2      	mvns	r2, r2
 8000abc:	4611      	mov	r1, r2
 8000abe:	4a5f      	ldr	r2, [pc, #380]	; (8000c3c <GPIO_Init+0x3bc>)
 8000ac0:	400b      	ands	r3, r1
 8000ac2:	60d3      	str	r3, [r2, #12]
 8000ac4:	e019      	b.n	8000afa <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	795b      	ldrb	r3, [r3, #5]
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d815      	bhi.n	8000afa <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ace:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <GPIO_Init+0x3bc>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	7912      	ldrb	r2, [r2, #4]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	408a      	lsls	r2, r1
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a57      	ldr	r2, [pc, #348]	; (8000c3c <GPIO_Init+0x3bc>)
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae4:	4b55      	ldr	r3, [pc, #340]	; (8000c3c <GPIO_Init+0x3bc>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	7912      	ldrb	r2, [r2, #4]
 8000aec:	4611      	mov	r1, r2
 8000aee:	2201      	movs	r2, #1
 8000af0:	408a      	lsls	r2, r1
 8000af2:	4611      	mov	r1, r2
 8000af4:	4a51      	ldr	r2, [pc, #324]	; (8000c3c <GPIO_Init+0x3bc>)
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a4b      	ldr	r2, [pc, #300]	; (8000c40 <GPIO_Init+0x3c0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d02b      	beq.n	8000b6e <GPIO_Init+0x2ee>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <GPIO_Init+0x3c4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d024      	beq.n	8000b6a <GPIO_Init+0x2ea>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a48      	ldr	r2, [pc, #288]	; (8000c48 <GPIO_Init+0x3c8>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d01d      	beq.n	8000b66 <GPIO_Init+0x2e6>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a47      	ldr	r2, [pc, #284]	; (8000c4c <GPIO_Init+0x3cc>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d016      	beq.n	8000b62 <GPIO_Init+0x2e2>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a45      	ldr	r2, [pc, #276]	; (8000c50 <GPIO_Init+0x3d0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00f      	beq.n	8000b5e <GPIO_Init+0x2de>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a44      	ldr	r2, [pc, #272]	; (8000c54 <GPIO_Init+0x3d4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d008      	beq.n	8000b5a <GPIO_Init+0x2da>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a42      	ldr	r2, [pc, #264]	; (8000c58 <GPIO_Init+0x3d8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <GPIO_Init+0x2d6>
 8000b52:	2306      	movs	r3, #6
 8000b54:	e00c      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b56:	2300      	movs	r3, #0
 8000b58:	e00a      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	e008      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b5e:	2304      	movs	r3, #4
 8000b60:	e006      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b62:	2303      	movs	r3, #3
 8000b64:	e004      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b66:	2302      	movs	r3, #2
 8000b68:	e002      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <GPIO_Init+0x2f0>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 8000b72:	4b3a      	ldr	r3, [pc, #232]	; (8000c5c <GPIO_Init+0x3dc>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <GPIO_Init+0x3dc>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 8000b7e:	7a7a      	ldrb	r2, [r7, #9]
 8000b80:	7abb      	ldrb	r3, [r7, #10]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	fa02 f103 	lsl.w	r1, r2, r3
 8000b88:	4a35      	ldr	r2, [pc, #212]	; (8000c60 <GPIO_Init+0x3e0>)
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <GPIO_Init+0x3bc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	7912      	ldrb	r2, [r2, #4]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	408a      	lsls	r2, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <GPIO_Init+0x3bc>)
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	79db      	ldrb	r3, [r3, #7]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	791b      	ldrb	r3, [r3, #4]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	791b      	ldrb	r3, [r3, #4]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2301      	movs	r3, #1
 8000bca:	408b      	lsls	r3, r1
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68d9      	ldr	r1, [r3, #12]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7a1b      	ldrb	r3, [r3, #8]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d11d      	bne.n	8000c30 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	791b      	ldrb	r3, [r3, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2301      	movs	r3, #1
 8000c12:	408b      	lsls	r3, r1
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	68d9      	ldr	r1, [r3, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
	//if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
		// configure the alternate function registers
	//}
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010400 	.word	0x40010400
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	40011000 	.word	0x40011000
 8000c4c:	40011400 	.word	0x40011400
 8000c50:	40011800 	.word	0x40011800
 8000c54:	40011c00 	.word	0x40011c00
 8000c58:	40012000 	.word	0x40012000
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <SPI_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t  EnorDi){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d120      	bne.n	8000ce4 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <SPI_PeriClockControl+0xa0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d106      	bne.n	8000cb8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000caa:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000cb6:	e035      	b.n	8000d24 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <SPI_PeriClockControl+0xa8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d106      	bne.n	8000cce <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	61d3      	str	r3, [r2, #28]
}
 8000ccc:	e02a      	b.n	8000d24 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <SPI_PeriClockControl+0xac>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d126      	bne.n	8000d24 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ce0:	61d3      	str	r3, [r2, #28]
}
 8000ce2:	e01f      	b.n	8000d24 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <SPI_PeriClockControl+0xa0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d106      	bne.n	8000cfa <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cf6:	6193      	str	r3, [r2, #24]
}
 8000cf8:	e014      	b.n	8000d24 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <SPI_PeriClockControl+0xa8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d106      	bne.n	8000d10 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d0c:	61d3      	str	r3, [r2, #28]
}
 8000d0e:	e009      	b.n	8000d24 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SPI_PeriClockControl+0xac>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d105      	bne.n	8000d24 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SPI_PeriClockControl+0xa4>)
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	61d3      	str	r3, [r2, #28]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40003800 	.word	0x40003800
 8000d3c:	40003c00 	.word	0x40003c00

08000d40 <SPI_Init>:
 * @return				-
 *
 * @Note				-
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	// Enable peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff9e 	bl	8000c90 <SPI_PeriClockControl>

	// First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;  // temporal register
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6819      	ldr	r1, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	795b      	ldrb	r3, [r3, #5]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10c      	bne.n	8000d98 <SPI_Init+0x58>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d84:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e02c      	b.n	8000df2 <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d10c      	bne.n	8000dba <SPI_Init+0x7a>
		// BIDIMODE should be set
		tempreg |= (1 << 15);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e01b      	b.n	8000df2 <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	795b      	ldrb	r3, [r3, #5]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d117      	bne.n	8000df2 <SPI_Init+0xb2>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dc8:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6819      	ldr	r1, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
		// RXONLY bit must be set
		tempreg &= ~(1 << 10);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000de0:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
	}

	// 3. Configure the Sclk Speed SPI_SclkSpeed;
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	799b      	ldrb	r3, [r3, #6]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	79db      	ldrb	r3, [r3, #7]
 8000e14:	02db      	lsls	r3, r3, #11
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7a1b      	ldrb	r3, [r3, #8]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	461a      	mov	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

	//6. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a5b      	ldrb	r3, [r3, #9]
 8000e50:	461a      	mov	r2, r3
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

	//7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7a9b      	ldrb	r3, [r3, #10]
 8000e6c:	025b      	lsls	r3, r3, #9
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <SPI_GetFlagStatus>:
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <SPI_SendData>:
 * @Note				- This is blocking call
 */



void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000ec0:	e027      	b.n	8000f12 <SPI_SendData+0x5e>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000ec2:	bf00      	nop
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff ffe1 	bl	8000e8e <SPI_GetFlagStatus>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f8      	beq.n	8000ec4 <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00e      	beq.n	8000efc <SPI_SendData+0x48>
			// 16 BIT DFF
			// 1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	60da      	str	r2, [r3, #12]
			Len--;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
			Len--;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	e00a      	b.n	8000f12 <SPI_SendData+0x5e>
		}else{
			// 8 BIT
			// 1. Load the data in to the DR
			pSPIx->DR = *pTxBuffer;
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	60da      	str	r2, [r3, #12]
			Len--;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1d4      	bne.n	8000ec2 <SPI_SendData+0xe>
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <SPI_ReceiveData>:
 *
 * @return				- none
 *
 * @Note				- none
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000f2e:	e027      	b.n	8000f80 <SPI_ReceiveData+0x5e>
		// 1. Wait until RXNE is full
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000f30:	bf00      	nop
 8000f32:	2101      	movs	r1, #1
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ffaa 	bl	8000e8e <SPI_GetFlagStatus>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f8      	beq.n	8000f32 <SPI_ReceiveData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00e      	beq.n	8000f6a <SPI_ReceiveData+0x48>
			// 16 BIT DFF
			// 1. Load the data from DR to RxBuffer address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	801a      	strh	r2, [r3, #0]
			Len--;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
			Len--;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
			(uint16_t*)pRxBuffer++;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	e00a      	b.n	8000f80 <SPI_ReceiveData+0x5e>
		}else{
			// 8 BIT
			// 1. Load the data from DR to RxBuffer address
			*pRxBuffer = pSPIx->DR;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	701a      	strb	r2, [r3, #0]
			Len--;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1d4      	bne.n	8000f30 <SPI_ReceiveData+0xe>
		}
	}
}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SPI_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d106      	bne.n	8000fb0 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000fae:	e005      	b.n	8000fbc <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <SPI_SSOEConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d106      	bne.n	8000fe6 <SPI_SSOEConfig+0x20>
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f043 0204 	orr.w	r2, r3, #4
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	605a      	str	r2, [r3, #4]
	}else{
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000fe4:	e005      	b.n	8000ff2 <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f023 0204 	bic.w	r2, r3, #4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <__libc_init_array>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	2600      	movs	r6, #0
 8001000:	4d0c      	ldr	r5, [pc, #48]	; (8001034 <__libc_init_array+0x38>)
 8001002:	4c0d      	ldr	r4, [pc, #52]	; (8001038 <__libc_init_array+0x3c>)
 8001004:	1b64      	subs	r4, r4, r5
 8001006:	10a4      	asrs	r4, r4, #2
 8001008:	42a6      	cmp	r6, r4
 800100a:	d109      	bne.n	8001020 <__libc_init_array+0x24>
 800100c:	f001 faf2 	bl	80025f4 <_init>
 8001010:	2600      	movs	r6, #0
 8001012:	4d0a      	ldr	r5, [pc, #40]	; (800103c <__libc_init_array+0x40>)
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <__libc_init_array+0x44>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	42a6      	cmp	r6, r4
 800101c:	d105      	bne.n	800102a <__libc_init_array+0x2e>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	f855 3b04 	ldr.w	r3, [r5], #4
 8001024:	4798      	blx	r3
 8001026:	3601      	adds	r6, #1
 8001028:	e7ee      	b.n	8001008 <__libc_init_array+0xc>
 800102a:	f855 3b04 	ldr.w	r3, [r5], #4
 800102e:	4798      	blx	r3
 8001030:	3601      	adds	r6, #1
 8001032:	e7f2      	b.n	800101a <__libc_init_array+0x1e>
 8001034:	08002794 	.word	0x08002794
 8001038:	08002794 	.word	0x08002794
 800103c:	08002794 	.word	0x08002794
 8001040:	08002798 	.word	0x08002798

08001044 <memset>:
 8001044:	4603      	mov	r3, r0
 8001046:	4402      	add	r2, r0
 8001048:	4293      	cmp	r3, r2
 800104a:	d100      	bne.n	800104e <memset+0xa>
 800104c:	4770      	bx	lr
 800104e:	f803 1b01 	strb.w	r1, [r3], #1
 8001052:	e7f9      	b.n	8001048 <memset+0x4>

08001054 <iprintf>:
 8001054:	b40f      	push	{r0, r1, r2, r3}
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <iprintf+0x2c>)
 8001058:	b513      	push	{r0, r1, r4, lr}
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	b124      	cbz	r4, 8001068 <iprintf+0x14>
 800105e:	69a3      	ldr	r3, [r4, #24]
 8001060:	b913      	cbnz	r3, 8001068 <iprintf+0x14>
 8001062:	4620      	mov	r0, r4
 8001064:	f000 fa5a 	bl	800151c <__sinit>
 8001068:	ab05      	add	r3, sp, #20
 800106a:	4620      	mov	r0, r4
 800106c:	9a04      	ldr	r2, [sp, #16]
 800106e:	68a1      	ldr	r1, [r4, #8]
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	f000 fc5d 	bl	8001930 <_vfiprintf_r>
 8001076:	b002      	add	sp, #8
 8001078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800107c:	b004      	add	sp, #16
 800107e:	4770      	bx	lr
 8001080:	20000000 	.word	0x20000000

08001084 <_puts_r>:
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	460e      	mov	r6, r1
 8001088:	4605      	mov	r5, r0
 800108a:	b118      	cbz	r0, 8001094 <_puts_r+0x10>
 800108c:	6983      	ldr	r3, [r0, #24]
 800108e:	b90b      	cbnz	r3, 8001094 <_puts_r+0x10>
 8001090:	f000 fa44 	bl	800151c <__sinit>
 8001094:	69ab      	ldr	r3, [r5, #24]
 8001096:	68ac      	ldr	r4, [r5, #8]
 8001098:	b913      	cbnz	r3, 80010a0 <_puts_r+0x1c>
 800109a:	4628      	mov	r0, r5
 800109c:	f000 fa3e 	bl	800151c <__sinit>
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <_puts_r+0xd0>)
 80010a2:	429c      	cmp	r4, r3
 80010a4:	d120      	bne.n	80010e8 <_puts_r+0x64>
 80010a6:	686c      	ldr	r4, [r5, #4]
 80010a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010aa:	07db      	lsls	r3, r3, #31
 80010ac:	d405      	bmi.n	80010ba <_puts_r+0x36>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	0598      	lsls	r0, r3, #22
 80010b2:	d402      	bmi.n	80010ba <_puts_r+0x36>
 80010b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010b6:	f000 facf 	bl	8001658 <__retarget_lock_acquire_recursive>
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	0719      	lsls	r1, r3, #28
 80010be:	d51d      	bpl.n	80010fc <_puts_r+0x78>
 80010c0:	6923      	ldr	r3, [r4, #16]
 80010c2:	b1db      	cbz	r3, 80010fc <_puts_r+0x78>
 80010c4:	3e01      	subs	r6, #1
 80010c6:	68a3      	ldr	r3, [r4, #8]
 80010c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010cc:	3b01      	subs	r3, #1
 80010ce:	60a3      	str	r3, [r4, #8]
 80010d0:	bb39      	cbnz	r1, 8001122 <_puts_r+0x9e>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da38      	bge.n	8001148 <_puts_r+0xc4>
 80010d6:	4622      	mov	r2, r4
 80010d8:	210a      	movs	r1, #10
 80010da:	4628      	mov	r0, r5
 80010dc:	f000 f848 	bl	8001170 <__swbuf_r>
 80010e0:	3001      	adds	r0, #1
 80010e2:	d011      	beq.n	8001108 <_puts_r+0x84>
 80010e4:	250a      	movs	r5, #10
 80010e6:	e011      	b.n	800110c <_puts_r+0x88>
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <_puts_r+0xd4>)
 80010ea:	429c      	cmp	r4, r3
 80010ec:	d101      	bne.n	80010f2 <_puts_r+0x6e>
 80010ee:	68ac      	ldr	r4, [r5, #8]
 80010f0:	e7da      	b.n	80010a8 <_puts_r+0x24>
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <_puts_r+0xd8>)
 80010f4:	429c      	cmp	r4, r3
 80010f6:	bf08      	it	eq
 80010f8:	68ec      	ldreq	r4, [r5, #12]
 80010fa:	e7d5      	b.n	80010a8 <_puts_r+0x24>
 80010fc:	4621      	mov	r1, r4
 80010fe:	4628      	mov	r0, r5
 8001100:	f000 f888 	bl	8001214 <__swsetup_r>
 8001104:	2800      	cmp	r0, #0
 8001106:	d0dd      	beq.n	80010c4 <_puts_r+0x40>
 8001108:	f04f 35ff 	mov.w	r5, #4294967295
 800110c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800110e:	07da      	lsls	r2, r3, #31
 8001110:	d405      	bmi.n	800111e <_puts_r+0x9a>
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	059b      	lsls	r3, r3, #22
 8001116:	d402      	bmi.n	800111e <_puts_r+0x9a>
 8001118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800111a:	f000 fa9e 	bl	800165a <__retarget_lock_release_recursive>
 800111e:	4628      	mov	r0, r5
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	2b00      	cmp	r3, #0
 8001124:	da04      	bge.n	8001130 <_puts_r+0xac>
 8001126:	69a2      	ldr	r2, [r4, #24]
 8001128:	429a      	cmp	r2, r3
 800112a:	dc06      	bgt.n	800113a <_puts_r+0xb6>
 800112c:	290a      	cmp	r1, #10
 800112e:	d004      	beq.n	800113a <_puts_r+0xb6>
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	6022      	str	r2, [r4, #0]
 8001136:	7019      	strb	r1, [r3, #0]
 8001138:	e7c5      	b.n	80010c6 <_puts_r+0x42>
 800113a:	4622      	mov	r2, r4
 800113c:	4628      	mov	r0, r5
 800113e:	f000 f817 	bl	8001170 <__swbuf_r>
 8001142:	3001      	adds	r0, #1
 8001144:	d1bf      	bne.n	80010c6 <_puts_r+0x42>
 8001146:	e7df      	b.n	8001108 <_puts_r+0x84>
 8001148:	250a      	movs	r5, #10
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	6022      	str	r2, [r4, #0]
 8001150:	701d      	strb	r5, [r3, #0]
 8001152:	e7db      	b.n	800110c <_puts_r+0x88>
 8001154:	08002704 	.word	0x08002704
 8001158:	08002724 	.word	0x08002724
 800115c:	080026e4 	.word	0x080026e4

08001160 <puts>:
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <puts+0xc>)
 8001162:	4601      	mov	r1, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f7ff bf8d 	b.w	8001084 <_puts_r>
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <__swbuf_r>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	460e      	mov	r6, r1
 8001174:	4614      	mov	r4, r2
 8001176:	4605      	mov	r5, r0
 8001178:	b118      	cbz	r0, 8001182 <__swbuf_r+0x12>
 800117a:	6983      	ldr	r3, [r0, #24]
 800117c:	b90b      	cbnz	r3, 8001182 <__swbuf_r+0x12>
 800117e:	f000 f9cd 	bl	800151c <__sinit>
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <__swbuf_r+0x98>)
 8001184:	429c      	cmp	r4, r3
 8001186:	d12b      	bne.n	80011e0 <__swbuf_r+0x70>
 8001188:	686c      	ldr	r4, [r5, #4]
 800118a:	69a3      	ldr	r3, [r4, #24]
 800118c:	60a3      	str	r3, [r4, #8]
 800118e:	89a3      	ldrh	r3, [r4, #12]
 8001190:	071a      	lsls	r2, r3, #28
 8001192:	d52f      	bpl.n	80011f4 <__swbuf_r+0x84>
 8001194:	6923      	ldr	r3, [r4, #16]
 8001196:	b36b      	cbz	r3, 80011f4 <__swbuf_r+0x84>
 8001198:	6923      	ldr	r3, [r4, #16]
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	b2f6      	uxtb	r6, r6
 800119e:	1ac0      	subs	r0, r0, r3
 80011a0:	6963      	ldr	r3, [r4, #20]
 80011a2:	4637      	mov	r7, r6
 80011a4:	4283      	cmp	r3, r0
 80011a6:	dc04      	bgt.n	80011b2 <__swbuf_r+0x42>
 80011a8:	4621      	mov	r1, r4
 80011aa:	4628      	mov	r0, r5
 80011ac:	f000 f922 	bl	80013f4 <_fflush_r>
 80011b0:	bb30      	cbnz	r0, 8001200 <__swbuf_r+0x90>
 80011b2:	68a3      	ldr	r3, [r4, #8]
 80011b4:	3001      	adds	r0, #1
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	6022      	str	r2, [r4, #0]
 80011c0:	701e      	strb	r6, [r3, #0]
 80011c2:	6963      	ldr	r3, [r4, #20]
 80011c4:	4283      	cmp	r3, r0
 80011c6:	d004      	beq.n	80011d2 <__swbuf_r+0x62>
 80011c8:	89a3      	ldrh	r3, [r4, #12]
 80011ca:	07db      	lsls	r3, r3, #31
 80011cc:	d506      	bpl.n	80011dc <__swbuf_r+0x6c>
 80011ce:	2e0a      	cmp	r6, #10
 80011d0:	d104      	bne.n	80011dc <__swbuf_r+0x6c>
 80011d2:	4621      	mov	r1, r4
 80011d4:	4628      	mov	r0, r5
 80011d6:	f000 f90d 	bl	80013f4 <_fflush_r>
 80011da:	b988      	cbnz	r0, 8001200 <__swbuf_r+0x90>
 80011dc:	4638      	mov	r0, r7
 80011de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <__swbuf_r+0x9c>)
 80011e2:	429c      	cmp	r4, r3
 80011e4:	d101      	bne.n	80011ea <__swbuf_r+0x7a>
 80011e6:	68ac      	ldr	r4, [r5, #8]
 80011e8:	e7cf      	b.n	800118a <__swbuf_r+0x1a>
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <__swbuf_r+0xa0>)
 80011ec:	429c      	cmp	r4, r3
 80011ee:	bf08      	it	eq
 80011f0:	68ec      	ldreq	r4, [r5, #12]
 80011f2:	e7ca      	b.n	800118a <__swbuf_r+0x1a>
 80011f4:	4621      	mov	r1, r4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f80c 	bl	8001214 <__swsetup_r>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d0cb      	beq.n	8001198 <__swbuf_r+0x28>
 8001200:	f04f 37ff 	mov.w	r7, #4294967295
 8001204:	e7ea      	b.n	80011dc <__swbuf_r+0x6c>
 8001206:	bf00      	nop
 8001208:	08002704 	.word	0x08002704
 800120c:	08002724 	.word	0x08002724
 8001210:	080026e4 	.word	0x080026e4

08001214 <__swsetup_r>:
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <__swsetup_r+0xcc>)
 8001216:	b570      	push	{r4, r5, r6, lr}
 8001218:	681d      	ldr	r5, [r3, #0]
 800121a:	4606      	mov	r6, r0
 800121c:	460c      	mov	r4, r1
 800121e:	b125      	cbz	r5, 800122a <__swsetup_r+0x16>
 8001220:	69ab      	ldr	r3, [r5, #24]
 8001222:	b913      	cbnz	r3, 800122a <__swsetup_r+0x16>
 8001224:	4628      	mov	r0, r5
 8001226:	f000 f979 	bl	800151c <__sinit>
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <__swsetup_r+0xd0>)
 800122c:	429c      	cmp	r4, r3
 800122e:	d10f      	bne.n	8001250 <__swsetup_r+0x3c>
 8001230:	686c      	ldr	r4, [r5, #4]
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001238:	0719      	lsls	r1, r3, #28
 800123a:	d42c      	bmi.n	8001296 <__swsetup_r+0x82>
 800123c:	06dd      	lsls	r5, r3, #27
 800123e:	d411      	bmi.n	8001264 <__swsetup_r+0x50>
 8001240:	2309      	movs	r3, #9
 8001242:	6033      	str	r3, [r6, #0]
 8001244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	e03e      	b.n	80012ce <__swsetup_r+0xba>
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <__swsetup_r+0xd4>)
 8001252:	429c      	cmp	r4, r3
 8001254:	d101      	bne.n	800125a <__swsetup_r+0x46>
 8001256:	68ac      	ldr	r4, [r5, #8]
 8001258:	e7eb      	b.n	8001232 <__swsetup_r+0x1e>
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <__swsetup_r+0xd8>)
 800125c:	429c      	cmp	r4, r3
 800125e:	bf08      	it	eq
 8001260:	68ec      	ldreq	r4, [r5, #12]
 8001262:	e7e6      	b.n	8001232 <__swsetup_r+0x1e>
 8001264:	0758      	lsls	r0, r3, #29
 8001266:	d512      	bpl.n	800128e <__swsetup_r+0x7a>
 8001268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800126a:	b141      	cbz	r1, 800127e <__swsetup_r+0x6a>
 800126c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001270:	4299      	cmp	r1, r3
 8001272:	d002      	beq.n	800127a <__swsetup_r+0x66>
 8001274:	4630      	mov	r0, r6
 8001276:	f000 fa57 	bl	8001728 <_free_r>
 800127a:	2300      	movs	r3, #0
 800127c:	6363      	str	r3, [r4, #52]	; 0x34
 800127e:	89a3      	ldrh	r3, [r4, #12]
 8001280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001284:	81a3      	strh	r3, [r4, #12]
 8001286:	2300      	movs	r3, #0
 8001288:	6063      	str	r3, [r4, #4]
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	b94b      	cbnz	r3, 80012ae <__swsetup_r+0x9a>
 800129a:	89a3      	ldrh	r3, [r4, #12]
 800129c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a4:	d003      	beq.n	80012ae <__swsetup_r+0x9a>
 80012a6:	4621      	mov	r1, r4
 80012a8:	4630      	mov	r0, r6
 80012aa:	f000 f9fd 	bl	80016a8 <__smakebuf_r>
 80012ae:	89a0      	ldrh	r0, [r4, #12]
 80012b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012b4:	f010 0301 	ands.w	r3, r0, #1
 80012b8:	d00a      	beq.n	80012d0 <__swsetup_r+0xbc>
 80012ba:	2300      	movs	r3, #0
 80012bc:	60a3      	str	r3, [r4, #8]
 80012be:	6963      	ldr	r3, [r4, #20]
 80012c0:	425b      	negs	r3, r3
 80012c2:	61a3      	str	r3, [r4, #24]
 80012c4:	6923      	ldr	r3, [r4, #16]
 80012c6:	b943      	cbnz	r3, 80012da <__swsetup_r+0xc6>
 80012c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012cc:	d1ba      	bne.n	8001244 <__swsetup_r+0x30>
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	0781      	lsls	r1, r0, #30
 80012d2:	bf58      	it	pl
 80012d4:	6963      	ldrpl	r3, [r4, #20]
 80012d6:	60a3      	str	r3, [r4, #8]
 80012d8:	e7f4      	b.n	80012c4 <__swsetup_r+0xb0>
 80012da:	2000      	movs	r0, #0
 80012dc:	e7f7      	b.n	80012ce <__swsetup_r+0xba>
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000
 80012e4:	08002704 	.word	0x08002704
 80012e8:	08002724 	.word	0x08002724
 80012ec:	080026e4 	.word	0x080026e4

080012f0 <__sflush_r>:
 80012f0:	898a      	ldrh	r2, [r1, #12]
 80012f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f4:	4605      	mov	r5, r0
 80012f6:	0710      	lsls	r0, r2, #28
 80012f8:	460c      	mov	r4, r1
 80012fa:	d457      	bmi.n	80013ac <__sflush_r+0xbc>
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dc04      	bgt.n	800130c <__sflush_r+0x1c>
 8001302:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc01      	bgt.n	800130c <__sflush_r+0x1c>
 8001308:	2000      	movs	r0, #0
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0fa      	beq.n	8001308 <__sflush_r+0x18>
 8001312:	2300      	movs	r3, #0
 8001314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001318:	682f      	ldr	r7, [r5, #0]
 800131a:	602b      	str	r3, [r5, #0]
 800131c:	d032      	beq.n	8001384 <__sflush_r+0x94>
 800131e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	075a      	lsls	r2, r3, #29
 8001324:	d505      	bpl.n	8001332 <__sflush_r+0x42>
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	1ac0      	subs	r0, r0, r3
 800132a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800132c:	b10b      	cbz	r3, 8001332 <__sflush_r+0x42>
 800132e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	2300      	movs	r3, #0
 8001334:	4602      	mov	r2, r0
 8001336:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001338:	4628      	mov	r0, r5
 800133a:	6a21      	ldr	r1, [r4, #32]
 800133c:	47b0      	blx	r6
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	d106      	bne.n	8001352 <__sflush_r+0x62>
 8001344:	6829      	ldr	r1, [r5, #0]
 8001346:	291d      	cmp	r1, #29
 8001348:	d82c      	bhi.n	80013a4 <__sflush_r+0xb4>
 800134a:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <__sflush_r+0x100>)
 800134c:	40ca      	lsrs	r2, r1
 800134e:	07d6      	lsls	r6, r2, #31
 8001350:	d528      	bpl.n	80013a4 <__sflush_r+0xb4>
 8001352:	2200      	movs	r2, #0
 8001354:	6062      	str	r2, [r4, #4]
 8001356:	6922      	ldr	r2, [r4, #16]
 8001358:	04d9      	lsls	r1, r3, #19
 800135a:	6022      	str	r2, [r4, #0]
 800135c:	d504      	bpl.n	8001368 <__sflush_r+0x78>
 800135e:	1c42      	adds	r2, r0, #1
 8001360:	d101      	bne.n	8001366 <__sflush_r+0x76>
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	b903      	cbnz	r3, 8001368 <__sflush_r+0x78>
 8001366:	6560      	str	r0, [r4, #84]	; 0x54
 8001368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800136a:	602f      	str	r7, [r5, #0]
 800136c:	2900      	cmp	r1, #0
 800136e:	d0cb      	beq.n	8001308 <__sflush_r+0x18>
 8001370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001374:	4299      	cmp	r1, r3
 8001376:	d002      	beq.n	800137e <__sflush_r+0x8e>
 8001378:	4628      	mov	r0, r5
 800137a:	f000 f9d5 	bl	8001728 <_free_r>
 800137e:	2000      	movs	r0, #0
 8001380:	6360      	str	r0, [r4, #52]	; 0x34
 8001382:	e7c2      	b.n	800130a <__sflush_r+0x1a>
 8001384:	6a21      	ldr	r1, [r4, #32]
 8001386:	2301      	movs	r3, #1
 8001388:	4628      	mov	r0, r5
 800138a:	47b0      	blx	r6
 800138c:	1c41      	adds	r1, r0, #1
 800138e:	d1c7      	bne.n	8001320 <__sflush_r+0x30>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0c4      	beq.n	8001320 <__sflush_r+0x30>
 8001396:	2b1d      	cmp	r3, #29
 8001398:	d001      	beq.n	800139e <__sflush_r+0xae>
 800139a:	2b16      	cmp	r3, #22
 800139c:	d101      	bne.n	80013a2 <__sflush_r+0xb2>
 800139e:	602f      	str	r7, [r5, #0]
 80013a0:	e7b2      	b.n	8001308 <__sflush_r+0x18>
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	e7ae      	b.n	800130a <__sflush_r+0x1a>
 80013ac:	690f      	ldr	r7, [r1, #16]
 80013ae:	2f00      	cmp	r7, #0
 80013b0:	d0aa      	beq.n	8001308 <__sflush_r+0x18>
 80013b2:	0793      	lsls	r3, r2, #30
 80013b4:	bf18      	it	ne
 80013b6:	2300      	movne	r3, #0
 80013b8:	680e      	ldr	r6, [r1, #0]
 80013ba:	bf08      	it	eq
 80013bc:	694b      	ldreq	r3, [r1, #20]
 80013be:	1bf6      	subs	r6, r6, r7
 80013c0:	600f      	str	r7, [r1, #0]
 80013c2:	608b      	str	r3, [r1, #8]
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	dd9f      	ble.n	8001308 <__sflush_r+0x18>
 80013c8:	4633      	mov	r3, r6
 80013ca:	463a      	mov	r2, r7
 80013cc:	4628      	mov	r0, r5
 80013ce:	6a21      	ldr	r1, [r4, #32]
 80013d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80013d4:	47e0      	blx	ip
 80013d6:	2800      	cmp	r0, #0
 80013d8:	dc06      	bgt.n	80013e8 <__sflush_r+0xf8>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e4:	81a3      	strh	r3, [r4, #12]
 80013e6:	e790      	b.n	800130a <__sflush_r+0x1a>
 80013e8:	4407      	add	r7, r0
 80013ea:	1a36      	subs	r6, r6, r0
 80013ec:	e7ea      	b.n	80013c4 <__sflush_r+0xd4>
 80013ee:	bf00      	nop
 80013f0:	20400001 	.word	0x20400001

080013f4 <_fflush_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	690b      	ldr	r3, [r1, #16]
 80013f8:	4605      	mov	r5, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	b913      	cbnz	r3, 8001404 <_fflush_r+0x10>
 80013fe:	2500      	movs	r5, #0
 8001400:	4628      	mov	r0, r5
 8001402:	bd38      	pop	{r3, r4, r5, pc}
 8001404:	b118      	cbz	r0, 800140e <_fflush_r+0x1a>
 8001406:	6983      	ldr	r3, [r0, #24]
 8001408:	b90b      	cbnz	r3, 800140e <_fflush_r+0x1a>
 800140a:	f000 f887 	bl	800151c <__sinit>
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <_fflush_r+0x6c>)
 8001410:	429c      	cmp	r4, r3
 8001412:	d11b      	bne.n	800144c <_fflush_r+0x58>
 8001414:	686c      	ldr	r4, [r5, #4]
 8001416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ef      	beq.n	80013fe <_fflush_r+0xa>
 800141e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001420:	07d0      	lsls	r0, r2, #31
 8001422:	d404      	bmi.n	800142e <_fflush_r+0x3a>
 8001424:	0599      	lsls	r1, r3, #22
 8001426:	d402      	bmi.n	800142e <_fflush_r+0x3a>
 8001428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800142a:	f000 f915 	bl	8001658 <__retarget_lock_acquire_recursive>
 800142e:	4628      	mov	r0, r5
 8001430:	4621      	mov	r1, r4
 8001432:	f7ff ff5d 	bl	80012f0 <__sflush_r>
 8001436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001438:	4605      	mov	r5, r0
 800143a:	07da      	lsls	r2, r3, #31
 800143c:	d4e0      	bmi.n	8001400 <_fflush_r+0xc>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	059b      	lsls	r3, r3, #22
 8001442:	d4dd      	bmi.n	8001400 <_fflush_r+0xc>
 8001444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001446:	f000 f908 	bl	800165a <__retarget_lock_release_recursive>
 800144a:	e7d9      	b.n	8001400 <_fflush_r+0xc>
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <_fflush_r+0x70>)
 800144e:	429c      	cmp	r4, r3
 8001450:	d101      	bne.n	8001456 <_fflush_r+0x62>
 8001452:	68ac      	ldr	r4, [r5, #8]
 8001454:	e7df      	b.n	8001416 <_fflush_r+0x22>
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <_fflush_r+0x74>)
 8001458:	429c      	cmp	r4, r3
 800145a:	bf08      	it	eq
 800145c:	68ec      	ldreq	r4, [r5, #12]
 800145e:	e7da      	b.n	8001416 <_fflush_r+0x22>
 8001460:	08002704 	.word	0x08002704
 8001464:	08002724 	.word	0x08002724
 8001468:	080026e4 	.word	0x080026e4

0800146c <std>:
 800146c:	2300      	movs	r3, #0
 800146e:	b510      	push	{r4, lr}
 8001470:	4604      	mov	r4, r0
 8001472:	e9c0 3300 	strd	r3, r3, [r0]
 8001476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800147a:	6083      	str	r3, [r0, #8]
 800147c:	8181      	strh	r1, [r0, #12]
 800147e:	6643      	str	r3, [r0, #100]	; 0x64
 8001480:	81c2      	strh	r2, [r0, #14]
 8001482:	6183      	str	r3, [r0, #24]
 8001484:	4619      	mov	r1, r3
 8001486:	2208      	movs	r2, #8
 8001488:	305c      	adds	r0, #92	; 0x5c
 800148a:	f7ff fddb 	bl	8001044 <memset>
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <std+0x38>)
 8001490:	6224      	str	r4, [r4, #32]
 8001492:	6263      	str	r3, [r4, #36]	; 0x24
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <std+0x3c>)
 8001496:	62a3      	str	r3, [r4, #40]	; 0x28
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <std+0x40>)
 800149a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <std+0x44>)
 800149e:	6323      	str	r3, [r4, #48]	; 0x30
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	bf00      	nop
 80014a4:	08001edd 	.word	0x08001edd
 80014a8:	08001eff 	.word	0x08001eff
 80014ac:	08001f37 	.word	0x08001f37
 80014b0:	08001f5b 	.word	0x08001f5b

080014b4 <_cleanup_r>:
 80014b4:	4901      	ldr	r1, [pc, #4]	; (80014bc <_cleanup_r+0x8>)
 80014b6:	f000 b8af 	b.w	8001618 <_fwalk_reent>
 80014ba:	bf00      	nop
 80014bc:	080013f5 	.word	0x080013f5

080014c0 <__sfmoreglue>:
 80014c0:	2268      	movs	r2, #104	; 0x68
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	1e4d      	subs	r5, r1, #1
 80014c6:	4355      	muls	r5, r2
 80014c8:	460e      	mov	r6, r1
 80014ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014ce:	f000 f993 	bl	80017f8 <_malloc_r>
 80014d2:	4604      	mov	r4, r0
 80014d4:	b140      	cbz	r0, 80014e8 <__sfmoreglue+0x28>
 80014d6:	2100      	movs	r1, #0
 80014d8:	e9c0 1600 	strd	r1, r6, [r0]
 80014dc:	300c      	adds	r0, #12
 80014de:	60a0      	str	r0, [r4, #8]
 80014e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014e4:	f7ff fdae 	bl	8001044 <memset>
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd70      	pop	{r4, r5, r6, pc}

080014ec <__sfp_lock_acquire>:
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <__sfp_lock_acquire+0x8>)
 80014ee:	f000 b8b3 	b.w	8001658 <__retarget_lock_acquire_recursive>
 80014f2:	bf00      	nop
 80014f4:	2000008d 	.word	0x2000008d

080014f8 <__sfp_lock_release>:
 80014f8:	4801      	ldr	r0, [pc, #4]	; (8001500 <__sfp_lock_release+0x8>)
 80014fa:	f000 b8ae 	b.w	800165a <__retarget_lock_release_recursive>
 80014fe:	bf00      	nop
 8001500:	2000008d 	.word	0x2000008d

08001504 <__sinit_lock_acquire>:
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <__sinit_lock_acquire+0x8>)
 8001506:	f000 b8a7 	b.w	8001658 <__retarget_lock_acquire_recursive>
 800150a:	bf00      	nop
 800150c:	2000008e 	.word	0x2000008e

08001510 <__sinit_lock_release>:
 8001510:	4801      	ldr	r0, [pc, #4]	; (8001518 <__sinit_lock_release+0x8>)
 8001512:	f000 b8a2 	b.w	800165a <__retarget_lock_release_recursive>
 8001516:	bf00      	nop
 8001518:	2000008e 	.word	0x2000008e

0800151c <__sinit>:
 800151c:	b510      	push	{r4, lr}
 800151e:	4604      	mov	r4, r0
 8001520:	f7ff fff0 	bl	8001504 <__sinit_lock_acquire>
 8001524:	69a3      	ldr	r3, [r4, #24]
 8001526:	b11b      	cbz	r3, 8001530 <__sinit+0x14>
 8001528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800152c:	f7ff bff0 	b.w	8001510 <__sinit_lock_release>
 8001530:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001534:	6523      	str	r3, [r4, #80]	; 0x50
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <__sinit+0x68>)
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <__sinit+0x6c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	62a2      	str	r2, [r4, #40]	; 0x28
 800153e:	42a3      	cmp	r3, r4
 8001540:	bf08      	it	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	4620      	mov	r0, r4
 8001546:	bf08      	it	eq
 8001548:	61a3      	streq	r3, [r4, #24]
 800154a:	f000 f81f 	bl	800158c <__sfp>
 800154e:	6060      	str	r0, [r4, #4]
 8001550:	4620      	mov	r0, r4
 8001552:	f000 f81b 	bl	800158c <__sfp>
 8001556:	60a0      	str	r0, [r4, #8]
 8001558:	4620      	mov	r0, r4
 800155a:	f000 f817 	bl	800158c <__sfp>
 800155e:	2200      	movs	r2, #0
 8001560:	2104      	movs	r1, #4
 8001562:	60e0      	str	r0, [r4, #12]
 8001564:	6860      	ldr	r0, [r4, #4]
 8001566:	f7ff ff81 	bl	800146c <std>
 800156a:	2201      	movs	r2, #1
 800156c:	2109      	movs	r1, #9
 800156e:	68a0      	ldr	r0, [r4, #8]
 8001570:	f7ff ff7c 	bl	800146c <std>
 8001574:	2202      	movs	r2, #2
 8001576:	2112      	movs	r1, #18
 8001578:	68e0      	ldr	r0, [r4, #12]
 800157a:	f7ff ff77 	bl	800146c <std>
 800157e:	2301      	movs	r3, #1
 8001580:	61a3      	str	r3, [r4, #24]
 8001582:	e7d1      	b.n	8001528 <__sinit+0xc>
 8001584:	080026e0 	.word	0x080026e0
 8001588:	080014b5 	.word	0x080014b5

0800158c <__sfp>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	4607      	mov	r7, r0
 8001590:	f7ff ffac 	bl	80014ec <__sfp_lock_acquire>
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <__sfp+0x84>)
 8001596:	681e      	ldr	r6, [r3, #0]
 8001598:	69b3      	ldr	r3, [r6, #24]
 800159a:	b913      	cbnz	r3, 80015a2 <__sfp+0x16>
 800159c:	4630      	mov	r0, r6
 800159e:	f7ff ffbd 	bl	800151c <__sinit>
 80015a2:	3648      	adds	r6, #72	; 0x48
 80015a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	d503      	bpl.n	80015b4 <__sfp+0x28>
 80015ac:	6833      	ldr	r3, [r6, #0]
 80015ae:	b30b      	cbz	r3, 80015f4 <__sfp+0x68>
 80015b0:	6836      	ldr	r6, [r6, #0]
 80015b2:	e7f7      	b.n	80015a4 <__sfp+0x18>
 80015b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015b8:	b9d5      	cbnz	r5, 80015f0 <__sfp+0x64>
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <__sfp+0x88>)
 80015bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015c0:	60e3      	str	r3, [r4, #12]
 80015c2:	6665      	str	r5, [r4, #100]	; 0x64
 80015c4:	f000 f847 	bl	8001656 <__retarget_lock_init_recursive>
 80015c8:	f7ff ff96 	bl	80014f8 <__sfp_lock_release>
 80015cc:	2208      	movs	r2, #8
 80015ce:	4629      	mov	r1, r5
 80015d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015d8:	6025      	str	r5, [r4, #0]
 80015da:	61a5      	str	r5, [r4, #24]
 80015dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015e0:	f7ff fd30 	bl	8001044 <memset>
 80015e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015ec:	4620      	mov	r0, r4
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f0:	3468      	adds	r4, #104	; 0x68
 80015f2:	e7d9      	b.n	80015a8 <__sfp+0x1c>
 80015f4:	2104      	movs	r1, #4
 80015f6:	4638      	mov	r0, r7
 80015f8:	f7ff ff62 	bl	80014c0 <__sfmoreglue>
 80015fc:	4604      	mov	r4, r0
 80015fe:	6030      	str	r0, [r6, #0]
 8001600:	2800      	cmp	r0, #0
 8001602:	d1d5      	bne.n	80015b0 <__sfp+0x24>
 8001604:	f7ff ff78 	bl	80014f8 <__sfp_lock_release>
 8001608:	230c      	movs	r3, #12
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e7ee      	b.n	80015ec <__sfp+0x60>
 800160e:	bf00      	nop
 8001610:	080026e0 	.word	0x080026e0
 8001614:	ffff0001 	.word	0xffff0001

08001618 <_fwalk_reent>:
 8001618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800161c:	4606      	mov	r6, r0
 800161e:	4688      	mov	r8, r1
 8001620:	2700      	movs	r7, #0
 8001622:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001626:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800162a:	f1b9 0901 	subs.w	r9, r9, #1
 800162e:	d505      	bpl.n	800163c <_fwalk_reent+0x24>
 8001630:	6824      	ldr	r4, [r4, #0]
 8001632:	2c00      	cmp	r4, #0
 8001634:	d1f7      	bne.n	8001626 <_fwalk_reent+0xe>
 8001636:	4638      	mov	r0, r7
 8001638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800163c:	89ab      	ldrh	r3, [r5, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d907      	bls.n	8001652 <_fwalk_reent+0x3a>
 8001642:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001646:	3301      	adds	r3, #1
 8001648:	d003      	beq.n	8001652 <_fwalk_reent+0x3a>
 800164a:	4629      	mov	r1, r5
 800164c:	4630      	mov	r0, r6
 800164e:	47c0      	blx	r8
 8001650:	4307      	orrs	r7, r0
 8001652:	3568      	adds	r5, #104	; 0x68
 8001654:	e7e9      	b.n	800162a <_fwalk_reent+0x12>

08001656 <__retarget_lock_init_recursive>:
 8001656:	4770      	bx	lr

08001658 <__retarget_lock_acquire_recursive>:
 8001658:	4770      	bx	lr

0800165a <__retarget_lock_release_recursive>:
 800165a:	4770      	bx	lr

0800165c <__swhatbuf_r>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	460e      	mov	r6, r1
 8001660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001664:	4614      	mov	r4, r2
 8001666:	2900      	cmp	r1, #0
 8001668:	461d      	mov	r5, r3
 800166a:	b096      	sub	sp, #88	; 0x58
 800166c:	da08      	bge.n	8001680 <__swhatbuf_r+0x24>
 800166e:	2200      	movs	r2, #0
 8001670:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001674:	602a      	str	r2, [r5, #0]
 8001676:	061a      	lsls	r2, r3, #24
 8001678:	d410      	bmi.n	800169c <__swhatbuf_r+0x40>
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	e00e      	b.n	800169e <__swhatbuf_r+0x42>
 8001680:	466a      	mov	r2, sp
 8001682:	f000 fc91 	bl	8001fa8 <_fstat_r>
 8001686:	2800      	cmp	r0, #0
 8001688:	dbf1      	blt.n	800166e <__swhatbuf_r+0x12>
 800168a:	9a01      	ldr	r2, [sp, #4]
 800168c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001690:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001694:	425a      	negs	r2, r3
 8001696:	415a      	adcs	r2, r3
 8001698:	602a      	str	r2, [r5, #0]
 800169a:	e7ee      	b.n	800167a <__swhatbuf_r+0x1e>
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	2000      	movs	r0, #0
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	b016      	add	sp, #88	; 0x58
 80016a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080016a8 <__smakebuf_r>:
 80016a8:	898b      	ldrh	r3, [r1, #12]
 80016aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ac:	079d      	lsls	r5, r3, #30
 80016ae:	4606      	mov	r6, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	d507      	bpl.n	80016c4 <__smakebuf_r+0x1c>
 80016b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016b8:	6023      	str	r3, [r4, #0]
 80016ba:	6123      	str	r3, [r4, #16]
 80016bc:	2301      	movs	r3, #1
 80016be:	6163      	str	r3, [r4, #20]
 80016c0:	b002      	add	sp, #8
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	466a      	mov	r2, sp
 80016c6:	ab01      	add	r3, sp, #4
 80016c8:	f7ff ffc8 	bl	800165c <__swhatbuf_r>
 80016cc:	9900      	ldr	r1, [sp, #0]
 80016ce:	4605      	mov	r5, r0
 80016d0:	4630      	mov	r0, r6
 80016d2:	f000 f891 	bl	80017f8 <_malloc_r>
 80016d6:	b948      	cbnz	r0, 80016ec <__smakebuf_r+0x44>
 80016d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016dc:	059a      	lsls	r2, r3, #22
 80016de:	d4ef      	bmi.n	80016c0 <__smakebuf_r+0x18>
 80016e0:	f023 0303 	bic.w	r3, r3, #3
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	81a3      	strh	r3, [r4, #12]
 80016ea:	e7e3      	b.n	80016b4 <__smakebuf_r+0xc>
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <__smakebuf_r+0x7c>)
 80016ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80016f0:	89a3      	ldrh	r3, [r4, #12]
 80016f2:	6020      	str	r0, [r4, #0]
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	81a3      	strh	r3, [r4, #12]
 80016fa:	9b00      	ldr	r3, [sp, #0]
 80016fc:	6120      	str	r0, [r4, #16]
 80016fe:	6163      	str	r3, [r4, #20]
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	b15b      	cbz	r3, 800171c <__smakebuf_r+0x74>
 8001704:	4630      	mov	r0, r6
 8001706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800170a:	f000 fc5f 	bl	8001fcc <_isatty_r>
 800170e:	b128      	cbz	r0, 800171c <__smakebuf_r+0x74>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	f023 0303 	bic.w	r3, r3, #3
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	81a3      	strh	r3, [r4, #12]
 800171c:	89a0      	ldrh	r0, [r4, #12]
 800171e:	4305      	orrs	r5, r0
 8001720:	81a5      	strh	r5, [r4, #12]
 8001722:	e7cd      	b.n	80016c0 <__smakebuf_r+0x18>
 8001724:	080014b5 	.word	0x080014b5

08001728 <_free_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4605      	mov	r5, r0
 800172c:	2900      	cmp	r1, #0
 800172e:	d040      	beq.n	80017b2 <_free_r+0x8a>
 8001730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001734:	1f0c      	subs	r4, r1, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	bfb8      	it	lt
 800173a:	18e4      	addlt	r4, r4, r3
 800173c:	f000 fc76 	bl	800202c <__malloc_lock>
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <_free_r+0x8c>)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	b933      	cbnz	r3, 8001754 <_free_r+0x2c>
 8001746:	6063      	str	r3, [r4, #4]
 8001748:	6014      	str	r4, [r2, #0]
 800174a:	4628      	mov	r0, r5
 800174c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001750:	f000 bc72 	b.w	8002038 <__malloc_unlock>
 8001754:	42a3      	cmp	r3, r4
 8001756:	d908      	bls.n	800176a <_free_r+0x42>
 8001758:	6820      	ldr	r0, [r4, #0]
 800175a:	1821      	adds	r1, r4, r0
 800175c:	428b      	cmp	r3, r1
 800175e:	bf01      	itttt	eq
 8001760:	6819      	ldreq	r1, [r3, #0]
 8001762:	685b      	ldreq	r3, [r3, #4]
 8001764:	1809      	addeq	r1, r1, r0
 8001766:	6021      	streq	r1, [r4, #0]
 8001768:	e7ed      	b.n	8001746 <_free_r+0x1e>
 800176a:	461a      	mov	r2, r3
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	b10b      	cbz	r3, 8001774 <_free_r+0x4c>
 8001770:	42a3      	cmp	r3, r4
 8001772:	d9fa      	bls.n	800176a <_free_r+0x42>
 8001774:	6811      	ldr	r1, [r2, #0]
 8001776:	1850      	adds	r0, r2, r1
 8001778:	42a0      	cmp	r0, r4
 800177a:	d10b      	bne.n	8001794 <_free_r+0x6c>
 800177c:	6820      	ldr	r0, [r4, #0]
 800177e:	4401      	add	r1, r0
 8001780:	1850      	adds	r0, r2, r1
 8001782:	4283      	cmp	r3, r0
 8001784:	6011      	str	r1, [r2, #0]
 8001786:	d1e0      	bne.n	800174a <_free_r+0x22>
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4401      	add	r1, r0
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	e7da      	b.n	800174a <_free_r+0x22>
 8001794:	d902      	bls.n	800179c <_free_r+0x74>
 8001796:	230c      	movs	r3, #12
 8001798:	602b      	str	r3, [r5, #0]
 800179a:	e7d6      	b.n	800174a <_free_r+0x22>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	1821      	adds	r1, r4, r0
 80017a0:	428b      	cmp	r3, r1
 80017a2:	bf01      	itttt	eq
 80017a4:	6819      	ldreq	r1, [r3, #0]
 80017a6:	685b      	ldreq	r3, [r3, #4]
 80017a8:	1809      	addeq	r1, r1, r0
 80017aa:	6021      	streq	r1, [r4, #0]
 80017ac:	6063      	str	r3, [r4, #4]
 80017ae:	6054      	str	r4, [r2, #4]
 80017b0:	e7cb      	b.n	800174a <_free_r+0x22>
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	20000090 	.word	0x20000090

080017b8 <sbrk_aligned>:
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	4e0e      	ldr	r6, [pc, #56]	; (80017f4 <sbrk_aligned+0x3c>)
 80017bc:	460c      	mov	r4, r1
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	4605      	mov	r5, r0
 80017c2:	b911      	cbnz	r1, 80017ca <sbrk_aligned+0x12>
 80017c4:	f000 fb7a 	bl	8001ebc <_sbrk_r>
 80017c8:	6030      	str	r0, [r6, #0]
 80017ca:	4621      	mov	r1, r4
 80017cc:	4628      	mov	r0, r5
 80017ce:	f000 fb75 	bl	8001ebc <_sbrk_r>
 80017d2:	1c43      	adds	r3, r0, #1
 80017d4:	d00a      	beq.n	80017ec <sbrk_aligned+0x34>
 80017d6:	1cc4      	adds	r4, r0, #3
 80017d8:	f024 0403 	bic.w	r4, r4, #3
 80017dc:	42a0      	cmp	r0, r4
 80017de:	d007      	beq.n	80017f0 <sbrk_aligned+0x38>
 80017e0:	1a21      	subs	r1, r4, r0
 80017e2:	4628      	mov	r0, r5
 80017e4:	f000 fb6a 	bl	8001ebc <_sbrk_r>
 80017e8:	3001      	adds	r0, #1
 80017ea:	d101      	bne.n	80017f0 <sbrk_aligned+0x38>
 80017ec:	f04f 34ff 	mov.w	r4, #4294967295
 80017f0:	4620      	mov	r0, r4
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
 80017f4:	20000094 	.word	0x20000094

080017f8 <_malloc_r>:
 80017f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017fc:	1ccd      	adds	r5, r1, #3
 80017fe:	f025 0503 	bic.w	r5, r5, #3
 8001802:	3508      	adds	r5, #8
 8001804:	2d0c      	cmp	r5, #12
 8001806:	bf38      	it	cc
 8001808:	250c      	movcc	r5, #12
 800180a:	2d00      	cmp	r5, #0
 800180c:	4607      	mov	r7, r0
 800180e:	db01      	blt.n	8001814 <_malloc_r+0x1c>
 8001810:	42a9      	cmp	r1, r5
 8001812:	d905      	bls.n	8001820 <_malloc_r+0x28>
 8001814:	230c      	movs	r3, #12
 8001816:	2600      	movs	r6, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4630      	mov	r0, r6
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001820:	4e2e      	ldr	r6, [pc, #184]	; (80018dc <_malloc_r+0xe4>)
 8001822:	f000 fc03 	bl	800202c <__malloc_lock>
 8001826:	6833      	ldr	r3, [r6, #0]
 8001828:	461c      	mov	r4, r3
 800182a:	bb34      	cbnz	r4, 800187a <_malloc_r+0x82>
 800182c:	4629      	mov	r1, r5
 800182e:	4638      	mov	r0, r7
 8001830:	f7ff ffc2 	bl	80017b8 <sbrk_aligned>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	4604      	mov	r4, r0
 8001838:	d14d      	bne.n	80018d6 <_malloc_r+0xde>
 800183a:	6834      	ldr	r4, [r6, #0]
 800183c:	4626      	mov	r6, r4
 800183e:	2e00      	cmp	r6, #0
 8001840:	d140      	bne.n	80018c4 <_malloc_r+0xcc>
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	4631      	mov	r1, r6
 8001846:	4638      	mov	r0, r7
 8001848:	eb04 0803 	add.w	r8, r4, r3
 800184c:	f000 fb36 	bl	8001ebc <_sbrk_r>
 8001850:	4580      	cmp	r8, r0
 8001852:	d13a      	bne.n	80018ca <_malloc_r+0xd2>
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	3503      	adds	r5, #3
 8001858:	1a6d      	subs	r5, r5, r1
 800185a:	f025 0503 	bic.w	r5, r5, #3
 800185e:	3508      	adds	r5, #8
 8001860:	2d0c      	cmp	r5, #12
 8001862:	bf38      	it	cc
 8001864:	250c      	movcc	r5, #12
 8001866:	4638      	mov	r0, r7
 8001868:	4629      	mov	r1, r5
 800186a:	f7ff ffa5 	bl	80017b8 <sbrk_aligned>
 800186e:	3001      	adds	r0, #1
 8001870:	d02b      	beq.n	80018ca <_malloc_r+0xd2>
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	442b      	add	r3, r5
 8001876:	6023      	str	r3, [r4, #0]
 8001878:	e00e      	b.n	8001898 <_malloc_r+0xa0>
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	1b52      	subs	r2, r2, r5
 800187e:	d41e      	bmi.n	80018be <_malloc_r+0xc6>
 8001880:	2a0b      	cmp	r2, #11
 8001882:	d916      	bls.n	80018b2 <_malloc_r+0xba>
 8001884:	1961      	adds	r1, r4, r5
 8001886:	42a3      	cmp	r3, r4
 8001888:	6025      	str	r5, [r4, #0]
 800188a:	bf18      	it	ne
 800188c:	6059      	strne	r1, [r3, #4]
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	bf08      	it	eq
 8001892:	6031      	streq	r1, [r6, #0]
 8001894:	5162      	str	r2, [r4, r5]
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	4638      	mov	r0, r7
 800189a:	f104 060b 	add.w	r6, r4, #11
 800189e:	f000 fbcb 	bl	8002038 <__malloc_unlock>
 80018a2:	f026 0607 	bic.w	r6, r6, #7
 80018a6:	1d23      	adds	r3, r4, #4
 80018a8:	1af2      	subs	r2, r6, r3
 80018aa:	d0b6      	beq.n	800181a <_malloc_r+0x22>
 80018ac:	1b9b      	subs	r3, r3, r6
 80018ae:	50a3      	str	r3, [r4, r2]
 80018b0:	e7b3      	b.n	800181a <_malloc_r+0x22>
 80018b2:	6862      	ldr	r2, [r4, #4]
 80018b4:	42a3      	cmp	r3, r4
 80018b6:	bf0c      	ite	eq
 80018b8:	6032      	streq	r2, [r6, #0]
 80018ba:	605a      	strne	r2, [r3, #4]
 80018bc:	e7ec      	b.n	8001898 <_malloc_r+0xa0>
 80018be:	4623      	mov	r3, r4
 80018c0:	6864      	ldr	r4, [r4, #4]
 80018c2:	e7b2      	b.n	800182a <_malloc_r+0x32>
 80018c4:	4634      	mov	r4, r6
 80018c6:	6876      	ldr	r6, [r6, #4]
 80018c8:	e7b9      	b.n	800183e <_malloc_r+0x46>
 80018ca:	230c      	movs	r3, #12
 80018cc:	4638      	mov	r0, r7
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	f000 fbb2 	bl	8002038 <__malloc_unlock>
 80018d4:	e7a1      	b.n	800181a <_malloc_r+0x22>
 80018d6:	6025      	str	r5, [r4, #0]
 80018d8:	e7de      	b.n	8001898 <_malloc_r+0xa0>
 80018da:	bf00      	nop
 80018dc:	20000090 	.word	0x20000090

080018e0 <__sfputc_r>:
 80018e0:	6893      	ldr	r3, [r2, #8]
 80018e2:	b410      	push	{r4}
 80018e4:	3b01      	subs	r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	6093      	str	r3, [r2, #8]
 80018ea:	da07      	bge.n	80018fc <__sfputc_r+0x1c>
 80018ec:	6994      	ldr	r4, [r2, #24]
 80018ee:	42a3      	cmp	r3, r4
 80018f0:	db01      	blt.n	80018f6 <__sfputc_r+0x16>
 80018f2:	290a      	cmp	r1, #10
 80018f4:	d102      	bne.n	80018fc <__sfputc_r+0x1c>
 80018f6:	bc10      	pop	{r4}
 80018f8:	f7ff bc3a 	b.w	8001170 <__swbuf_r>
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	1c58      	adds	r0, r3, #1
 8001900:	6010      	str	r0, [r2, #0]
 8001902:	7019      	strb	r1, [r3, #0]
 8001904:	4608      	mov	r0, r1
 8001906:	bc10      	pop	{r4}
 8001908:	4770      	bx	lr

0800190a <__sfputs_r>:
 800190a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190c:	4606      	mov	r6, r0
 800190e:	460f      	mov	r7, r1
 8001910:	4614      	mov	r4, r2
 8001912:	18d5      	adds	r5, r2, r3
 8001914:	42ac      	cmp	r4, r5
 8001916:	d101      	bne.n	800191c <__sfputs_r+0x12>
 8001918:	2000      	movs	r0, #0
 800191a:	e007      	b.n	800192c <__sfputs_r+0x22>
 800191c:	463a      	mov	r2, r7
 800191e:	4630      	mov	r0, r6
 8001920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001924:	f7ff ffdc 	bl	80018e0 <__sfputc_r>
 8001928:	1c43      	adds	r3, r0, #1
 800192a:	d1f3      	bne.n	8001914 <__sfputs_r+0xa>
 800192c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001930 <_vfiprintf_r>:
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001934:	460d      	mov	r5, r1
 8001936:	4614      	mov	r4, r2
 8001938:	4698      	mov	r8, r3
 800193a:	4606      	mov	r6, r0
 800193c:	b09d      	sub	sp, #116	; 0x74
 800193e:	b118      	cbz	r0, 8001948 <_vfiprintf_r+0x18>
 8001940:	6983      	ldr	r3, [r0, #24]
 8001942:	b90b      	cbnz	r3, 8001948 <_vfiprintf_r+0x18>
 8001944:	f7ff fdea 	bl	800151c <__sinit>
 8001948:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <_vfiprintf_r+0x240>)
 800194a:	429d      	cmp	r5, r3
 800194c:	d11b      	bne.n	8001986 <_vfiprintf_r+0x56>
 800194e:	6875      	ldr	r5, [r6, #4]
 8001950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001952:	07d9      	lsls	r1, r3, #31
 8001954:	d405      	bmi.n	8001962 <_vfiprintf_r+0x32>
 8001956:	89ab      	ldrh	r3, [r5, #12]
 8001958:	059a      	lsls	r2, r3, #22
 800195a:	d402      	bmi.n	8001962 <_vfiprintf_r+0x32>
 800195c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800195e:	f7ff fe7b 	bl	8001658 <__retarget_lock_acquire_recursive>
 8001962:	89ab      	ldrh	r3, [r5, #12]
 8001964:	071b      	lsls	r3, r3, #28
 8001966:	d501      	bpl.n	800196c <_vfiprintf_r+0x3c>
 8001968:	692b      	ldr	r3, [r5, #16]
 800196a:	b9eb      	cbnz	r3, 80019a8 <_vfiprintf_r+0x78>
 800196c:	4629      	mov	r1, r5
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff fc50 	bl	8001214 <__swsetup_r>
 8001974:	b1c0      	cbz	r0, 80019a8 <_vfiprintf_r+0x78>
 8001976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001978:	07dc      	lsls	r4, r3, #31
 800197a:	d50e      	bpl.n	800199a <_vfiprintf_r+0x6a>
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	b01d      	add	sp, #116	; 0x74
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <_vfiprintf_r+0x244>)
 8001988:	429d      	cmp	r5, r3
 800198a:	d101      	bne.n	8001990 <_vfiprintf_r+0x60>
 800198c:	68b5      	ldr	r5, [r6, #8]
 800198e:	e7df      	b.n	8001950 <_vfiprintf_r+0x20>
 8001990:	4b79      	ldr	r3, [pc, #484]	; (8001b78 <_vfiprintf_r+0x248>)
 8001992:	429d      	cmp	r5, r3
 8001994:	bf08      	it	eq
 8001996:	68f5      	ldreq	r5, [r6, #12]
 8001998:	e7da      	b.n	8001950 <_vfiprintf_r+0x20>
 800199a:	89ab      	ldrh	r3, [r5, #12]
 800199c:	0598      	lsls	r0, r3, #22
 800199e:	d4ed      	bmi.n	800197c <_vfiprintf_r+0x4c>
 80019a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019a2:	f7ff fe5a 	bl	800165a <__retarget_lock_release_recursive>
 80019a6:	e7e9      	b.n	800197c <_vfiprintf_r+0x4c>
 80019a8:	2300      	movs	r3, #0
 80019aa:	9309      	str	r3, [sp, #36]	; 0x24
 80019ac:	2320      	movs	r3, #32
 80019ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019b2:	2330      	movs	r3, #48	; 0x30
 80019b4:	f04f 0901 	mov.w	r9, #1
 80019b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80019bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001b7c <_vfiprintf_r+0x24c>
 80019c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019c4:	4623      	mov	r3, r4
 80019c6:	469a      	mov	sl, r3
 80019c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019cc:	b10a      	cbz	r2, 80019d2 <_vfiprintf_r+0xa2>
 80019ce:	2a25      	cmp	r2, #37	; 0x25
 80019d0:	d1f9      	bne.n	80019c6 <_vfiprintf_r+0x96>
 80019d2:	ebba 0b04 	subs.w	fp, sl, r4
 80019d6:	d00b      	beq.n	80019f0 <_vfiprintf_r+0xc0>
 80019d8:	465b      	mov	r3, fp
 80019da:	4622      	mov	r2, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	4630      	mov	r0, r6
 80019e0:	f7ff ff93 	bl	800190a <__sfputs_r>
 80019e4:	3001      	adds	r0, #1
 80019e6:	f000 80aa 	beq.w	8001b3e <_vfiprintf_r+0x20e>
 80019ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019ec:	445a      	add	r2, fp
 80019ee:	9209      	str	r2, [sp, #36]	; 0x24
 80019f0:	f89a 3000 	ldrb.w	r3, [sl]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a2 	beq.w	8001b3e <_vfiprintf_r+0x20e>
 80019fa:	2300      	movs	r3, #0
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a04:	f10a 0a01 	add.w	sl, sl, #1
 8001a08:	9304      	str	r3, [sp, #16]
 8001a0a:	9307      	str	r3, [sp, #28]
 8001a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a10:	931a      	str	r3, [sp, #104]	; 0x68
 8001a12:	4654      	mov	r4, sl
 8001a14:	2205      	movs	r2, #5
 8001a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a1a:	4858      	ldr	r0, [pc, #352]	; (8001b7c <_vfiprintf_r+0x24c>)
 8001a1c:	f000 faf8 	bl	8002010 <memchr>
 8001a20:	9a04      	ldr	r2, [sp, #16]
 8001a22:	b9d8      	cbnz	r0, 8001a5c <_vfiprintf_r+0x12c>
 8001a24:	06d1      	lsls	r1, r2, #27
 8001a26:	bf44      	itt	mi
 8001a28:	2320      	movmi	r3, #32
 8001a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a2e:	0713      	lsls	r3, r2, #28
 8001a30:	bf44      	itt	mi
 8001a32:	232b      	movmi	r3, #43	; 0x2b
 8001a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a38:	f89a 3000 	ldrb.w	r3, [sl]
 8001a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3e:	d015      	beq.n	8001a6c <_vfiprintf_r+0x13c>
 8001a40:	4654      	mov	r4, sl
 8001a42:	2000      	movs	r0, #0
 8001a44:	f04f 0c0a 	mov.w	ip, #10
 8001a48:	9a07      	ldr	r2, [sp, #28]
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d94e      	bls.n	8001af4 <_vfiprintf_r+0x1c4>
 8001a56:	b1b0      	cbz	r0, 8001a86 <_vfiprintf_r+0x156>
 8001a58:	9207      	str	r2, [sp, #28]
 8001a5a:	e014      	b.n	8001a86 <_vfiprintf_r+0x156>
 8001a5c:	eba0 0308 	sub.w	r3, r0, r8
 8001a60:	fa09 f303 	lsl.w	r3, r9, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	46a2      	mov	sl, r4
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	e7d2      	b.n	8001a12 <_vfiprintf_r+0xe2>
 8001a6c:	9b03      	ldr	r3, [sp, #12]
 8001a6e:	1d19      	adds	r1, r3, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	9103      	str	r1, [sp, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bfbb      	ittet	lt
 8001a78:	425b      	neglt	r3, r3
 8001a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a7e:	9307      	strge	r3, [sp, #28]
 8001a80:	9307      	strlt	r3, [sp, #28]
 8001a82:	bfb8      	it	lt
 8001a84:	9204      	strlt	r2, [sp, #16]
 8001a86:	7823      	ldrb	r3, [r4, #0]
 8001a88:	2b2e      	cmp	r3, #46	; 0x2e
 8001a8a:	d10c      	bne.n	8001aa6 <_vfiprintf_r+0x176>
 8001a8c:	7863      	ldrb	r3, [r4, #1]
 8001a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a90:	d135      	bne.n	8001afe <_vfiprintf_r+0x1ce>
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	3402      	adds	r4, #2
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	9203      	str	r2, [sp, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bfb8      	it	lt
 8001aa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8001aa4:	9305      	str	r3, [sp, #20]
 8001aa6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001b80 <_vfiprintf_r+0x250>
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4650      	mov	r0, sl
 8001aae:	7821      	ldrb	r1, [r4, #0]
 8001ab0:	f000 faae 	bl	8002010 <memchr>
 8001ab4:	b140      	cbz	r0, 8001ac8 <_vfiprintf_r+0x198>
 8001ab6:	2340      	movs	r3, #64	; 0x40
 8001ab8:	eba0 000a 	sub.w	r0, r0, sl
 8001abc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ac0:	9b04      	ldr	r3, [sp, #16]
 8001ac2:	3401      	adds	r4, #1
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	9304      	str	r3, [sp, #16]
 8001ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001acc:	2206      	movs	r2, #6
 8001ace:	482d      	ldr	r0, [pc, #180]	; (8001b84 <_vfiprintf_r+0x254>)
 8001ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ad4:	f000 fa9c 	bl	8002010 <memchr>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d03f      	beq.n	8001b5c <_vfiprintf_r+0x22c>
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <_vfiprintf_r+0x258>)
 8001ade:	bb1b      	cbnz	r3, 8001b28 <_vfiprintf_r+0x1f8>
 8001ae0:	9b03      	ldr	r3, [sp, #12]
 8001ae2:	3307      	adds	r3, #7
 8001ae4:	f023 0307 	bic.w	r3, r3, #7
 8001ae8:	3308      	adds	r3, #8
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aee:	443b      	add	r3, r7
 8001af0:	9309      	str	r3, [sp, #36]	; 0x24
 8001af2:	e767      	b.n	80019c4 <_vfiprintf_r+0x94>
 8001af4:	460c      	mov	r4, r1
 8001af6:	2001      	movs	r0, #1
 8001af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001afc:	e7a5      	b.n	8001a4a <_vfiprintf_r+0x11a>
 8001afe:	2300      	movs	r3, #0
 8001b00:	f04f 0c0a 	mov.w	ip, #10
 8001b04:	4619      	mov	r1, r3
 8001b06:	3401      	adds	r4, #1
 8001b08:	9305      	str	r3, [sp, #20]
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b10:	3a30      	subs	r2, #48	; 0x30
 8001b12:	2a09      	cmp	r2, #9
 8001b14:	d903      	bls.n	8001b1e <_vfiprintf_r+0x1ee>
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0c5      	beq.n	8001aa6 <_vfiprintf_r+0x176>
 8001b1a:	9105      	str	r1, [sp, #20]
 8001b1c:	e7c3      	b.n	8001aa6 <_vfiprintf_r+0x176>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	2301      	movs	r3, #1
 8001b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b26:	e7f0      	b.n	8001b0a <_vfiprintf_r+0x1da>
 8001b28:	ab03      	add	r3, sp, #12
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4630      	mov	r0, r6
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <_vfiprintf_r+0x25c>)
 8001b32:	a904      	add	r1, sp, #16
 8001b34:	f3af 8000 	nop.w
 8001b38:	4607      	mov	r7, r0
 8001b3a:	1c78      	adds	r0, r7, #1
 8001b3c:	d1d6      	bne.n	8001aec <_vfiprintf_r+0x1bc>
 8001b3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b40:	07d9      	lsls	r1, r3, #31
 8001b42:	d405      	bmi.n	8001b50 <_vfiprintf_r+0x220>
 8001b44:	89ab      	ldrh	r3, [r5, #12]
 8001b46:	059a      	lsls	r2, r3, #22
 8001b48:	d402      	bmi.n	8001b50 <_vfiprintf_r+0x220>
 8001b4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b4c:	f7ff fd85 	bl	800165a <__retarget_lock_release_recursive>
 8001b50:	89ab      	ldrh	r3, [r5, #12]
 8001b52:	065b      	lsls	r3, r3, #25
 8001b54:	f53f af12 	bmi.w	800197c <_vfiprintf_r+0x4c>
 8001b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b5a:	e711      	b.n	8001980 <_vfiprintf_r+0x50>
 8001b5c:	ab03      	add	r3, sp, #12
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	462a      	mov	r2, r5
 8001b62:	4630      	mov	r0, r6
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <_vfiprintf_r+0x25c>)
 8001b66:	a904      	add	r1, sp, #16
 8001b68:	f000 f882 	bl	8001c70 <_printf_i>
 8001b6c:	e7e4      	b.n	8001b38 <_vfiprintf_r+0x208>
 8001b6e:	bf00      	nop
 8001b70:	08002704 	.word	0x08002704
 8001b74:	08002724 	.word	0x08002724
 8001b78:	080026e4 	.word	0x080026e4
 8001b7c:	08002744 	.word	0x08002744
 8001b80:	0800274a 	.word	0x0800274a
 8001b84:	0800274e 	.word	0x0800274e
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	0800190b 	.word	0x0800190b

08001b90 <_printf_common>:
 8001b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b94:	4616      	mov	r6, r2
 8001b96:	4699      	mov	r9, r3
 8001b98:	688a      	ldr	r2, [r1, #8]
 8001b9a:	690b      	ldr	r3, [r1, #16]
 8001b9c:	4607      	mov	r7, r0
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	bfb8      	it	lt
 8001ba2:	4613      	movlt	r3, r2
 8001ba4:	6033      	str	r3, [r6, #0]
 8001ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001baa:	460c      	mov	r4, r1
 8001bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bb0:	b10a      	cbz	r2, 8001bb6 <_printf_common+0x26>
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	6033      	str	r3, [r6, #0]
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	0699      	lsls	r1, r3, #26
 8001bba:	bf42      	ittt	mi
 8001bbc:	6833      	ldrmi	r3, [r6, #0]
 8001bbe:	3302      	addmi	r3, #2
 8001bc0:	6033      	strmi	r3, [r6, #0]
 8001bc2:	6825      	ldr	r5, [r4, #0]
 8001bc4:	f015 0506 	ands.w	r5, r5, #6
 8001bc8:	d106      	bne.n	8001bd8 <_printf_common+0x48>
 8001bca:	f104 0a19 	add.w	sl, r4, #25
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	6832      	ldr	r2, [r6, #0]
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	42ab      	cmp	r3, r5
 8001bd6:	dc28      	bgt.n	8001c2a <_printf_common+0x9a>
 8001bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bdc:	1e13      	subs	r3, r2, #0
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	bf18      	it	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	0692      	lsls	r2, r2, #26
 8001be6:	d42d      	bmi.n	8001c44 <_printf_common+0xb4>
 8001be8:	4649      	mov	r1, r9
 8001bea:	4638      	mov	r0, r7
 8001bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf0:	47c0      	blx	r8
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d020      	beq.n	8001c38 <_printf_common+0xa8>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	68e5      	ldr	r5, [r4, #12]
 8001bfa:	f003 0306 	and.w	r3, r3, #6
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf18      	it	ne
 8001c02:	2500      	movne	r5, #0
 8001c04:	6832      	ldr	r2, [r6, #0]
 8001c06:	f04f 0600 	mov.w	r6, #0
 8001c0a:	68a3      	ldr	r3, [r4, #8]
 8001c0c:	bf08      	it	eq
 8001c0e:	1aad      	subeq	r5, r5, r2
 8001c10:	6922      	ldr	r2, [r4, #16]
 8001c12:	bf08      	it	eq
 8001c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	bfc4      	itt	gt
 8001c1c:	1a9b      	subgt	r3, r3, r2
 8001c1e:	18ed      	addgt	r5, r5, r3
 8001c20:	341a      	adds	r4, #26
 8001c22:	42b5      	cmp	r5, r6
 8001c24:	d11a      	bne.n	8001c5c <_printf_common+0xcc>
 8001c26:	2000      	movs	r0, #0
 8001c28:	e008      	b.n	8001c3c <_printf_common+0xac>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	4652      	mov	r2, sl
 8001c2e:	4649      	mov	r1, r9
 8001c30:	4638      	mov	r0, r7
 8001c32:	47c0      	blx	r8
 8001c34:	3001      	adds	r0, #1
 8001c36:	d103      	bne.n	8001c40 <_printf_common+0xb0>
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c40:	3501      	adds	r5, #1
 8001c42:	e7c4      	b.n	8001bce <_printf_common+0x3e>
 8001c44:	2030      	movs	r0, #48	; 0x30
 8001c46:	18e1      	adds	r1, r4, r3
 8001c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c52:	4422      	add	r2, r4
 8001c54:	3302      	adds	r3, #2
 8001c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c5a:	e7c5      	b.n	8001be8 <_printf_common+0x58>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4622      	mov	r2, r4
 8001c60:	4649      	mov	r1, r9
 8001c62:	4638      	mov	r0, r7
 8001c64:	47c0      	blx	r8
 8001c66:	3001      	adds	r0, #1
 8001c68:	d0e6      	beq.n	8001c38 <_printf_common+0xa8>
 8001c6a:	3601      	adds	r6, #1
 8001c6c:	e7d9      	b.n	8001c22 <_printf_common+0x92>
	...

08001c70 <_printf_i>:
 8001c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c74:	7e0f      	ldrb	r7, [r1, #24]
 8001c76:	4691      	mov	r9, r2
 8001c78:	2f78      	cmp	r7, #120	; 0x78
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	469a      	mov	sl, r3
 8001c80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001c86:	d807      	bhi.n	8001c98 <_printf_i+0x28>
 8001c88:	2f62      	cmp	r7, #98	; 0x62
 8001c8a:	d80a      	bhi.n	8001ca2 <_printf_i+0x32>
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	f000 80d9 	beq.w	8001e44 <_printf_i+0x1d4>
 8001c92:	2f58      	cmp	r7, #88	; 0x58
 8001c94:	f000 80a4 	beq.w	8001de0 <_printf_i+0x170>
 8001c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ca0:	e03a      	b.n	8001d18 <_printf_i+0xa8>
 8001ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ca6:	2b15      	cmp	r3, #21
 8001ca8:	d8f6      	bhi.n	8001c98 <_printf_i+0x28>
 8001caa:	a101      	add	r1, pc, #4	; (adr r1, 8001cb0 <_printf_i+0x40>)
 8001cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cb0:	08001d09 	.word	0x08001d09
 8001cb4:	08001d1d 	.word	0x08001d1d
 8001cb8:	08001c99 	.word	0x08001c99
 8001cbc:	08001c99 	.word	0x08001c99
 8001cc0:	08001c99 	.word	0x08001c99
 8001cc4:	08001c99 	.word	0x08001c99
 8001cc8:	08001d1d 	.word	0x08001d1d
 8001ccc:	08001c99 	.word	0x08001c99
 8001cd0:	08001c99 	.word	0x08001c99
 8001cd4:	08001c99 	.word	0x08001c99
 8001cd8:	08001c99 	.word	0x08001c99
 8001cdc:	08001e2b 	.word	0x08001e2b
 8001ce0:	08001d4d 	.word	0x08001d4d
 8001ce4:	08001e0d 	.word	0x08001e0d
 8001ce8:	08001c99 	.word	0x08001c99
 8001cec:	08001c99 	.word	0x08001c99
 8001cf0:	08001e4d 	.word	0x08001e4d
 8001cf4:	08001c99 	.word	0x08001c99
 8001cf8:	08001d4d 	.word	0x08001d4d
 8001cfc:	08001c99 	.word	0x08001c99
 8001d00:	08001c99 	.word	0x08001c99
 8001d04:	08001e15 	.word	0x08001e15
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	1d1a      	adds	r2, r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	602a      	str	r2, [r5, #0]
 8001d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0a4      	b.n	8001e66 <_printf_i+0x1f6>
 8001d1c:	6820      	ldr	r0, [r4, #0]
 8001d1e:	6829      	ldr	r1, [r5, #0]
 8001d20:	0606      	lsls	r6, r0, #24
 8001d22:	f101 0304 	add.w	r3, r1, #4
 8001d26:	d50a      	bpl.n	8001d3e <_printf_i+0xce>
 8001d28:	680e      	ldr	r6, [r1, #0]
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	2e00      	cmp	r6, #0
 8001d2e:	da03      	bge.n	8001d38 <_printf_i+0xc8>
 8001d30:	232d      	movs	r3, #45	; 0x2d
 8001d32:	4276      	negs	r6, r6
 8001d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d38:	230a      	movs	r3, #10
 8001d3a:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <_printf_i+0x244>)
 8001d3c:	e019      	b.n	8001d72 <_printf_i+0x102>
 8001d3e:	680e      	ldr	r6, [r1, #0]
 8001d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d44:	602b      	str	r3, [r5, #0]
 8001d46:	bf18      	it	ne
 8001d48:	b236      	sxthne	r6, r6
 8001d4a:	e7ef      	b.n	8001d2c <_printf_i+0xbc>
 8001d4c:	682b      	ldr	r3, [r5, #0]
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	1d19      	adds	r1, r3, #4
 8001d52:	6029      	str	r1, [r5, #0]
 8001d54:	0601      	lsls	r1, r0, #24
 8001d56:	d501      	bpl.n	8001d5c <_printf_i+0xec>
 8001d58:	681e      	ldr	r6, [r3, #0]
 8001d5a:	e002      	b.n	8001d62 <_printf_i+0xf2>
 8001d5c:	0646      	lsls	r6, r0, #25
 8001d5e:	d5fb      	bpl.n	8001d58 <_printf_i+0xe8>
 8001d60:	881e      	ldrh	r6, [r3, #0]
 8001d62:	2f6f      	cmp	r7, #111	; 0x6f
 8001d64:	bf0c      	ite	eq
 8001d66:	2308      	moveq	r3, #8
 8001d68:	230a      	movne	r3, #10
 8001d6a:	4852      	ldr	r0, [pc, #328]	; (8001eb4 <_printf_i+0x244>)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d72:	6865      	ldr	r5, [r4, #4]
 8001d74:	2d00      	cmp	r5, #0
 8001d76:	bfa8      	it	ge
 8001d78:	6821      	ldrge	r1, [r4, #0]
 8001d7a:	60a5      	str	r5, [r4, #8]
 8001d7c:	bfa4      	itt	ge
 8001d7e:	f021 0104 	bicge.w	r1, r1, #4
 8001d82:	6021      	strge	r1, [r4, #0]
 8001d84:	b90e      	cbnz	r6, 8001d8a <_printf_i+0x11a>
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	d04d      	beq.n	8001e26 <_printf_i+0x1b6>
 8001d8a:	4615      	mov	r5, r2
 8001d8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001d90:	fb03 6711 	mls	r7, r3, r1, r6
 8001d94:	5dc7      	ldrb	r7, [r0, r7]
 8001d96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001d9a:	4637      	mov	r7, r6
 8001d9c:	42bb      	cmp	r3, r7
 8001d9e:	460e      	mov	r6, r1
 8001da0:	d9f4      	bls.n	8001d8c <_printf_i+0x11c>
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d10b      	bne.n	8001dbe <_printf_i+0x14e>
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	07de      	lsls	r6, r3, #31
 8001daa:	d508      	bpl.n	8001dbe <_printf_i+0x14e>
 8001dac:	6923      	ldr	r3, [r4, #16]
 8001dae:	6861      	ldr	r1, [r4, #4]
 8001db0:	4299      	cmp	r1, r3
 8001db2:	bfde      	ittt	le
 8001db4:	2330      	movle	r3, #48	; 0x30
 8001db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dbe:	1b52      	subs	r2, r2, r5
 8001dc0:	6122      	str	r2, [r4, #16]
 8001dc2:	464b      	mov	r3, r9
 8001dc4:	4621      	mov	r1, r4
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	f8cd a000 	str.w	sl, [sp]
 8001dcc:	aa03      	add	r2, sp, #12
 8001dce:	f7ff fedf 	bl	8001b90 <_printf_common>
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d14c      	bne.n	8001e70 <_printf_i+0x200>
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dda:	b004      	add	sp, #16
 8001ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de0:	4834      	ldr	r0, [pc, #208]	; (8001eb4 <_printf_i+0x244>)
 8001de2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001de6:	6829      	ldr	r1, [r5, #0]
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f851 6b04 	ldr.w	r6, [r1], #4
 8001dee:	6029      	str	r1, [r5, #0]
 8001df0:	061d      	lsls	r5, r3, #24
 8001df2:	d514      	bpl.n	8001e1e <_printf_i+0x1ae>
 8001df4:	07df      	lsls	r7, r3, #31
 8001df6:	bf44      	itt	mi
 8001df8:	f043 0320 	orrmi.w	r3, r3, #32
 8001dfc:	6023      	strmi	r3, [r4, #0]
 8001dfe:	b91e      	cbnz	r6, 8001e08 <_printf_i+0x198>
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	f023 0320 	bic.w	r3, r3, #32
 8001e06:	6023      	str	r3, [r4, #0]
 8001e08:	2310      	movs	r3, #16
 8001e0a:	e7af      	b.n	8001d6c <_printf_i+0xfc>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	f043 0320 	orr.w	r3, r3, #32
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	2378      	movs	r3, #120	; 0x78
 8001e16:	4828      	ldr	r0, [pc, #160]	; (8001eb8 <_printf_i+0x248>)
 8001e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e1c:	e7e3      	b.n	8001de6 <_printf_i+0x176>
 8001e1e:	0659      	lsls	r1, r3, #25
 8001e20:	bf48      	it	mi
 8001e22:	b2b6      	uxthmi	r6, r6
 8001e24:	e7e6      	b.n	8001df4 <_printf_i+0x184>
 8001e26:	4615      	mov	r5, r2
 8001e28:	e7bb      	b.n	8001da2 <_printf_i+0x132>
 8001e2a:	682b      	ldr	r3, [r5, #0]
 8001e2c:	6826      	ldr	r6, [r4, #0]
 8001e2e:	1d18      	adds	r0, r3, #4
 8001e30:	6961      	ldr	r1, [r4, #20]
 8001e32:	6028      	str	r0, [r5, #0]
 8001e34:	0635      	lsls	r5, r6, #24
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	d501      	bpl.n	8001e3e <_printf_i+0x1ce>
 8001e3a:	6019      	str	r1, [r3, #0]
 8001e3c:	e002      	b.n	8001e44 <_printf_i+0x1d4>
 8001e3e:	0670      	lsls	r0, r6, #25
 8001e40:	d5fb      	bpl.n	8001e3a <_printf_i+0x1ca>
 8001e42:	8019      	strh	r1, [r3, #0]
 8001e44:	2300      	movs	r3, #0
 8001e46:	4615      	mov	r5, r2
 8001e48:	6123      	str	r3, [r4, #16]
 8001e4a:	e7ba      	b.n	8001dc2 <_printf_i+0x152>
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	1d1a      	adds	r2, r3, #4
 8001e52:	602a      	str	r2, [r5, #0]
 8001e54:	681d      	ldr	r5, [r3, #0]
 8001e56:	6862      	ldr	r2, [r4, #4]
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f000 f8d9 	bl	8002010 <memchr>
 8001e5e:	b108      	cbz	r0, 8001e64 <_printf_i+0x1f4>
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	6060      	str	r0, [r4, #4]
 8001e64:	6863      	ldr	r3, [r4, #4]
 8001e66:	6123      	str	r3, [r4, #16]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e6e:	e7a8      	b.n	8001dc2 <_printf_i+0x152>
 8001e70:	462a      	mov	r2, r5
 8001e72:	4649      	mov	r1, r9
 8001e74:	4640      	mov	r0, r8
 8001e76:	6923      	ldr	r3, [r4, #16]
 8001e78:	47d0      	blx	sl
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	d0ab      	beq.n	8001dd6 <_printf_i+0x166>
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	079b      	lsls	r3, r3, #30
 8001e82:	d413      	bmi.n	8001eac <_printf_i+0x23c>
 8001e84:	68e0      	ldr	r0, [r4, #12]
 8001e86:	9b03      	ldr	r3, [sp, #12]
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	bfb8      	it	lt
 8001e8c:	4618      	movlt	r0, r3
 8001e8e:	e7a4      	b.n	8001dda <_printf_i+0x16a>
 8001e90:	2301      	movs	r3, #1
 8001e92:	4632      	mov	r2, r6
 8001e94:	4649      	mov	r1, r9
 8001e96:	4640      	mov	r0, r8
 8001e98:	47d0      	blx	sl
 8001e9a:	3001      	adds	r0, #1
 8001e9c:	d09b      	beq.n	8001dd6 <_printf_i+0x166>
 8001e9e:	3501      	adds	r5, #1
 8001ea0:	68e3      	ldr	r3, [r4, #12]
 8001ea2:	9903      	ldr	r1, [sp, #12]
 8001ea4:	1a5b      	subs	r3, r3, r1
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	dcf2      	bgt.n	8001e90 <_printf_i+0x220>
 8001eaa:	e7eb      	b.n	8001e84 <_printf_i+0x214>
 8001eac:	2500      	movs	r5, #0
 8001eae:	f104 0619 	add.w	r6, r4, #25
 8001eb2:	e7f5      	b.n	8001ea0 <_printf_i+0x230>
 8001eb4:	08002755 	.word	0x08002755
 8001eb8:	08002766 	.word	0x08002766

08001ebc <_sbrk_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	4d05      	ldr	r5, [pc, #20]	; (8001ed8 <_sbrk_r+0x1c>)
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	602b      	str	r3, [r5, #0]
 8001ec8:	f000 f9c6 	bl	8002258 <_sbrk>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d102      	bne.n	8001ed6 <_sbrk_r+0x1a>
 8001ed0:	682b      	ldr	r3, [r5, #0]
 8001ed2:	b103      	cbz	r3, 8001ed6 <_sbrk_r+0x1a>
 8001ed4:	6023      	str	r3, [r4, #0]
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	20000098 	.word	0x20000098

08001edc <__sread>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	f000 f8ae 	bl	8002044 <_read_r>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	bfab      	itete	ge
 8001eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eee:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef0:	181b      	addge	r3, r3, r0
 8001ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ef6:	bfac      	ite	ge
 8001ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001efa:	81a3      	strhlt	r3, [r4, #12]
 8001efc:	bd10      	pop	{r4, pc}

08001efe <__swrite>:
 8001efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f02:	461f      	mov	r7, r3
 8001f04:	898b      	ldrh	r3, [r1, #12]
 8001f06:	4605      	mov	r5, r0
 8001f08:	05db      	lsls	r3, r3, #23
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4616      	mov	r6, r2
 8001f0e:	d505      	bpl.n	8001f1c <__swrite+0x1e>
 8001f10:	2302      	movs	r3, #2
 8001f12:	2200      	movs	r2, #0
 8001f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f18:	f000 f868 	bl	8001fec <_lseek_r>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	4632      	mov	r2, r6
 8001f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f24:	81a3      	strh	r3, [r4, #12]
 8001f26:	4628      	mov	r0, r5
 8001f28:	463b      	mov	r3, r7
 8001f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	f000 b817 	b.w	8001f64 <_write_r>

08001f36 <__sseek>:
 8001f36:	b510      	push	{r4, lr}
 8001f38:	460c      	mov	r4, r1
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 f855 	bl	8001fec <_lseek_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	bf15      	itete	ne
 8001f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f52:	81a3      	strheq	r3, [r4, #12]
 8001f54:	bf18      	it	ne
 8001f56:	81a3      	strhne	r3, [r4, #12]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__sclose>:
 8001f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5e:	f000 b813 	b.w	8001f88 <_close_r>
	...

08001f64 <_write_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4d05      	ldr	r5, [pc, #20]	; (8001f84 <_write_r+0x20>)
 8001f70:	602a      	str	r2, [r5, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f000 f91d 	bl	80021b2 <_write>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_write_r+0x1e>
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_write_r+0x1e>
 8001f80:	6023      	str	r3, [r4, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	20000098 	.word	0x20000098

08001f88 <_close_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	4d05      	ldr	r5, [pc, #20]	; (8001fa4 <_close_r+0x1c>)
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	602b      	str	r3, [r5, #0]
 8001f94:	f000 f93a 	bl	800220c <_close>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_close_r+0x1a>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_close_r+0x1a>
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	20000098 	.word	0x20000098

08001fa8 <_fstat_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	2300      	movs	r3, #0
 8001fac:	4d06      	ldr	r5, [pc, #24]	; (8001fc8 <_fstat_r+0x20>)
 8001fae:	4604      	mov	r4, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	f000 f994 	bl	80022e2 <_fstat>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	d102      	bne.n	8001fc4 <_fstat_r+0x1c>
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	b103      	cbz	r3, 8001fc4 <_fstat_r+0x1c>
 8001fc2:	6023      	str	r3, [r4, #0]
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000098 	.word	0x20000098

08001fcc <_isatty_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	2300      	movs	r3, #0
 8001fd0:	4d05      	ldr	r5, [pc, #20]	; (8001fe8 <_isatty_r+0x1c>)
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	602b      	str	r3, [r5, #0]
 8001fd8:	f000 faea 	bl	80025b0 <_isatty>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d102      	bne.n	8001fe6 <_isatty_r+0x1a>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	b103      	cbz	r3, 8001fe6 <_isatty_r+0x1a>
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
 8001fe8:	20000098 	.word	0x20000098

08001fec <_lseek_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4d05      	ldr	r5, [pc, #20]	; (800200c <_lseek_r+0x20>)
 8001ff8:	602a      	str	r2, [r5, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 f8c7 	bl	800218e <_lseek>
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	d102      	bne.n	800200a <_lseek_r+0x1e>
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	b103      	cbz	r3, 800200a <_lseek_r+0x1e>
 8002008:	6023      	str	r3, [r4, #0]
 800200a:	bd38      	pop	{r3, r4, r5, pc}
 800200c:	20000098 	.word	0x20000098

08002010 <memchr>:
 8002010:	4603      	mov	r3, r0
 8002012:	b510      	push	{r4, lr}
 8002014:	b2c9      	uxtb	r1, r1
 8002016:	4402      	add	r2, r0
 8002018:	4293      	cmp	r3, r2
 800201a:	4618      	mov	r0, r3
 800201c:	d101      	bne.n	8002022 <memchr+0x12>
 800201e:	2000      	movs	r0, #0
 8002020:	e003      	b.n	800202a <memchr+0x1a>
 8002022:	7804      	ldrb	r4, [r0, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	428c      	cmp	r4, r1
 8002028:	d1f6      	bne.n	8002018 <memchr+0x8>
 800202a:	bd10      	pop	{r4, pc}

0800202c <__malloc_lock>:
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <__malloc_lock+0x8>)
 800202e:	f7ff bb13 	b.w	8001658 <__retarget_lock_acquire_recursive>
 8002032:	bf00      	nop
 8002034:	2000008c 	.word	0x2000008c

08002038 <__malloc_unlock>:
 8002038:	4801      	ldr	r0, [pc, #4]	; (8002040 <__malloc_unlock+0x8>)
 800203a:	f7ff bb0e 	b.w	800165a <__retarget_lock_release_recursive>
 800203e:	bf00      	nop
 8002040:	2000008c 	.word	0x2000008c

08002044 <_read_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	2200      	movs	r2, #0
 800204e:	4d05      	ldr	r5, [pc, #20]	; (8002064 <_read_r+0x20>)
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f000 f845 	bl	80020e2 <_read>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_read_r+0x1e>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_read_r+0x1e>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	20000098 	.word	0x20000098

08002068 <findslot>:
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <findslot+0x2c>)
 800206a:	b510      	push	{r4, lr}
 800206c:	4604      	mov	r4, r0
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	b118      	cbz	r0, 800207a <findslot+0x12>
 8002072:	6983      	ldr	r3, [r0, #24]
 8002074:	b90b      	cbnz	r3, 800207a <findslot+0x12>
 8002076:	f7ff fa51 	bl	800151c <__sinit>
 800207a:	2c13      	cmp	r4, #19
 800207c:	d807      	bhi.n	800208e <findslot+0x26>
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <findslot+0x30>)
 8002080:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002084:	3201      	adds	r2, #1
 8002086:	d002      	beq.n	800208e <findslot+0x26>
 8002088:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800208c:	bd10      	pop	{r4, pc}
 800208e:	2000      	movs	r0, #0
 8002090:	e7fc      	b.n	800208c <findslot+0x24>
 8002092:	bf00      	nop
 8002094:	20000000 	.word	0x20000000
 8002098:	200000ac 	.word	0x200000ac

0800209c <error>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	4604      	mov	r4, r0
 80020a0:	f000 faa2 	bl	80025e8 <__errno>
 80020a4:	2613      	movs	r6, #19
 80020a6:	4605      	mov	r5, r0
 80020a8:	2700      	movs	r7, #0
 80020aa:	4630      	mov	r0, r6
 80020ac:	4639      	mov	r1, r7
 80020ae:	beab      	bkpt	0x00ab
 80020b0:	4606      	mov	r6, r0
 80020b2:	4620      	mov	r0, r4
 80020b4:	602e      	str	r6, [r5, #0]
 80020b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020b8 <checkerror>:
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d101      	bne.n	80020c0 <checkerror+0x8>
 80020bc:	f7ff bfee 	b.w	800209c <error>
 80020c0:	4770      	bx	lr

080020c2 <_swiread>:
 80020c2:	b530      	push	{r4, r5, lr}
 80020c4:	b085      	sub	sp, #20
 80020c6:	2406      	movs	r4, #6
 80020c8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80020cc:	9203      	str	r2, [sp, #12]
 80020ce:	ad01      	add	r5, sp, #4
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	beab      	bkpt	0x00ab
 80020d6:	4604      	mov	r4, r0
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff ffed 	bl	80020b8 <checkerror>
 80020de:	b005      	add	sp, #20
 80020e0:	bd30      	pop	{r4, r5, pc}

080020e2 <_read>:
 80020e2:	b570      	push	{r4, r5, r6, lr}
 80020e4:	460e      	mov	r6, r1
 80020e6:	4615      	mov	r5, r2
 80020e8:	f7ff ffbe 	bl	8002068 <findslot>
 80020ec:	4604      	mov	r4, r0
 80020ee:	b930      	cbnz	r0, 80020fe <_read+0x1c>
 80020f0:	f000 fa7a 	bl	80025e8 <__errno>
 80020f4:	2309      	movs	r3, #9
 80020f6:	6003      	str	r3, [r0, #0]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	462a      	mov	r2, r5
 8002100:	4631      	mov	r1, r6
 8002102:	6800      	ldr	r0, [r0, #0]
 8002104:	f7ff ffdd 	bl	80020c2 <_swiread>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	bf1f      	itttt	ne
 800210c:	6863      	ldrne	r3, [r4, #4]
 800210e:	1a28      	subne	r0, r5, r0
 8002110:	181b      	addne	r3, r3, r0
 8002112:	6063      	strne	r3, [r4, #4]
 8002114:	e7f2      	b.n	80020fc <_read+0x1a>

08002116 <_swilseek>:
 8002116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002118:	460c      	mov	r4, r1
 800211a:	4616      	mov	r6, r2
 800211c:	f7ff ffa4 	bl	8002068 <findslot>
 8002120:	4605      	mov	r5, r0
 8002122:	b940      	cbnz	r0, 8002136 <_swilseek+0x20>
 8002124:	f000 fa60 	bl	80025e8 <__errno>
 8002128:	2309      	movs	r3, #9
 800212a:	6003      	str	r3, [r0, #0]
 800212c:	f04f 34ff 	mov.w	r4, #4294967295
 8002130:	4620      	mov	r0, r4
 8002132:	b003      	add	sp, #12
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002136:	2e02      	cmp	r6, #2
 8002138:	d903      	bls.n	8002142 <_swilseek+0x2c>
 800213a:	f000 fa55 	bl	80025e8 <__errno>
 800213e:	2316      	movs	r3, #22
 8002140:	e7f3      	b.n	800212a <_swilseek+0x14>
 8002142:	2e01      	cmp	r6, #1
 8002144:	d112      	bne.n	800216c <_swilseek+0x56>
 8002146:	6843      	ldr	r3, [r0, #4]
 8002148:	18e4      	adds	r4, r4, r3
 800214a:	d4f6      	bmi.n	800213a <_swilseek+0x24>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	260a      	movs	r6, #10
 8002150:	466f      	mov	r7, sp
 8002152:	e9cd 3400 	strd	r3, r4, [sp]
 8002156:	4630      	mov	r0, r6
 8002158:	4639      	mov	r1, r7
 800215a:	beab      	bkpt	0x00ab
 800215c:	4606      	mov	r6, r0
 800215e:	4630      	mov	r0, r6
 8002160:	f7ff ffaa 	bl	80020b8 <checkerror>
 8002164:	2800      	cmp	r0, #0
 8002166:	dbe1      	blt.n	800212c <_swilseek+0x16>
 8002168:	606c      	str	r4, [r5, #4]
 800216a:	e7e1      	b.n	8002130 <_swilseek+0x1a>
 800216c:	2e02      	cmp	r6, #2
 800216e:	d1ed      	bne.n	800214c <_swilseek+0x36>
 8002170:	6803      	ldr	r3, [r0, #0]
 8002172:	260c      	movs	r6, #12
 8002174:	466f      	mov	r7, sp
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4630      	mov	r0, r6
 800217a:	4639      	mov	r1, r7
 800217c:	beab      	bkpt	0x00ab
 800217e:	4606      	mov	r6, r0
 8002180:	4630      	mov	r0, r6
 8002182:	f7ff ff99 	bl	80020b8 <checkerror>
 8002186:	1c43      	adds	r3, r0, #1
 8002188:	d0d0      	beq.n	800212c <_swilseek+0x16>
 800218a:	4404      	add	r4, r0
 800218c:	e7de      	b.n	800214c <_swilseek+0x36>

0800218e <_lseek>:
 800218e:	f7ff bfc2 	b.w	8002116 <_swilseek>

08002192 <_swiwrite>:
 8002192:	b530      	push	{r4, r5, lr}
 8002194:	b085      	sub	sp, #20
 8002196:	2405      	movs	r4, #5
 8002198:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800219c:	9203      	str	r2, [sp, #12]
 800219e:	ad01      	add	r5, sp, #4
 80021a0:	4620      	mov	r0, r4
 80021a2:	4629      	mov	r1, r5
 80021a4:	beab      	bkpt	0x00ab
 80021a6:	4604      	mov	r4, r0
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff ff85 	bl	80020b8 <checkerror>
 80021ae:	b005      	add	sp, #20
 80021b0:	bd30      	pop	{r4, r5, pc}

080021b2 <_write>:
 80021b2:	b570      	push	{r4, r5, r6, lr}
 80021b4:	460e      	mov	r6, r1
 80021b6:	4615      	mov	r5, r2
 80021b8:	f7ff ff56 	bl	8002068 <findslot>
 80021bc:	4604      	mov	r4, r0
 80021be:	b930      	cbnz	r0, 80021ce <_write+0x1c>
 80021c0:	f000 fa12 	bl	80025e8 <__errno>
 80021c4:	2309      	movs	r3, #9
 80021c6:	6003      	str	r3, [r0, #0]
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	462a      	mov	r2, r5
 80021d0:	4631      	mov	r1, r6
 80021d2:	6800      	ldr	r0, [r0, #0]
 80021d4:	f7ff ffdd 	bl	8002192 <_swiwrite>
 80021d8:	1e03      	subs	r3, r0, #0
 80021da:	dbf5      	blt.n	80021c8 <_write+0x16>
 80021dc:	6862      	ldr	r2, [r4, #4]
 80021de:	1ae8      	subs	r0, r5, r3
 80021e0:	4402      	add	r2, r0
 80021e2:	42ab      	cmp	r3, r5
 80021e4:	6062      	str	r2, [r4, #4]
 80021e6:	d1f1      	bne.n	80021cc <_write+0x1a>
 80021e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff bf55 	b.w	800209c <error>

080021f2 <_swiclose>:
 80021f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021f4:	2402      	movs	r4, #2
 80021f6:	9001      	str	r0, [sp, #4]
 80021f8:	ad01      	add	r5, sp, #4
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	beab      	bkpt	0x00ab
 8002200:	4604      	mov	r4, r0
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff ff58 	bl	80020b8 <checkerror>
 8002208:	b003      	add	sp, #12
 800220a:	bd30      	pop	{r4, r5, pc}

0800220c <_close>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4605      	mov	r5, r0
 8002210:	f7ff ff2a 	bl	8002068 <findslot>
 8002214:	4604      	mov	r4, r0
 8002216:	b930      	cbnz	r0, 8002226 <_close+0x1a>
 8002218:	f000 f9e6 	bl	80025e8 <__errno>
 800221c:	2309      	movs	r3, #9
 800221e:	6003      	str	r3, [r0, #0]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	bd38      	pop	{r3, r4, r5, pc}
 8002226:	3d01      	subs	r5, #1
 8002228:	2d01      	cmp	r5, #1
 800222a:	d809      	bhi.n	8002240 <_close+0x34>
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <_close+0x48>)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	429a      	cmp	r2, r3
 8002234:	d104      	bne.n	8002240 <_close+0x34>
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	6003      	str	r3, [r0, #0]
 800223c:	2000      	movs	r0, #0
 800223e:	e7f1      	b.n	8002224 <_close+0x18>
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	f7ff ffd6 	bl	80021f2 <_swiclose>
 8002246:	2800      	cmp	r0, #0
 8002248:	d1ec      	bne.n	8002224 <_close+0x18>
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	6023      	str	r3, [r4, #0]
 8002250:	e7e8      	b.n	8002224 <_close+0x18>
 8002252:	bf00      	nop
 8002254:	200000ac 	.word	0x200000ac

08002258 <_sbrk>:
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <_sbrk+0x38>)
 800225a:	4603      	mov	r3, r0
 800225c:	6811      	ldr	r1, [r2, #0]
 800225e:	b510      	push	{r4, lr}
 8002260:	b909      	cbnz	r1, 8002266 <_sbrk+0xe>
 8002262:	490c      	ldr	r1, [pc, #48]	; (8002294 <_sbrk+0x3c>)
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	4669      	mov	r1, sp
 8002268:	6810      	ldr	r0, [r2, #0]
 800226a:	4403      	add	r3, r0
 800226c:	428b      	cmp	r3, r1
 800226e:	d806      	bhi.n	800227e <_sbrk+0x26>
 8002270:	4909      	ldr	r1, [pc, #36]	; (8002298 <_sbrk+0x40>)
 8002272:	4c0a      	ldr	r4, [pc, #40]	; (800229c <_sbrk+0x44>)
 8002274:	6809      	ldr	r1, [r1, #0]
 8002276:	42a1      	cmp	r1, r4
 8002278:	d008      	beq.n	800228c <_sbrk+0x34>
 800227a:	428b      	cmp	r3, r1
 800227c:	d906      	bls.n	800228c <_sbrk+0x34>
 800227e:	f000 f9b3 	bl	80025e8 <__errno>
 8002282:	230c      	movs	r3, #12
 8002284:	6003      	str	r3, [r0, #0]
 8002286:	f04f 30ff 	mov.w	r0, #4294967295
 800228a:	bd10      	pop	{r4, pc}
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e7fc      	b.n	800228a <_sbrk+0x32>
 8002290:	2000009c 	.word	0x2000009c
 8002294:	20000150 	.word	0x20000150
 8002298:	20000064 	.word	0x20000064
 800229c:	cafedead 	.word	0xcafedead

080022a0 <_swistat>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	460c      	mov	r4, r1
 80022a4:	f7ff fee0 	bl	8002068 <findslot>
 80022a8:	4605      	mov	r5, r0
 80022aa:	b930      	cbnz	r0, 80022ba <_swistat+0x1a>
 80022ac:	f000 f99c 	bl	80025e8 <__errno>
 80022b0:	2309      	movs	r3, #9
 80022b2:	6003      	str	r3, [r0, #0]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	260c      	movs	r6, #12
 80022be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c2:	6063      	str	r3, [r4, #4]
 80022c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80022ca:	4630      	mov	r0, r6
 80022cc:	4629      	mov	r1, r5
 80022ce:	beab      	bkpt	0x00ab
 80022d0:	4605      	mov	r5, r0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff fef0 	bl	80020b8 <checkerror>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	bf1c      	itt	ne
 80022dc:	6120      	strne	r0, [r4, #16]
 80022de:	2000      	movne	r0, #0
 80022e0:	e7ea      	b.n	80022b8 <_swistat+0x18>

080022e2 <_fstat>:
 80022e2:	460b      	mov	r3, r1
 80022e4:	b510      	push	{r4, lr}
 80022e6:	2100      	movs	r1, #0
 80022e8:	4604      	mov	r4, r0
 80022ea:	2258      	movs	r2, #88	; 0x58
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fea9 	bl	8001044 <memset>
 80022f2:	4601      	mov	r1, r0
 80022f4:	4620      	mov	r0, r4
 80022f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022fa:	f7ff bfd1 	b.w	80022a0 <_swistat>

080022fe <_stat>:
 80022fe:	b538      	push	{r3, r4, r5, lr}
 8002300:	460d      	mov	r5, r1
 8002302:	4604      	mov	r4, r0
 8002304:	2258      	movs	r2, #88	; 0x58
 8002306:	2100      	movs	r1, #0
 8002308:	4628      	mov	r0, r5
 800230a:	f7fe fe9b 	bl	8001044 <memset>
 800230e:	4620      	mov	r0, r4
 8002310:	2100      	movs	r1, #0
 8002312:	f000 f811 	bl	8002338 <_swiopen>
 8002316:	1c43      	adds	r3, r0, #1
 8002318:	4604      	mov	r4, r0
 800231a:	d00b      	beq.n	8002334 <_stat+0x36>
 800231c:	686b      	ldr	r3, [r5, #4]
 800231e:	4629      	mov	r1, r5
 8002320:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002324:	606b      	str	r3, [r5, #4]
 8002326:	f7ff ffbb 	bl	80022a0 <_swistat>
 800232a:	4605      	mov	r5, r0
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff ff6d 	bl	800220c <_close>
 8002332:	462c      	mov	r4, r5
 8002334:	4620      	mov	r0, r4
 8002336:	bd38      	pop	{r3, r4, r5, pc}

08002338 <_swiopen>:
 8002338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800233c:	4607      	mov	r7, r0
 800233e:	460e      	mov	r6, r1
 8002340:	2500      	movs	r5, #0
 8002342:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80023e8 <_swiopen+0xb0>
 8002346:	b097      	sub	sp, #92	; 0x5c
 8002348:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800234c:	1c61      	adds	r1, r4, #1
 800234e:	d037      	beq.n	80023c0 <_swiopen+0x88>
 8002350:	3501      	adds	r5, #1
 8002352:	2d14      	cmp	r5, #20
 8002354:	d1f8      	bne.n	8002348 <_swiopen+0x10>
 8002356:	f000 f947 	bl	80025e8 <__errno>
 800235a:	2318      	movs	r3, #24
 800235c:	f04f 34ff 	mov.w	r4, #4294967295
 8002360:	6003      	str	r3, [r0, #0]
 8002362:	e03d      	b.n	80023e0 <_swiopen+0xa8>
 8002364:	f240 6301 	movw	r3, #1537	; 0x601
 8002368:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800236c:	07b2      	lsls	r2, r6, #30
 800236e:	bf48      	it	mi
 8002370:	f044 0402 	orrmi.w	r4, r4, #2
 8002374:	421e      	tst	r6, r3
 8002376:	bf18      	it	ne
 8002378:	f044 0404 	orrne.w	r4, r4, #4
 800237c:	0733      	lsls	r3, r6, #28
 800237e:	bf48      	it	mi
 8002380:	f024 0404 	bicmi.w	r4, r4, #4
 8002384:	4638      	mov	r0, r7
 8002386:	bf48      	it	mi
 8002388:	f044 0408 	orrmi.w	r4, r4, #8
 800238c:	9700      	str	r7, [sp, #0]
 800238e:	f7fd feef 	bl	8000170 <strlen>
 8002392:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002396:	2401      	movs	r4, #1
 8002398:	4620      	mov	r0, r4
 800239a:	4649      	mov	r1, r9
 800239c:	beab      	bkpt	0x00ab
 800239e:	4604      	mov	r4, r0
 80023a0:	2c00      	cmp	r4, #0
 80023a2:	db08      	blt.n	80023b6 <_swiopen+0x7e>
 80023a4:	2300      	movs	r3, #0
 80023a6:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80023aa:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80023ae:	462c      	mov	r4, r5
 80023b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80023b4:	e014      	b.n	80023e0 <_swiopen+0xa8>
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff fe70 	bl	800209c <error>
 80023bc:	4604      	mov	r4, r0
 80023be:	e00f      	b.n	80023e0 <_swiopen+0xa8>
 80023c0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80023c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80023c8:	46e9      	mov	r9, sp
 80023ca:	d1cb      	bne.n	8002364 <_swiopen+0x2c>
 80023cc:	4649      	mov	r1, r9
 80023ce:	4638      	mov	r0, r7
 80023d0:	f7ff ff95 	bl	80022fe <_stat>
 80023d4:	3001      	adds	r0, #1
 80023d6:	d0c5      	beq.n	8002364 <_swiopen+0x2c>
 80023d8:	f000 f906 	bl	80025e8 <__errno>
 80023dc:	2311      	movs	r3, #17
 80023de:	6003      	str	r3, [r0, #0]
 80023e0:	4620      	mov	r0, r4
 80023e2:	b017      	add	sp, #92	; 0x5c
 80023e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023e8:	200000ac 	.word	0x200000ac

080023ec <_get_semihosting_exts>:
 80023ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80023f0:	4606      	mov	r6, r0
 80023f2:	460f      	mov	r7, r1
 80023f4:	482a      	ldr	r0, [pc, #168]	; (80024a0 <_get_semihosting_exts+0xb4>)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4615      	mov	r5, r2
 80023fa:	f7ff ff9d 	bl	8002338 <_swiopen>
 80023fe:	4604      	mov	r4, r0
 8002400:	462a      	mov	r2, r5
 8002402:	2100      	movs	r1, #0
 8002404:	4630      	mov	r0, r6
 8002406:	f7fe fe1d 	bl	8001044 <memset>
 800240a:	1c63      	adds	r3, r4, #1
 800240c:	d016      	beq.n	800243c <_get_semihosting_exts+0x50>
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe2a 	bl	8002068 <findslot>
 8002414:	f04f 080c 	mov.w	r8, #12
 8002418:	4681      	mov	r9, r0
 800241a:	4640      	mov	r0, r8
 800241c:	4649      	mov	r1, r9
 800241e:	beab      	bkpt	0x00ab
 8002420:	4680      	mov	r8, r0
 8002422:	4640      	mov	r0, r8
 8002424:	f7ff fe48 	bl	80020b8 <checkerror>
 8002428:	2803      	cmp	r0, #3
 800242a:	dd02      	ble.n	8002432 <_get_semihosting_exts+0x46>
 800242c:	1ec3      	subs	r3, r0, #3
 800242e:	42ab      	cmp	r3, r5
 8002430:	dc08      	bgt.n	8002444 <_get_semihosting_exts+0x58>
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff feea 	bl	800220c <_close>
 8002438:	f04f 34ff 	mov.w	r4, #4294967295
 800243c:	4620      	mov	r0, r4
 800243e:	b003      	add	sp, #12
 8002440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002444:	2204      	movs	r2, #4
 8002446:	4620      	mov	r0, r4
 8002448:	eb0d 0102 	add.w	r1, sp, r2
 800244c:	f7ff fe49 	bl	80020e2 <_read>
 8002450:	2803      	cmp	r0, #3
 8002452:	ddee      	ble.n	8002432 <_get_semihosting_exts+0x46>
 8002454:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002458:	2b53      	cmp	r3, #83	; 0x53
 800245a:	d1ea      	bne.n	8002432 <_get_semihosting_exts+0x46>
 800245c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002460:	2b48      	cmp	r3, #72	; 0x48
 8002462:	d1e6      	bne.n	8002432 <_get_semihosting_exts+0x46>
 8002464:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002468:	2b46      	cmp	r3, #70	; 0x46
 800246a:	d1e2      	bne.n	8002432 <_get_semihosting_exts+0x46>
 800246c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002470:	2b42      	cmp	r3, #66	; 0x42
 8002472:	d1de      	bne.n	8002432 <_get_semihosting_exts+0x46>
 8002474:	2201      	movs	r2, #1
 8002476:	4639      	mov	r1, r7
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff fe4c 	bl	8002116 <_swilseek>
 800247e:	2800      	cmp	r0, #0
 8002480:	dbd7      	blt.n	8002432 <_get_semihosting_exts+0x46>
 8002482:	462a      	mov	r2, r5
 8002484:	4631      	mov	r1, r6
 8002486:	4620      	mov	r0, r4
 8002488:	f7ff fe2b 	bl	80020e2 <_read>
 800248c:	4605      	mov	r5, r0
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff febc 	bl	800220c <_close>
 8002494:	4628      	mov	r0, r5
 8002496:	f7ff fe0f 	bl	80020b8 <checkerror>
 800249a:	4604      	mov	r4, r0
 800249c:	e7ce      	b.n	800243c <_get_semihosting_exts+0x50>
 800249e:	bf00      	nop
 80024a0:	08002777 	.word	0x08002777

080024a4 <initialise_semihosting_exts>:
 80024a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024a6:	2100      	movs	r1, #0
 80024a8:	2201      	movs	r2, #1
 80024aa:	4d09      	ldr	r5, [pc, #36]	; (80024d0 <initialise_semihosting_exts+0x2c>)
 80024ac:	4c09      	ldr	r4, [pc, #36]	; (80024d4 <initialise_semihosting_exts+0x30>)
 80024ae:	a801      	add	r0, sp, #4
 80024b0:	6029      	str	r1, [r5, #0]
 80024b2:	6022      	str	r2, [r4, #0]
 80024b4:	f7ff ff9a 	bl	80023ec <_get_semihosting_exts>
 80024b8:	2800      	cmp	r0, #0
 80024ba:	dd07      	ble.n	80024cc <initialise_semihosting_exts+0x28>
 80024bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024c0:	f003 0201 	and.w	r2, r3, #1
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	602a      	str	r2, [r5, #0]
 80024ca:	6023      	str	r3, [r4, #0]
 80024cc:	b003      	add	sp, #12
 80024ce:	bd30      	pop	{r4, r5, pc}
 80024d0:	20000068 	.word	0x20000068
 80024d4:	2000006c 	.word	0x2000006c

080024d8 <_has_ext_stdout_stderr>:
 80024d8:	b510      	push	{r4, lr}
 80024da:	4c04      	ldr	r4, [pc, #16]	; (80024ec <_has_ext_stdout_stderr+0x14>)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da01      	bge.n	80024e6 <_has_ext_stdout_stderr+0xe>
 80024e2:	f7ff ffdf 	bl	80024a4 <initialise_semihosting_exts>
 80024e6:	6820      	ldr	r0, [r4, #0]
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	bf00      	nop
 80024ec:	2000006c 	.word	0x2000006c

080024f0 <initialise_monitor_handles>:
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	2303      	movs	r3, #3
 80024f6:	2400      	movs	r4, #0
 80024f8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800259c <initialise_monitor_handles+0xac>
 80024fc:	b085      	sub	sp, #20
 80024fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002502:	af01      	add	r7, sp, #4
 8002504:	9303      	str	r3, [sp, #12]
 8002506:	2501      	movs	r5, #1
 8002508:	9402      	str	r4, [sp, #8]
 800250a:	4628      	mov	r0, r5
 800250c:	4639      	mov	r1, r7
 800250e:	beab      	bkpt	0x00ab
 8002510:	4605      	mov	r5, r0
 8002512:	f04f 32ff 	mov.w	r2, #4294967295
 8002516:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80025a0 <initialise_monitor_handles+0xb0>
 800251a:	4623      	mov	r3, r4
 800251c:	4c21      	ldr	r4, [pc, #132]	; (80025a4 <initialise_monitor_handles+0xb4>)
 800251e:	f8c8 5000 	str.w	r5, [r8]
 8002522:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002526:	3301      	adds	r3, #1
 8002528:	2b14      	cmp	r3, #20
 800252a:	d1fa      	bne.n	8002522 <initialise_monitor_handles+0x32>
 800252c:	f7ff ffd4 	bl	80024d8 <_has_ext_stdout_stderr>
 8002530:	4d1d      	ldr	r5, [pc, #116]	; (80025a8 <initialise_monitor_handles+0xb8>)
 8002532:	b1d0      	cbz	r0, 800256a <initialise_monitor_handles+0x7a>
 8002534:	f04f 0a03 	mov.w	sl, #3
 8002538:	2304      	movs	r3, #4
 800253a:	f8cd 9004 	str.w	r9, [sp, #4]
 800253e:	2601      	movs	r6, #1
 8002540:	f8cd a00c 	str.w	sl, [sp, #12]
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	4630      	mov	r0, r6
 8002548:	4639      	mov	r1, r7
 800254a:	beab      	bkpt	0x00ab
 800254c:	4683      	mov	fp, r0
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <initialise_monitor_handles+0xbc>)
 8002550:	f8cd 9004 	str.w	r9, [sp, #4]
 8002554:	f8c3 b000 	str.w	fp, [r3]
 8002558:	2308      	movs	r3, #8
 800255a:	f8cd a00c 	str.w	sl, [sp, #12]
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	4630      	mov	r0, r6
 8002562:	4639      	mov	r1, r7
 8002564:	beab      	bkpt	0x00ab
 8002566:	4606      	mov	r6, r0
 8002568:	602e      	str	r6, [r5, #0]
 800256a:	2600      	movs	r6, #0
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	6066      	str	r6, [r4, #4]
 8002570:	3301      	adds	r3, #1
 8002572:	bf02      	ittt	eq
 8002574:	4b0d      	ldreq	r3, [pc, #52]	; (80025ac <initialise_monitor_handles+0xbc>)
 8002576:	681b      	ldreq	r3, [r3, #0]
 8002578:	602b      	streq	r3, [r5, #0]
 800257a:	f8d8 3000 	ldr.w	r3, [r8]
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	f7ff ffaa 	bl	80024d8 <_has_ext_stdout_stderr>
 8002584:	b130      	cbz	r0, 8002594 <initialise_monitor_handles+0xa4>
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <initialise_monitor_handles+0xbc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002594:	b005      	add	sp, #20
 8002596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800259a:	bf00      	nop
 800259c:	0800278d 	.word	0x0800278d
 80025a0:	200000a4 	.word	0x200000a4
 80025a4:	200000ac 	.word	0x200000ac
 80025a8:	200000a0 	.word	0x200000a0
 80025ac:	200000a8 	.word	0x200000a8

080025b0 <_isatty>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	f7ff fd59 	bl	8002068 <findslot>
 80025b6:	2509      	movs	r5, #9
 80025b8:	4604      	mov	r4, r0
 80025ba:	b920      	cbnz	r0, 80025c6 <_isatty+0x16>
 80025bc:	f000 f814 	bl	80025e8 <__errno>
 80025c0:	6005      	str	r5, [r0, #0]
 80025c2:	4620      	mov	r0, r4
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	4628      	mov	r0, r5
 80025c8:	4621      	mov	r1, r4
 80025ca:	beab      	bkpt	0x00ab
 80025cc:	4604      	mov	r4, r0
 80025ce:	2c01      	cmp	r4, #1
 80025d0:	d0f7      	beq.n	80025c2 <_isatty+0x12>
 80025d2:	f000 f809 	bl	80025e8 <__errno>
 80025d6:	2400      	movs	r4, #0
 80025d8:	4605      	mov	r5, r0
 80025da:	2613      	movs	r6, #19
 80025dc:	4630      	mov	r0, r6
 80025de:	4621      	mov	r1, r4
 80025e0:	beab      	bkpt	0x00ab
 80025e2:	4606      	mov	r6, r0
 80025e4:	602e      	str	r6, [r5, #0]
 80025e6:	e7ec      	b.n	80025c2 <_isatty+0x12>

080025e8 <__errno>:
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <__errno+0x8>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <_init>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr

08002600 <_fini>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	bf00      	nop
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr
