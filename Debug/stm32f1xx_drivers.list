
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002500  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f4  080026f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  0800276c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800276c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000140a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004fe  00000000  00000000  000214a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  000219a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00021b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b13  00000000  00000000  00021cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d50  00000000  00000000  000247e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a8d1  00000000  00000000  00026533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001208  00000000  00000000  00030e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08002618 	.word	0x08002618

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08002618 	.word	0x08002618

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI2_GPIOInits>:
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000186:	4b11      	ldr	r3, [pc, #68]	; (80001cc <SPI2_GPIOInits+0x4c>)
 8000188:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 800018a:	2302      	movs	r3, #2
 800018c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 800018e:	2303      	movs	r3, #3
 8000190:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000192:	230d      	movs	r3, #13
 8000194:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f9ed 	bl	8000578 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800019e:	230f      	movs	r3, #15
 80001a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 f9e7 	bl	8000578 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80001aa:	230e      	movs	r3, #14
 80001ac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f9e1 	bl	8000578 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001b6:	230c      	movs	r3, #12
 80001b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 f9db 	bl	8000578 <GPIO_Init>
}
 80001c2:	bf00      	nop
 80001c4:	3710      	adds	r7, #16
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <SPI2_Inits>:

void SPI2_Inits(void){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0


	SPI2handle.pSPIx = SPI2;
 80001d4:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <SPI2_Inits+0x40>)
 80001d6:	4a0f      	ldr	r2, [pc, #60]	; (8000214 <SPI2_Inits+0x44>)
 80001d8:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80001da:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <SPI2_Inits+0x40>)
 80001dc:	2201      	movs	r2, #1
 80001de:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <SPI2_Inits+0x40>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; // generates SLCK of 8 MHz
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <SPI2_Inits+0x40>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <SPI2_Inits+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80001f2:	4b07      	ldr	r3, [pc, #28]	; (8000210 <SPI2_Inits+0x40>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <SPI2_Inits+0x40>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave managment enabled for NSS pin
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <SPI2_Inits+0x40>)
 8000200:	2200      	movs	r2, #0
 8000202:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000204:	4802      	ldr	r0, [pc, #8]	; (8000210 <SPI2_Inits+0x40>)
 8000206:	f000 fcd1 	bl	8000bac <SPI_Init>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	2000008c 	.word	0x2000008c
 8000214:	40003800 	.word	0x40003800

08000218 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	220c      	movs	r2, #12
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f000 ff95 	bl	8001154 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOB;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <Slave_GPIO_InterruptPinInit+0x4c>)
 800022c:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800022e:	2309      	movs	r3, #9
 8000230:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000232:	2304      	movs	r3, #4
 8000234:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 8000236:	2300      	movs	r3, #0
 8000238:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinOPType = NO_CONFIG;
 800023a:	2307      	movs	r3, #7
 800023c:	733b      	strb	r3, [r7, #12]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800023e:	2301      	movs	r3, #1
 8000240:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f997 	bl	8000578 <GPIO_Init>

	// IRQ Configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 800024a:	210f      	movs	r1, #15
 800024c:	2017      	movs	r0, #23
 800024e:	f000 fc07 	bl	8000a60 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	2017      	movs	r0, #23
 8000256:	f000 fb81 	bl	800095c <GPIO_IRQInterruptConfig>

}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010c00 	.word	0x40010c00

08000268 <main>:


int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 800026e:	f002 f951 	bl	8002514 <initialise_monitor_handles>
	//printf("Hello STM32\n");
	uint8_t dummy = 0xff;
 8000272:	23ff      	movs	r3, #255	; 0xff
 8000274:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 8000276:	f7ff ffcf 	bl	8000218 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800027a:	f7ff ff81 	bl	8000180 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 800027e:	f7ff ffa7 	bl	80001d0 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000282:	2101      	movs	r1, #1
 8000284:	481f      	ldr	r0, [pc, #124]	; (8000304 <main+0x9c>)
 8000286:	f000 fe35 	bl	8000ef4 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	2024      	movs	r0, #36	; 0x24
 800028e:	f000 fd47 	bl	8000d20 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <main+0xa0>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8000298:	bf00      	nop
 800029a:	4b1c      	ldr	r3, [pc, #112]	; (800030c <main+0xa4>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0fa      	beq.n	800029a <main+0x32>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80002a4:	2100      	movs	r1, #0
 80002a6:	2017      	movs	r0, #23
 80002a8:	f000 fb58 	bl	800095c <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	4815      	ldr	r0, [pc, #84]	; (8000304 <main+0x9c>)
 80002b0:	f000 fe05 	bl	8000ebe <SPI_PeripheralControl>


		while(!rcvStop)
 80002b4:	e009      	b.n	80002ca <main+0x62>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle, &dummy, 1) == SPI_BUSY_IN_TX);
 80002b6:	bf00      	nop
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	2201      	movs	r2, #1
 80002bc:	4619      	mov	r1, r3
 80002be:	4814      	ldr	r0, [pc, #80]	; (8000310 <main+0xa8>)
 80002c0:	f000 fe33 	bl	8000f2a <SPI_SendDataIT>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d0f6      	beq.n	80002b8 <main+0x50>
		while(!rcvStop)
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <main+0xa0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f0      	beq.n	80002b6 <main+0x4e>
			//while ( SPI_ReceiveDataIT(&SPI2handle, &ReadByte, 1) == SPI_BUSY_IN_RX ); // this line is required but in the meantime it will be commented to avoid warnings
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80002d4:	bf00      	nop
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	480a      	ldr	r0, [pc, #40]	; (8000304 <main+0x9c>)
 80002da:	f000 fd0e 	bl	8000cfa <SPI_GetFlagStatus>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f8      	bne.n	80002d6 <main+0x6e>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80002e4:	2100      	movs	r1, #0
 80002e6:	4807      	ldr	r0, [pc, #28]	; (8000304 <main+0x9c>)
 80002e8:	f000 fde9 	bl	8000ebe <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <main+0xac>)
 80002ee:	480a      	ldr	r0, [pc, #40]	; (8000318 <main+0xb0>)
 80002f0:	f000 ff38 	bl	8001164 <iprintf>

		dataAvailable = 0;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <main+0xa4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2017      	movs	r0, #23
 80002fe:	f000 fb2d 	bl	800095c <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000302:	e7c6      	b.n	8000292 <main+0x2a>
 8000304:	40003800 	.word	0x40003800
 8000308:	200002a1 	.word	0x200002a1
 800030c:	200002a2 	.word	0x200002a2
 8000310:	2000008c 	.word	0x2000008c
 8000314:	200000ac 	.word	0x200000ac
 8000318:	08002630 	.word	0x08002630

0800031c <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <SPI2_IRQHandler+0x10>)
 8000322:	f000 fd7f 	bl	8000e24 <SPI_IRQHandling>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000008c 	.word	0x2000008c

08000330 <SPI_ApplicationEventCallBack>:



void SPI_ApplicationEventCallBack(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d11f      	bne.n	8000382 <SPI_ApplicationEventCallBack+0x52>
	{
				RcvBuff[i++] = ReadByte;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <SPI_ApplicationEventCallBack+0x5c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	1c5a      	adds	r2, r3, #1
 8000348:	4910      	ldr	r1, [pc, #64]	; (800038c <SPI_ApplicationEventCallBack+0x5c>)
 800034a:	600a      	str	r2, [r1, #0]
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <SPI_ApplicationEventCallBack+0x60>)
 800034e:	7812      	ldrb	r2, [r2, #0]
 8000350:	b2d1      	uxtb	r1, r2
 8000352:	4a10      	ldr	r2, [pc, #64]	; (8000394 <SPI_ApplicationEventCallBack+0x64>)
 8000354:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <SPI_ApplicationEventCallBack+0x60>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	d004      	beq.n	800036a <SPI_ApplicationEventCallBack+0x3a>
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <SPI_ApplicationEventCallBack+0x5c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000368:	d10b      	bne.n	8000382 <SPI_ApplicationEventCallBack+0x52>
					rcvStop = 1;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SPI_ApplicationEventCallBack+0x68>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <SPI_ApplicationEventCallBack+0x5c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	4a07      	ldr	r2, [pc, #28]	; (8000394 <SPI_ApplicationEventCallBack+0x64>)
 8000378:	2100      	movs	r1, #0
 800037a:	54d1      	strb	r1, [r2, r3]
					i = 0;
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <SPI_ApplicationEventCallBack+0x5c>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
				}
	}

}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	200002a4 	.word	0x200002a4
 8000390:	200002a0 	.word	0x200002a0
 8000394:	200000ac 	.word	0x200000ac
 8000398:	200002a1 	.word	0x200002a1

0800039c <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_9);
 80003a0:	2009      	movs	r0, #9
 80003a2:	f000 fb8b 	bl	8000abc <GPIO_IRQHandling>
	dataAvailable = 1;
 80003a6:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <EXTI9_5_IRQHandler+0x14>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200002a2 	.word	0x200002a2

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 fe93 	bl	800110c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff3f 	bl	8000268 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80003f8:	080026fc 	.word	0x080026fc
  ldr r2, =_sbss
 80003fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000400:	20000368 	.word	0x20000368

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2b01      	cmp	r3, #1
 8000418:	f040 8099 	bne.w	800054e <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a4e      	ldr	r2, [pc, #312]	; (8000558 <GPIO_PeriClockControl+0x150>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000424:	4b4d      	ldr	r3, [pc, #308]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a4c      	ldr	r2, [pc, #304]	; (800055c <GPIO_PeriClockControl+0x154>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000430:	e08d      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a4a      	ldr	r2, [pc, #296]	; (8000560 <GPIO_PeriClockControl+0x158>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 800043a:	4b48      	ldr	r3, [pc, #288]	; (800055c <GPIO_PeriClockControl+0x154>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a47      	ldr	r2, [pc, #284]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6193      	str	r3, [r2, #24]
}
 8000446:	e082      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a46      	ldr	r2, [pc, #280]	; (8000564 <GPIO_PeriClockControl+0x15c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000450:	4b42      	ldr	r3, [pc, #264]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a41      	ldr	r2, [pc, #260]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
}
 800045c:	e077      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a41      	ldr	r2, [pc, #260]	; (8000568 <GPIO_PeriClockControl+0x160>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 8000466:	4b3d      	ldr	r3, [pc, #244]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a3c      	ldr	r2, [pc, #240]	; (800055c <GPIO_PeriClockControl+0x154>)
 800046c:	f043 0320 	orr.w	r3, r3, #32
 8000470:	6193      	str	r3, [r2, #24]
}
 8000472:	e06c      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a3d      	ldr	r2, [pc, #244]	; (800056c <GPIO_PeriClockControl+0x164>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 800047c:	4b37      	ldr	r3, [pc, #220]	; (800055c <GPIO_PeriClockControl+0x154>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a36      	ldr	r2, [pc, #216]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000486:	6193      	str	r3, [r2, #24]
}
 8000488:	e061      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a38      	ldr	r2, [pc, #224]	; (8000570 <GPIO_PeriClockControl+0x168>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 8000492:	4b32      	ldr	r3, [pc, #200]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a31      	ldr	r2, [pc, #196]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049c:	6193      	str	r3, [r2, #24]
}
 800049e:	e056      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a34      	ldr	r2, [pc, #208]	; (8000574 <GPIO_PeriClockControl+0x16c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80004a8:	4b2c      	ldr	r3, [pc, #176]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a2b      	ldr	r2, [pc, #172]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b2:	6193      	str	r3, [r2, #24]
}
 80004b4:	e04b      	b.n	800054e <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a27      	ldr	r2, [pc, #156]	; (8000558 <GPIO_PeriClockControl+0x150>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a26      	ldr	r2, [pc, #152]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004c4:	f023 0304 	bic.w	r3, r3, #4
 80004c8:	6193      	str	r3, [r2, #24]
}
 80004ca:	e040      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a24      	ldr	r2, [pc, #144]	; (8000560 <GPIO_PeriClockControl+0x158>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a20      	ldr	r2, [pc, #128]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004da:	f023 0308 	bic.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
}
 80004e0:	e035      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_PeriClockControl+0x15c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <GPIO_PeriClockControl+0x154>)
 80004f0:	f023 0310 	bic.w	r3, r3, #16
 80004f4:	6193      	str	r3, [r2, #24]
}
 80004f6:	e02a      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <GPIO_PeriClockControl+0x160>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d106      	bne.n	800050e <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000506:	f023 0320 	bic.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
}
 800050c:	e01f      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <GPIO_PeriClockControl+0x164>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <GPIO_PeriClockControl+0x154>)
 800051c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000520:	6193      	str	r3, [r2, #24]
}
 8000522:	e014      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_PeriClockControl+0x168>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <GPIO_PeriClockControl+0x154>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000536:	6193      	str	r3, [r2, #24]
}
 8000538:	e009      	b.n	800054e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <GPIO_PeriClockControl+0x16c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d105      	bne.n	800054e <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <GPIO_PeriClockControl+0x154>)
 8000548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800054c:	6193      	str	r3, [r2, #24]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40010800 	.word	0x40010800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00
 8000564:	40011000 	.word	0x40011000
 8000568:	40011400 	.word	0x40011400
 800056c:	40011800 	.word	0x40011800
 8000570:	40011c00 	.word	0x40011c00
 8000574:	40012000 	.word	0x40012000

08000578 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2101      	movs	r1, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ff3c 	bl	8000408 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d820      	bhi.n	80005da <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	799b      	ldrb	r3, [r3, #6]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	e020      	b.n	800061c <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	799b      	ldrb	r3, [r3, #6]
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	3b08      	subs	r3, #8
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	2103      	movs	r1, #3
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	43db      	mvns	r3, r3
 8000602:	4619      	mov	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	400a      	ands	r2, r1
 800060a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6859      	ldr	r1, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	430a      	orrs	r2, r1
 800061a:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d84b      	bhi.n	80006c0 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	2b07      	cmp	r3, #7
 800062e:	d822      	bhi.n	8000676 <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	795b      	ldrb	r3, [r3, #5]
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	3302      	adds	r3, #2
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	3302      	adds	r3, #2
 8000652:	2103      	movs	r1, #3
 8000654:	fa01 f303 	lsl.w	r3, r1, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	400a      	ands	r2, r1
 8000662:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6819      	ldr	r1, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	430a      	orrs	r2, r1
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e114      	b.n	80008a0 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	461a      	mov	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	3b08      	subs	r3, #8
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	3302      	adds	r3, #2
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	3b08      	subs	r3, #8
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	3302      	adds	r3, #2
 800069c:	2103      	movs	r1, #3
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4619      	mov	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	400a      	ands	r2, r1
 80006ac:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6859      	ldr	r1, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	e0ef      	b.n	80008a0 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	2b04      	cmp	r3, #4
 80006c6:	d85e      	bhi.n	8000786 <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d820      	bhi.n	8000712 <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	3302      	adds	r3, #2
 80006d8:	2202      	movs	r2, #2
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	3302      	adds	r3, #2
 80006ee:	2103      	movs	r1, #3
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	430a      	orrs	r2, r1
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e021      	b.n	8000756 <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	3b08      	subs	r3, #8
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	3302      	adds	r3, #2
 800071c:	2202      	movs	r2, #2
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	3b08      	subs	r3, #8
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	3302      	adds	r3, #2
 8000734:	2103      	movs	r1, #3
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	400a      	ands	r2, r1
 8000744:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6859      	ldr	r1, [r3, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	430a      	orrs	r2, r1
 8000754:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4b77      	ldr	r3, [pc, #476]	; (8000934 <GPIO_Init+0x3bc>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	7912      	ldrb	r2, [r2, #4]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	4611      	mov	r1, r2
 8000766:	4a73      	ldr	r2, [pc, #460]	; (8000934 <GPIO_Init+0x3bc>)
 8000768:	430b      	orrs	r3, r1
 800076a:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076c:	4b71      	ldr	r3, [pc, #452]	; (8000934 <GPIO_Init+0x3bc>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	43d2      	mvns	r2, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a6d      	ldr	r2, [pc, #436]	; (8000934 <GPIO_Init+0x3bc>)
 8000780:	400b      	ands	r3, r1
 8000782:	6093      	str	r3, [r2, #8]
 8000784:	e035      	b.n	80007f2 <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	795b      	ldrb	r3, [r3, #5]
 800078a:	2b05      	cmp	r3, #5
 800078c:	d817      	bhi.n	80007be <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b69      	ldr	r3, [pc, #420]	; (8000934 <GPIO_Init+0x3bc>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	4611      	mov	r1, r2
 800079e:	4a65      	ldr	r2, [pc, #404]	; (8000934 <GPIO_Init+0x3bc>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b63      	ldr	r3, [pc, #396]	; (8000934 <GPIO_Init+0x3bc>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	43d2      	mvns	r2, r2
 80007b4:	4611      	mov	r1, r2
 80007b6:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <GPIO_Init+0x3bc>)
 80007b8:	400b      	ands	r3, r1
 80007ba:	60d3      	str	r3, [r2, #12]
 80007bc:	e019      	b.n	80007f2 <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d815      	bhi.n	80007f2 <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <GPIO_Init+0x3bc>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	7912      	ldrb	r2, [r2, #4]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	4611      	mov	r1, r2
 80007d6:	4a57      	ldr	r2, [pc, #348]	; (8000934 <GPIO_Init+0x3bc>)
 80007d8:	430b      	orrs	r3, r1
 80007da:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	4b55      	ldr	r3, [pc, #340]	; (8000934 <GPIO_Init+0x3bc>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7912      	ldrb	r2, [r2, #4]
 80007e4:	4611      	mov	r1, r2
 80007e6:	2201      	movs	r2, #1
 80007e8:	408a      	lsls	r2, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	4a51      	ldr	r2, [pc, #324]	; (8000934 <GPIO_Init+0x3bc>)
 80007ee:	430b      	orrs	r3, r1
 80007f0:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	f003 0303 	and.w	r3, r3, #3
 8000802:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <GPIO_Init+0x3c0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d02b      	beq.n	8000866 <GPIO_Init+0x2ee>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a4a      	ldr	r2, [pc, #296]	; (800093c <GPIO_Init+0x3c4>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d024      	beq.n	8000862 <GPIO_Init+0x2ea>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a48      	ldr	r2, [pc, #288]	; (8000940 <GPIO_Init+0x3c8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d01d      	beq.n	800085e <GPIO_Init+0x2e6>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a47      	ldr	r2, [pc, #284]	; (8000944 <GPIO_Init+0x3cc>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d016      	beq.n	800085a <GPIO_Init+0x2e2>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a45      	ldr	r2, [pc, #276]	; (8000948 <GPIO_Init+0x3d0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d00f      	beq.n	8000856 <GPIO_Init+0x2de>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a44      	ldr	r2, [pc, #272]	; (800094c <GPIO_Init+0x3d4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d008      	beq.n	8000852 <GPIO_Init+0x2da>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a42      	ldr	r2, [pc, #264]	; (8000950 <GPIO_Init+0x3d8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d101      	bne.n	800084e <GPIO_Init+0x2d6>
 800084a:	2306      	movs	r3, #6
 800084c:	e00c      	b.n	8000868 <GPIO_Init+0x2f0>
 800084e:	2300      	movs	r3, #0
 8000850:	e00a      	b.n	8000868 <GPIO_Init+0x2f0>
 8000852:	2305      	movs	r3, #5
 8000854:	e008      	b.n	8000868 <GPIO_Init+0x2f0>
 8000856:	2304      	movs	r3, #4
 8000858:	e006      	b.n	8000868 <GPIO_Init+0x2f0>
 800085a:	2303      	movs	r3, #3
 800085c:	e004      	b.n	8000868 <GPIO_Init+0x2f0>
 800085e:	2302      	movs	r3, #2
 8000860:	e002      	b.n	8000868 <GPIO_Init+0x2f0>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <GPIO_Init+0x2f0>
 8000866:	2300      	movs	r3, #0
 8000868:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 800086a:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <GPIO_Init+0x3dc>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a39      	ldr	r2, [pc, #228]	; (8000954 <GPIO_Init+0x3dc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 8000876:	7a7a      	ldrb	r2, [r7, #9]
 8000878:	7abb      	ldrb	r3, [r7, #10]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	fa02 f103 	lsl.w	r1, r2, r3
 8000880:	4a35      	ldr	r2, [pc, #212]	; (8000958 <GPIO_Init+0x3e0>)
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	3302      	adds	r3, #2
 8000886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <GPIO_Init+0x3bc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	7912      	ldrb	r2, [r2, #4]
 8000892:	4611      	mov	r1, r2
 8000894:	2201      	movs	r2, #1
 8000896:	408a      	lsls	r2, r1
 8000898:	4611      	mov	r1, r2
 800089a:	4a26      	ldr	r2, [pc, #152]	; (8000934 <GPIO_Init+0x3bc>)
 800089c:	430b      	orrs	r3, r1
 800089e:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	79db      	ldrb	r3, [r3, #7]
 80008a8:	461a      	mov	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	791b      	ldrb	r3, [r3, #4]
 80008be:	4619      	mov	r1, r3
 80008c0:	2301      	movs	r3, #1
 80008c2:	408b      	lsls	r3, r1
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	400a      	ands	r2, r1
 80008ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68d9      	ldr	r1, [r3, #12]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	430a      	orrs	r2, r1
 80008de:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	2b07      	cmp	r3, #7
 80008ea:	d11d      	bne.n	8000928 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7a1b      	ldrb	r3, [r3, #8]
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	791b      	ldrb	r3, [r3, #4]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	791b      	ldrb	r3, [r3, #4]
 8000906:	4619      	mov	r1, r3
 8000908:	2301      	movs	r3, #1
 800090a:	408b      	lsls	r3, r1
 800090c:	43db      	mvns	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	400a      	ands	r2, r1
 8000916:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68d9      	ldr	r1, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	430a      	orrs	r2, r1
 8000926:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	//if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
		// configure the alternate function registers
	//}
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010400 	.word	0x40010400
 8000938:	40010800 	.word	0x40010800
 800093c:	40010c00 	.word	0x40010c00
 8000940:	40011000 	.word	0x40011000
 8000944:	40011400 	.word	0x40011400
 8000948:	40011800 	.word	0x40011800
 800094c:	40011c00 	.word	0x40011c00
 8000950:	40012000 	.word	0x40012000
 8000954:	40021000 	.word	0x40021000
 8000958:	40010000 	.word	0x40010000

0800095c <GPIO_IRQInterruptConfig>:
}

/*
 * IRQ Configuration and ISR Handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d133      	bne.n	80009da <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b1f      	cmp	r3, #31
 8000976:	d80a      	bhi.n	800098e <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000978:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <GPIO_IRQInterruptConfig+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <GPIO_IRQInterruptConfig+0xf0>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 800098c:	e059      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b1f      	cmp	r3, #31
 8000992:	d90f      	bls.n	80009b4 <GPIO_IRQInterruptConfig+0x58>
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b3f      	cmp	r3, #63	; 0x3f
 8000998:	d80c      	bhi.n	80009b4 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <GPIO_IRQInterruptConfig+0xf4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	f002 021f 	and.w	r2, r2, #31
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <GPIO_IRQInterruptConfig+0xf4>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e046      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b3f      	cmp	r3, #63	; 0x3f
 80009b8:	d943      	bls.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b5f      	cmp	r3, #95	; 0x5f
 80009be:	d840      	bhi.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER1 |= (1 << IRQNumber % 64);
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <GPIO_IRQInterruptConfig+0xf4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <GPIO_IRQInterruptConfig+0xf4>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	e033      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b1f      	cmp	r3, #31
 80009de:	d80a      	bhi.n	80009f6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <GPIO_IRQInterruptConfig+0xf8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	79fa      	ldrb	r2, [r7, #7]
 80009e6:	2101      	movs	r1, #1
 80009e8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <GPIO_IRQInterruptConfig+0xf8>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	e025      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	d90f      	bls.n	8000a1c <GPIO_IRQInterruptConfig+0xc0>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000a00:	d80c      	bhi.n	8000a1c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <GPIO_IRQInterruptConfig+0xfc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	f002 021f 	and.w	r2, r2, #31
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <GPIO_IRQInterruptConfig+0xfc>)
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e012      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a20:	d90f      	bls.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b5f      	cmp	r3, #95	; 0x5f
 8000a26:	d80c      	bhi.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <GPIO_IRQInterruptConfig+0x100>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <GPIO_IRQInterruptConfig+0x100>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	e7ff      	b.n	8000a42 <GPIO_IRQInterruptConfig+0xe6>
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000e104 	.word	0xe000e104
 8000a54:	e000e180 	.word	0xe000e180
 8000a58:	e000e184 	.word	0xe000e184
 8000a5c:	e000e188 	.word	0xe000e188

08000a60 <GPIO_IRQPriorityConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	460a      	mov	r2, r1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	71bb      	strb	r3, [r7, #6]
	// 1. First lets find out the IPR register  (iprx = interrupt priority register)
	uint8_t iprx = IRQNumber / 4;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	3304      	adds	r3, #4
 8000a86:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a90:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	79b9      	ldrb	r1, [r7, #6]
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000aa8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <GPIO_IRQHandling+0x3c>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d009      	beq.n	8000aec <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR |= (1 << PinNumber);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <GPIO_IRQHandling+0x3c>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <GPIO_IRQHandling+0x3c>)
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6153      	str	r3, [r2, #20]
	}
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40010400 	.word	0x40010400

08000afc <SPI_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t  EnorDi){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d120      	bne.n	8000b50 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <SPI_PeriClockControl+0xa0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b20:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000b22:	e035      	b.n	8000b90 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <SPI_PeriClockControl+0xa8>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b36:	61d3      	str	r3, [r2, #28]
}
 8000b38:	e02a      	b.n	8000b90 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <SPI_PeriClockControl+0xac>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d126      	bne.n	8000b90 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4c:	61d3      	str	r3, [r2, #28]
}
 8000b4e:	e01f      	b.n	8000b90 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <SPI_PeriClockControl+0xa0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b62:	6193      	str	r3, [r2, #24]
}
 8000b64:	e014      	b.n	8000b90 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <SPI_PeriClockControl+0xa8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b78:	61d3      	str	r3, [r2, #28]
}
 8000b7a:	e009      	b.n	8000b90 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SPI_PeriClockControl+0xac>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d105      	bne.n	8000b90 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SPI_PeriClockControl+0xa4>)
 8000b8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b8e:	61d3      	str	r3, [r2, #28]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40003800 	.word	0x40003800
 8000ba8:	40003c00 	.word	0x40003c00

08000bac <SPI_Init>:
 * @return				-
 *
 * @Note				-
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

	// Enable peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff9e 	bl	8000afc <SPI_PeriClockControl>

	// First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;  // temporal register
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	795b      	ldrb	r3, [r3, #5]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10c      	bne.n	8000c04 <SPI_Init+0x58>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bf0:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e02c      	b.n	8000c5e <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	795b      	ldrb	r3, [r3, #5]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d10c      	bne.n	8000c26 <SPI_Init+0x7a>
		// BIDIMODE should be set
		tempreg |= (1 << 15);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c12:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	e01b      	b.n	8000c5e <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d117      	bne.n	8000c5e <SPI_Init+0xb2>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c34:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
		// RXONLY bit must be set
		tempreg &= ~(1 << 10);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c4c:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
	}

	// 3. Configure the Sclk Speed SPI_SclkSpeed;
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	799b      	ldrb	r3, [r3, #6]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	461a      	mov	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	79db      	ldrb	r3, [r3, #7]
 8000c80:	02db      	lsls	r3, r3, #11
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7a1b      	ldrb	r3, [r3, #8]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

	//6. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7a5b      	ldrb	r3, [r3, #9]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6819      	ldr	r1, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	601a      	str	r2, [r3, #0]

	//7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a9b      	ldrb	r3, [r3, #10]
 8000cd8:	025b      	lsls	r3, r3, #9
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <SPI_GetFlagStatus>:
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SPI_IRQInterruptConfig>:


/*
 * IRQ Configuration and ISR Handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d133      	bne.n	8000d9e <SPI_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b1f      	cmp	r3, #31
 8000d3a:	d80a      	bhi.n	8000d52 <SPI_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <SPI_IRQInterruptConfig+0xf0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	2101      	movs	r1, #1
 8000d44:	fa01 f202 	lsl.w	r2, r1, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <SPI_IRQInterruptConfig+0xf0>)
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000d50:	e059      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d90f      	bls.n	8000d78 <SPI_IRQInterruptConfig+0x58>
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d5c:	d80c      	bhi.n	8000d78 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <SPI_IRQInterruptConfig+0xf4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	f002 021f 	and.w	r2, r2, #31
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <SPI_IRQInterruptConfig+0xf4>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e046      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7c:	d943      	bls.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b5f      	cmp	r3, #95	; 0x5f
 8000d82:	d840      	bhi.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER1 |= (1 << IRQNumber % 64);
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <SPI_IRQInterruptConfig+0xf4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <SPI_IRQInterruptConfig+0xf4>)
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	e033      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b1f      	cmp	r3, #31
 8000da2:	d80a      	bhi.n	8000dba <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <SPI_IRQInterruptConfig+0xf8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <SPI_IRQInterruptConfig+0xf8>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	e025      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b1f      	cmp	r3, #31
 8000dbe:	d90f      	bls.n	8000de0 <SPI_IRQInterruptConfig+0xc0>
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc4:	d80c      	bhi.n	8000de0 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <SPI_IRQInterruptConfig+0xfc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	f002 021f 	and.w	r2, r2, #31
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <SPI_IRQInterruptConfig+0xfc>)
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e012      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	d90f      	bls.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b5f      	cmp	r3, #95	; 0x5f
 8000dea:	d80c      	bhi.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <SPI_IRQInterruptConfig+0x100>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <SPI_IRQInterruptConfig+0x100>)
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	e7ff      	b.n	8000e06 <SPI_IRQInterruptConfig+0xe6>
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000e104 	.word	0xe000e104
 8000e18:	e000e180 	.word	0xe000e180
 8000e1c:	e000e184 	.word	0xe000e184
 8000e20:	e000e188 	.word	0xe000e188

08000e24 <SPI_IRQHandling>:

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
}

void SPI_IRQHandling(SPI_Handle_t *pHandle){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	uint8_t temp1, temp2;
	// First lets check for TXE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e46:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <SPI_IRQHandling+0x36>
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <SPI_IRQHandling+0x36>
		// handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f88b 	bl	8000f70 <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e74:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2){
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d005      	beq.n	8000e88 <SPI_IRQHandling+0x64>
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <SPI_IRQHandling+0x64>
		// handle TXE
		spi_rxne_interrupt_handle(pHandle);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f8b4 	bl	8000ff0 <spi_rxne_interrupt_handle>
	}

	// check for OVR flag
	temp1 = pHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e94:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	73bb      	strb	r3, [r7, #14]
	if(temp1 && temp2){
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d005      	beq.n	8000eb6 <SPI_IRQHandling+0x92>
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <SPI_IRQHandling+0x92>
		// handle TXE
		spi_ovr_err_interrupt_handle(pHandle);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f8df 	bl	8001074 <spi_ovr_err_interrupt_handle>
	}
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <SPI_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d106      	bne.n	8000ede <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000edc:	e005      	b.n	8000eea <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SPI_SSOEConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d106      	bne.n	8000f14 <SPI_SSOEConfig+0x20>
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f043 0204 	orr.w	r2, r3, #4
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	605a      	str	r2, [r3, #4]
	}else{
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000f12:	e005      	b.n	8000f20 <SPI_SSOEConfig+0x2c>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f023 0204 	bic.w	r2, r3, #4
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	605a      	str	r2, [r3, #4]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <SPI_SendDataIT>:


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000f2a:	b480      	push	{r7}
 8000f2c:	b087      	sub	sp, #28
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	7f1b      	ldrb	r3, [r3, #28]
 8000f3a:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX){
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d010      	beq.n	8000f64 <SPI_SendDataIT+0x3a>
		// 1. Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	615a      	str	r2, [r3, #20]

		// 2. Mark the SPI state as busy in transmission so that
		// no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2202      	movs	r2, #2
 8000f52:	771a      	strb	r2, [r3, #28]

		// 3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f62:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <spi_txe_interrupt_handle>:
}


// some helper functions implementations

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

	// Check the DFF bit in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d015      	beq.n	8000fb2 <spi_txe_interrupt_handle+0x42>
		// 16 BIT DFF
		// 1. Load the data in to the DR
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	881a      	ldrh	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	e00f      	b.n	8000fd2 <spi_txe_interrupt_handle+0x62>
	}else{
		// 8 BIT
		// 1. Load the data in to the DR
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <spi_txe_interrupt_handle+0x78>
		// TxLen is zero, so close the spi communication and inform the application that TX is over

		//this prevents interrupts from setting up TXE flag
		SPI_CloseTransmission(pSPIHandle);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f862 	bl	80010a4 <SPI_CloseTransmission>
		SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_TX_CMPLT);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f9a4 	bl	8000330 <SPI_ApplicationEventCallBack>
	}
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	// Check the DFF bit in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001002:	2b00      	cmp	r3, #0
 8001004:	d016      	beq.n	8001034 <spi_rxne_interrupt_handle+0x44>
		// 16 BIT DFF
		// 1. Load the data in to the DR
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t)pSPIHandle->pSPIx->DR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	b292      	uxth	r2, r2
 8001012:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	1e9a      	subs	r2, r3, #2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer--;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	1e5a      	subs	r2, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer--;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	1e5a      	subs	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	e010      	b.n	8001056 <spi_rxne_interrupt_handle+0x66>
	}else{
		// 8 BIT
		// 1. Load the data in to the DR
		*pSPIHandle->pRxBuffer = (uint8_t)pSPIHandle->pSPIx->DR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <spi_rxne_interrupt_handle+0x7c>
		// RxLen is zero, so close the spi communication and inform the application that TX is over

		//this prevents interrupts from setting up TXE flag
		SPI_CloseReception(pSPIHandle);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f83a 	bl	80010d8 <SPI_CloseReception>
		SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_RX_CMPLT);
 8001064:	2102      	movs	r1, #2
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff f962 	bl	8000330 <SPI_ApplicationEventCallBack>
	}
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	// 1. Clear the OVR flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d007      	beq.n	8001094 <spi_ovr_err_interrupt_handle+0x20>
		temp = pSPIHandle->pSPIx->DR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	// 2. Inform the application
	SPI_ApplicationEventCallBack(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001094:	2103      	movs	r1, #3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff f94a 	bl	8000330 <SPI_ApplicationEventCallBack>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SPI_CloseTransmission>:
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ba:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	771a      	strb	r2, [r3, #28]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ee:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	775a      	strb	r2, [r3, #29]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <__libc_init_array>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	2600      	movs	r6, #0
 8001110:	4d0c      	ldr	r5, [pc, #48]	; (8001144 <__libc_init_array+0x38>)
 8001112:	4c0d      	ldr	r4, [pc, #52]	; (8001148 <__libc_init_array+0x3c>)
 8001114:	1b64      	subs	r4, r4, r5
 8001116:	10a4      	asrs	r4, r4, #2
 8001118:	42a6      	cmp	r6, r4
 800111a:	d109      	bne.n	8001130 <__libc_init_array+0x24>
 800111c:	f001 fa7c 	bl	8002618 <_init>
 8001120:	2600      	movs	r6, #0
 8001122:	4d0a      	ldr	r5, [pc, #40]	; (800114c <__libc_init_array+0x40>)
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <__libc_init_array+0x44>)
 8001126:	1b64      	subs	r4, r4, r5
 8001128:	10a4      	asrs	r4, r4, #2
 800112a:	42a6      	cmp	r6, r4
 800112c:	d105      	bne.n	800113a <__libc_init_array+0x2e>
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	f855 3b04 	ldr.w	r3, [r5], #4
 8001134:	4798      	blx	r3
 8001136:	3601      	adds	r6, #1
 8001138:	e7ee      	b.n	8001118 <__libc_init_array+0xc>
 800113a:	f855 3b04 	ldr.w	r3, [r5], #4
 800113e:	4798      	blx	r3
 8001140:	3601      	adds	r6, #1
 8001142:	e7f2      	b.n	800112a <__libc_init_array+0x1e>
 8001144:	080026f4 	.word	0x080026f4
 8001148:	080026f4 	.word	0x080026f4
 800114c:	080026f4 	.word	0x080026f4
 8001150:	080026f8 	.word	0x080026f8

08001154 <memset>:
 8001154:	4603      	mov	r3, r0
 8001156:	4402      	add	r2, r0
 8001158:	4293      	cmp	r3, r2
 800115a:	d100      	bne.n	800115e <memset+0xa>
 800115c:	4770      	bx	lr
 800115e:	f803 1b01 	strb.w	r1, [r3], #1
 8001162:	e7f9      	b.n	8001158 <memset+0x4>

08001164 <iprintf>:
 8001164:	b40f      	push	{r0, r1, r2, r3}
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <iprintf+0x2c>)
 8001168:	b513      	push	{r0, r1, r4, lr}
 800116a:	681c      	ldr	r4, [r3, #0]
 800116c:	b124      	cbz	r4, 8001178 <iprintf+0x14>
 800116e:	69a3      	ldr	r3, [r4, #24]
 8001170:	b913      	cbnz	r3, 8001178 <iprintf+0x14>
 8001172:	4620      	mov	r0, r4
 8001174:	f000 f866 	bl	8001244 <__sinit>
 8001178:	ab05      	add	r3, sp, #20
 800117a:	4620      	mov	r0, r4
 800117c:	9a04      	ldr	r2, [sp, #16]
 800117e:	68a1      	ldr	r1, [r4, #8]
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f000 f9bb 	bl	80014fc <_vfiprintf_r>
 8001186:	b002      	add	sp, #8
 8001188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800118c:	b004      	add	sp, #16
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000

08001194 <std>:
 8001194:	2300      	movs	r3, #0
 8001196:	b510      	push	{r4, lr}
 8001198:	4604      	mov	r4, r0
 800119a:	e9c0 3300 	strd	r3, r3, [r0]
 800119e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011a2:	6083      	str	r3, [r0, #8]
 80011a4:	8181      	strh	r1, [r0, #12]
 80011a6:	6643      	str	r3, [r0, #100]	; 0x64
 80011a8:	81c2      	strh	r2, [r0, #14]
 80011aa:	6183      	str	r3, [r0, #24]
 80011ac:	4619      	mov	r1, r3
 80011ae:	2208      	movs	r2, #8
 80011b0:	305c      	adds	r0, #92	; 0x5c
 80011b2:	f7ff ffcf 	bl	8001154 <memset>
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <std+0x38>)
 80011b8:	6224      	str	r4, [r4, #32]
 80011ba:	6263      	str	r3, [r4, #36]	; 0x24
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <std+0x3c>)
 80011be:	62a3      	str	r3, [r4, #40]	; 0x28
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <std+0x40>)
 80011c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <std+0x44>)
 80011c6:	6323      	str	r3, [r4, #48]	; 0x30
 80011c8:	bd10      	pop	{r4, pc}
 80011ca:	bf00      	nop
 80011cc:	08001aa9 	.word	0x08001aa9
 80011d0:	08001acb 	.word	0x08001acb
 80011d4:	08001b03 	.word	0x08001b03
 80011d8:	08001b27 	.word	0x08001b27

080011dc <_cleanup_r>:
 80011dc:	4901      	ldr	r1, [pc, #4]	; (80011e4 <_cleanup_r+0x8>)
 80011de:	f000 b8af 	b.w	8001340 <_fwalk_reent>
 80011e2:	bf00      	nop
 80011e4:	08001df9 	.word	0x08001df9

080011e8 <__sfmoreglue>:
 80011e8:	2268      	movs	r2, #104	; 0x68
 80011ea:	b570      	push	{r4, r5, r6, lr}
 80011ec:	1e4d      	subs	r5, r1, #1
 80011ee:	4355      	muls	r5, r2
 80011f0:	460e      	mov	r6, r1
 80011f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80011f6:	f000 f8e5 	bl	80013c4 <_malloc_r>
 80011fa:	4604      	mov	r4, r0
 80011fc:	b140      	cbz	r0, 8001210 <__sfmoreglue+0x28>
 80011fe:	2100      	movs	r1, #0
 8001200:	e9c0 1600 	strd	r1, r6, [r0]
 8001204:	300c      	adds	r0, #12
 8001206:	60a0      	str	r0, [r4, #8]
 8001208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800120c:	f7ff ffa2 	bl	8001154 <memset>
 8001210:	4620      	mov	r0, r4
 8001212:	bd70      	pop	{r4, r5, r6, pc}

08001214 <__sfp_lock_acquire>:
 8001214:	4801      	ldr	r0, [pc, #4]	; (800121c <__sfp_lock_acquire+0x8>)
 8001216:	f000 b8b3 	b.w	8001380 <__retarget_lock_acquire_recursive>
 800121a:	bf00      	nop
 800121c:	200002a9 	.word	0x200002a9

08001220 <__sfp_lock_release>:
 8001220:	4801      	ldr	r0, [pc, #4]	; (8001228 <__sfp_lock_release+0x8>)
 8001222:	f000 b8ae 	b.w	8001382 <__retarget_lock_release_recursive>
 8001226:	bf00      	nop
 8001228:	200002a9 	.word	0x200002a9

0800122c <__sinit_lock_acquire>:
 800122c:	4801      	ldr	r0, [pc, #4]	; (8001234 <__sinit_lock_acquire+0x8>)
 800122e:	f000 b8a7 	b.w	8001380 <__retarget_lock_acquire_recursive>
 8001232:	bf00      	nop
 8001234:	200002aa 	.word	0x200002aa

08001238 <__sinit_lock_release>:
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <__sinit_lock_release+0x8>)
 800123a:	f000 b8a2 	b.w	8001382 <__retarget_lock_release_recursive>
 800123e:	bf00      	nop
 8001240:	200002aa 	.word	0x200002aa

08001244 <__sinit>:
 8001244:	b510      	push	{r4, lr}
 8001246:	4604      	mov	r4, r0
 8001248:	f7ff fff0 	bl	800122c <__sinit_lock_acquire>
 800124c:	69a3      	ldr	r3, [r4, #24]
 800124e:	b11b      	cbz	r3, 8001258 <__sinit+0x14>
 8001250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001254:	f7ff bff0 	b.w	8001238 <__sinit_lock_release>
 8001258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800125c:	6523      	str	r3, [r4, #80]	; 0x50
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <__sinit+0x68>)
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <__sinit+0x6c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	62a2      	str	r2, [r4, #40]	; 0x28
 8001266:	42a3      	cmp	r3, r4
 8001268:	bf08      	it	eq
 800126a:	2301      	moveq	r3, #1
 800126c:	4620      	mov	r0, r4
 800126e:	bf08      	it	eq
 8001270:	61a3      	streq	r3, [r4, #24]
 8001272:	f000 f81f 	bl	80012b4 <__sfp>
 8001276:	6060      	str	r0, [r4, #4]
 8001278:	4620      	mov	r0, r4
 800127a:	f000 f81b 	bl	80012b4 <__sfp>
 800127e:	60a0      	str	r0, [r4, #8]
 8001280:	4620      	mov	r0, r4
 8001282:	f000 f817 	bl	80012b4 <__sfp>
 8001286:	2200      	movs	r2, #0
 8001288:	2104      	movs	r1, #4
 800128a:	60e0      	str	r0, [r4, #12]
 800128c:	6860      	ldr	r0, [r4, #4]
 800128e:	f7ff ff81 	bl	8001194 <std>
 8001292:	2201      	movs	r2, #1
 8001294:	2109      	movs	r1, #9
 8001296:	68a0      	ldr	r0, [r4, #8]
 8001298:	f7ff ff7c 	bl	8001194 <std>
 800129c:	2202      	movs	r2, #2
 800129e:	2112      	movs	r1, #18
 80012a0:	68e0      	ldr	r0, [r4, #12]
 80012a2:	f7ff ff77 	bl	8001194 <std>
 80012a6:	2301      	movs	r3, #1
 80012a8:	61a3      	str	r3, [r4, #24]
 80012aa:	e7d1      	b.n	8001250 <__sinit+0xc>
 80012ac:	08002640 	.word	0x08002640
 80012b0:	080011dd 	.word	0x080011dd

080012b4 <__sfp>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	4607      	mov	r7, r0
 80012b8:	f7ff ffac 	bl	8001214 <__sfp_lock_acquire>
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <__sfp+0x84>)
 80012be:	681e      	ldr	r6, [r3, #0]
 80012c0:	69b3      	ldr	r3, [r6, #24]
 80012c2:	b913      	cbnz	r3, 80012ca <__sfp+0x16>
 80012c4:	4630      	mov	r0, r6
 80012c6:	f7ff ffbd 	bl	8001244 <__sinit>
 80012ca:	3648      	adds	r6, #72	; 0x48
 80012cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	d503      	bpl.n	80012dc <__sfp+0x28>
 80012d4:	6833      	ldr	r3, [r6, #0]
 80012d6:	b30b      	cbz	r3, 800131c <__sfp+0x68>
 80012d8:	6836      	ldr	r6, [r6, #0]
 80012da:	e7f7      	b.n	80012cc <__sfp+0x18>
 80012dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012e0:	b9d5      	cbnz	r5, 8001318 <__sfp+0x64>
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <__sfp+0x88>)
 80012e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80012e8:	60e3      	str	r3, [r4, #12]
 80012ea:	6665      	str	r5, [r4, #100]	; 0x64
 80012ec:	f000 f847 	bl	800137e <__retarget_lock_init_recursive>
 80012f0:	f7ff ff96 	bl	8001220 <__sfp_lock_release>
 80012f4:	2208      	movs	r2, #8
 80012f6:	4629      	mov	r1, r5
 80012f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80012fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001300:	6025      	str	r5, [r4, #0]
 8001302:	61a5      	str	r5, [r4, #24]
 8001304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001308:	f7ff ff24 	bl	8001154 <memset>
 800130c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001314:	4620      	mov	r0, r4
 8001316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001318:	3468      	adds	r4, #104	; 0x68
 800131a:	e7d9      	b.n	80012d0 <__sfp+0x1c>
 800131c:	2104      	movs	r1, #4
 800131e:	4638      	mov	r0, r7
 8001320:	f7ff ff62 	bl	80011e8 <__sfmoreglue>
 8001324:	4604      	mov	r4, r0
 8001326:	6030      	str	r0, [r6, #0]
 8001328:	2800      	cmp	r0, #0
 800132a:	d1d5      	bne.n	80012d8 <__sfp+0x24>
 800132c:	f7ff ff78 	bl	8001220 <__sfp_lock_release>
 8001330:	230c      	movs	r3, #12
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	e7ee      	b.n	8001314 <__sfp+0x60>
 8001336:	bf00      	nop
 8001338:	08002640 	.word	0x08002640
 800133c:	ffff0001 	.word	0xffff0001

08001340 <_fwalk_reent>:
 8001340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001344:	4606      	mov	r6, r0
 8001346:	4688      	mov	r8, r1
 8001348:	2700      	movs	r7, #0
 800134a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800134e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001352:	f1b9 0901 	subs.w	r9, r9, #1
 8001356:	d505      	bpl.n	8001364 <_fwalk_reent+0x24>
 8001358:	6824      	ldr	r4, [r4, #0]
 800135a:	2c00      	cmp	r4, #0
 800135c:	d1f7      	bne.n	800134e <_fwalk_reent+0xe>
 800135e:	4638      	mov	r0, r7
 8001360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001364:	89ab      	ldrh	r3, [r5, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d907      	bls.n	800137a <_fwalk_reent+0x3a>
 800136a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800136e:	3301      	adds	r3, #1
 8001370:	d003      	beq.n	800137a <_fwalk_reent+0x3a>
 8001372:	4629      	mov	r1, r5
 8001374:	4630      	mov	r0, r6
 8001376:	47c0      	blx	r8
 8001378:	4307      	orrs	r7, r0
 800137a:	3568      	adds	r5, #104	; 0x68
 800137c:	e7e9      	b.n	8001352 <_fwalk_reent+0x12>

0800137e <__retarget_lock_init_recursive>:
 800137e:	4770      	bx	lr

08001380 <__retarget_lock_acquire_recursive>:
 8001380:	4770      	bx	lr

08001382 <__retarget_lock_release_recursive>:
 8001382:	4770      	bx	lr

08001384 <sbrk_aligned>:
 8001384:	b570      	push	{r4, r5, r6, lr}
 8001386:	4e0e      	ldr	r6, [pc, #56]	; (80013c0 <sbrk_aligned+0x3c>)
 8001388:	460c      	mov	r4, r1
 800138a:	6831      	ldr	r1, [r6, #0]
 800138c:	4605      	mov	r5, r0
 800138e:	b911      	cbnz	r1, 8001396 <sbrk_aligned+0x12>
 8001390:	f000 fb7a 	bl	8001a88 <_sbrk_r>
 8001394:	6030      	str	r0, [r6, #0]
 8001396:	4621      	mov	r1, r4
 8001398:	4628      	mov	r0, r5
 800139a:	f000 fb75 	bl	8001a88 <_sbrk_r>
 800139e:	1c43      	adds	r3, r0, #1
 80013a0:	d00a      	beq.n	80013b8 <sbrk_aligned+0x34>
 80013a2:	1cc4      	adds	r4, r0, #3
 80013a4:	f024 0403 	bic.w	r4, r4, #3
 80013a8:	42a0      	cmp	r0, r4
 80013aa:	d007      	beq.n	80013bc <sbrk_aligned+0x38>
 80013ac:	1a21      	subs	r1, r4, r0
 80013ae:	4628      	mov	r0, r5
 80013b0:	f000 fb6a 	bl	8001a88 <_sbrk_r>
 80013b4:	3001      	adds	r0, #1
 80013b6:	d101      	bne.n	80013bc <sbrk_aligned+0x38>
 80013b8:	f04f 34ff 	mov.w	r4, #4294967295
 80013bc:	4620      	mov	r0, r4
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	200002b0 	.word	0x200002b0

080013c4 <_malloc_r>:
 80013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c8:	1ccd      	adds	r5, r1, #3
 80013ca:	f025 0503 	bic.w	r5, r5, #3
 80013ce:	3508      	adds	r5, #8
 80013d0:	2d0c      	cmp	r5, #12
 80013d2:	bf38      	it	cc
 80013d4:	250c      	movcc	r5, #12
 80013d6:	2d00      	cmp	r5, #0
 80013d8:	4607      	mov	r7, r0
 80013da:	db01      	blt.n	80013e0 <_malloc_r+0x1c>
 80013dc:	42a9      	cmp	r1, r5
 80013de:	d905      	bls.n	80013ec <_malloc_r+0x28>
 80013e0:	230c      	movs	r3, #12
 80013e2:	2600      	movs	r6, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4630      	mov	r0, r6
 80013e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ec:	4e2e      	ldr	r6, [pc, #184]	; (80014a8 <_malloc_r+0xe4>)
 80013ee:	f000 fdc5 	bl	8001f7c <__malloc_lock>
 80013f2:	6833      	ldr	r3, [r6, #0]
 80013f4:	461c      	mov	r4, r3
 80013f6:	bb34      	cbnz	r4, 8001446 <_malloc_r+0x82>
 80013f8:	4629      	mov	r1, r5
 80013fa:	4638      	mov	r0, r7
 80013fc:	f7ff ffc2 	bl	8001384 <sbrk_aligned>
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	4604      	mov	r4, r0
 8001404:	d14d      	bne.n	80014a2 <_malloc_r+0xde>
 8001406:	6834      	ldr	r4, [r6, #0]
 8001408:	4626      	mov	r6, r4
 800140a:	2e00      	cmp	r6, #0
 800140c:	d140      	bne.n	8001490 <_malloc_r+0xcc>
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	4631      	mov	r1, r6
 8001412:	4638      	mov	r0, r7
 8001414:	eb04 0803 	add.w	r8, r4, r3
 8001418:	f000 fb36 	bl	8001a88 <_sbrk_r>
 800141c:	4580      	cmp	r8, r0
 800141e:	d13a      	bne.n	8001496 <_malloc_r+0xd2>
 8001420:	6821      	ldr	r1, [r4, #0]
 8001422:	3503      	adds	r5, #3
 8001424:	1a6d      	subs	r5, r5, r1
 8001426:	f025 0503 	bic.w	r5, r5, #3
 800142a:	3508      	adds	r5, #8
 800142c:	2d0c      	cmp	r5, #12
 800142e:	bf38      	it	cc
 8001430:	250c      	movcc	r5, #12
 8001432:	4638      	mov	r0, r7
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff ffa5 	bl	8001384 <sbrk_aligned>
 800143a:	3001      	adds	r0, #1
 800143c:	d02b      	beq.n	8001496 <_malloc_r+0xd2>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	442b      	add	r3, r5
 8001442:	6023      	str	r3, [r4, #0]
 8001444:	e00e      	b.n	8001464 <_malloc_r+0xa0>
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	1b52      	subs	r2, r2, r5
 800144a:	d41e      	bmi.n	800148a <_malloc_r+0xc6>
 800144c:	2a0b      	cmp	r2, #11
 800144e:	d916      	bls.n	800147e <_malloc_r+0xba>
 8001450:	1961      	adds	r1, r4, r5
 8001452:	42a3      	cmp	r3, r4
 8001454:	6025      	str	r5, [r4, #0]
 8001456:	bf18      	it	ne
 8001458:	6059      	strne	r1, [r3, #4]
 800145a:	6863      	ldr	r3, [r4, #4]
 800145c:	bf08      	it	eq
 800145e:	6031      	streq	r1, [r6, #0]
 8001460:	5162      	str	r2, [r4, r5]
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	4638      	mov	r0, r7
 8001466:	f104 060b 	add.w	r6, r4, #11
 800146a:	f000 fd8d 	bl	8001f88 <__malloc_unlock>
 800146e:	f026 0607 	bic.w	r6, r6, #7
 8001472:	1d23      	adds	r3, r4, #4
 8001474:	1af2      	subs	r2, r6, r3
 8001476:	d0b6      	beq.n	80013e6 <_malloc_r+0x22>
 8001478:	1b9b      	subs	r3, r3, r6
 800147a:	50a3      	str	r3, [r4, r2]
 800147c:	e7b3      	b.n	80013e6 <_malloc_r+0x22>
 800147e:	6862      	ldr	r2, [r4, #4]
 8001480:	42a3      	cmp	r3, r4
 8001482:	bf0c      	ite	eq
 8001484:	6032      	streq	r2, [r6, #0]
 8001486:	605a      	strne	r2, [r3, #4]
 8001488:	e7ec      	b.n	8001464 <_malloc_r+0xa0>
 800148a:	4623      	mov	r3, r4
 800148c:	6864      	ldr	r4, [r4, #4]
 800148e:	e7b2      	b.n	80013f6 <_malloc_r+0x32>
 8001490:	4634      	mov	r4, r6
 8001492:	6876      	ldr	r6, [r6, #4]
 8001494:	e7b9      	b.n	800140a <_malloc_r+0x46>
 8001496:	230c      	movs	r3, #12
 8001498:	4638      	mov	r0, r7
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	f000 fd74 	bl	8001f88 <__malloc_unlock>
 80014a0:	e7a1      	b.n	80013e6 <_malloc_r+0x22>
 80014a2:	6025      	str	r5, [r4, #0]
 80014a4:	e7de      	b.n	8001464 <_malloc_r+0xa0>
 80014a6:	bf00      	nop
 80014a8:	200002ac 	.word	0x200002ac

080014ac <__sfputc_r>:
 80014ac:	6893      	ldr	r3, [r2, #8]
 80014ae:	b410      	push	{r4}
 80014b0:	3b01      	subs	r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	6093      	str	r3, [r2, #8]
 80014b6:	da07      	bge.n	80014c8 <__sfputc_r+0x1c>
 80014b8:	6994      	ldr	r4, [r2, #24]
 80014ba:	42a3      	cmp	r3, r4
 80014bc:	db01      	blt.n	80014c2 <__sfputc_r+0x16>
 80014be:	290a      	cmp	r1, #10
 80014c0:	d102      	bne.n	80014c8 <__sfputc_r+0x1c>
 80014c2:	bc10      	pop	{r4}
 80014c4:	f000 bb34 	b.w	8001b30 <__swbuf_r>
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	1c58      	adds	r0, r3, #1
 80014cc:	6010      	str	r0, [r2, #0]
 80014ce:	7019      	strb	r1, [r3, #0]
 80014d0:	4608      	mov	r0, r1
 80014d2:	bc10      	pop	{r4}
 80014d4:	4770      	bx	lr

080014d6 <__sfputs_r>:
 80014d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d8:	4606      	mov	r6, r0
 80014da:	460f      	mov	r7, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	18d5      	adds	r5, r2, r3
 80014e0:	42ac      	cmp	r4, r5
 80014e2:	d101      	bne.n	80014e8 <__sfputs_r+0x12>
 80014e4:	2000      	movs	r0, #0
 80014e6:	e007      	b.n	80014f8 <__sfputs_r+0x22>
 80014e8:	463a      	mov	r2, r7
 80014ea:	4630      	mov	r0, r6
 80014ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014f0:	f7ff ffdc 	bl	80014ac <__sfputc_r>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d1f3      	bne.n	80014e0 <__sfputs_r+0xa>
 80014f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014fc <_vfiprintf_r>:
 80014fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001500:	460d      	mov	r5, r1
 8001502:	4614      	mov	r4, r2
 8001504:	4698      	mov	r8, r3
 8001506:	4606      	mov	r6, r0
 8001508:	b09d      	sub	sp, #116	; 0x74
 800150a:	b118      	cbz	r0, 8001514 <_vfiprintf_r+0x18>
 800150c:	6983      	ldr	r3, [r0, #24]
 800150e:	b90b      	cbnz	r3, 8001514 <_vfiprintf_r+0x18>
 8001510:	f7ff fe98 	bl	8001244 <__sinit>
 8001514:	4b89      	ldr	r3, [pc, #548]	; (800173c <_vfiprintf_r+0x240>)
 8001516:	429d      	cmp	r5, r3
 8001518:	d11b      	bne.n	8001552 <_vfiprintf_r+0x56>
 800151a:	6875      	ldr	r5, [r6, #4]
 800151c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800151e:	07d9      	lsls	r1, r3, #31
 8001520:	d405      	bmi.n	800152e <_vfiprintf_r+0x32>
 8001522:	89ab      	ldrh	r3, [r5, #12]
 8001524:	059a      	lsls	r2, r3, #22
 8001526:	d402      	bmi.n	800152e <_vfiprintf_r+0x32>
 8001528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800152a:	f7ff ff29 	bl	8001380 <__retarget_lock_acquire_recursive>
 800152e:	89ab      	ldrh	r3, [r5, #12]
 8001530:	071b      	lsls	r3, r3, #28
 8001532:	d501      	bpl.n	8001538 <_vfiprintf_r+0x3c>
 8001534:	692b      	ldr	r3, [r5, #16]
 8001536:	b9eb      	cbnz	r3, 8001574 <_vfiprintf_r+0x78>
 8001538:	4629      	mov	r1, r5
 800153a:	4630      	mov	r0, r6
 800153c:	f000 fb5c 	bl	8001bf8 <__swsetup_r>
 8001540:	b1c0      	cbz	r0, 8001574 <_vfiprintf_r+0x78>
 8001542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001544:	07dc      	lsls	r4, r3, #31
 8001546:	d50e      	bpl.n	8001566 <_vfiprintf_r+0x6a>
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	b01d      	add	sp, #116	; 0x74
 800154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001552:	4b7b      	ldr	r3, [pc, #492]	; (8001740 <_vfiprintf_r+0x244>)
 8001554:	429d      	cmp	r5, r3
 8001556:	d101      	bne.n	800155c <_vfiprintf_r+0x60>
 8001558:	68b5      	ldr	r5, [r6, #8]
 800155a:	e7df      	b.n	800151c <_vfiprintf_r+0x20>
 800155c:	4b79      	ldr	r3, [pc, #484]	; (8001744 <_vfiprintf_r+0x248>)
 800155e:	429d      	cmp	r5, r3
 8001560:	bf08      	it	eq
 8001562:	68f5      	ldreq	r5, [r6, #12]
 8001564:	e7da      	b.n	800151c <_vfiprintf_r+0x20>
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	0598      	lsls	r0, r3, #22
 800156a:	d4ed      	bmi.n	8001548 <_vfiprintf_r+0x4c>
 800156c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800156e:	f7ff ff08 	bl	8001382 <__retarget_lock_release_recursive>
 8001572:	e7e9      	b.n	8001548 <_vfiprintf_r+0x4c>
 8001574:	2300      	movs	r3, #0
 8001576:	9309      	str	r3, [sp, #36]	; 0x24
 8001578:	2320      	movs	r3, #32
 800157a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800157e:	2330      	movs	r3, #48	; 0x30
 8001580:	f04f 0901 	mov.w	r9, #1
 8001584:	f8cd 800c 	str.w	r8, [sp, #12]
 8001588:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001748 <_vfiprintf_r+0x24c>
 800158c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001590:	4623      	mov	r3, r4
 8001592:	469a      	mov	sl, r3
 8001594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001598:	b10a      	cbz	r2, 800159e <_vfiprintf_r+0xa2>
 800159a:	2a25      	cmp	r2, #37	; 0x25
 800159c:	d1f9      	bne.n	8001592 <_vfiprintf_r+0x96>
 800159e:	ebba 0b04 	subs.w	fp, sl, r4
 80015a2:	d00b      	beq.n	80015bc <_vfiprintf_r+0xc0>
 80015a4:	465b      	mov	r3, fp
 80015a6:	4622      	mov	r2, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	4630      	mov	r0, r6
 80015ac:	f7ff ff93 	bl	80014d6 <__sfputs_r>
 80015b0:	3001      	adds	r0, #1
 80015b2:	f000 80aa 	beq.w	800170a <_vfiprintf_r+0x20e>
 80015b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015b8:	445a      	add	r2, fp
 80015ba:	9209      	str	r2, [sp, #36]	; 0x24
 80015bc:	f89a 3000 	ldrb.w	r3, [sl]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a2 	beq.w	800170a <_vfiprintf_r+0x20e>
 80015c6:	2300      	movs	r3, #0
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015d0:	f10a 0a01 	add.w	sl, sl, #1
 80015d4:	9304      	str	r3, [sp, #16]
 80015d6:	9307      	str	r3, [sp, #28]
 80015d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015dc:	931a      	str	r3, [sp, #104]	; 0x68
 80015de:	4654      	mov	r4, sl
 80015e0:	2205      	movs	r2, #5
 80015e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015e6:	4858      	ldr	r0, [pc, #352]	; (8001748 <_vfiprintf_r+0x24c>)
 80015e8:	f000 fcba 	bl	8001f60 <memchr>
 80015ec:	9a04      	ldr	r2, [sp, #16]
 80015ee:	b9d8      	cbnz	r0, 8001628 <_vfiprintf_r+0x12c>
 80015f0:	06d1      	lsls	r1, r2, #27
 80015f2:	bf44      	itt	mi
 80015f4:	2320      	movmi	r3, #32
 80015f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015fa:	0713      	lsls	r3, r2, #28
 80015fc:	bf44      	itt	mi
 80015fe:	232b      	movmi	r3, #43	; 0x2b
 8001600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001604:	f89a 3000 	ldrb.w	r3, [sl]
 8001608:	2b2a      	cmp	r3, #42	; 0x2a
 800160a:	d015      	beq.n	8001638 <_vfiprintf_r+0x13c>
 800160c:	4654      	mov	r4, sl
 800160e:	2000      	movs	r0, #0
 8001610:	f04f 0c0a 	mov.w	ip, #10
 8001614:	9a07      	ldr	r2, [sp, #28]
 8001616:	4621      	mov	r1, r4
 8001618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800161c:	3b30      	subs	r3, #48	; 0x30
 800161e:	2b09      	cmp	r3, #9
 8001620:	d94e      	bls.n	80016c0 <_vfiprintf_r+0x1c4>
 8001622:	b1b0      	cbz	r0, 8001652 <_vfiprintf_r+0x156>
 8001624:	9207      	str	r2, [sp, #28]
 8001626:	e014      	b.n	8001652 <_vfiprintf_r+0x156>
 8001628:	eba0 0308 	sub.w	r3, r0, r8
 800162c:	fa09 f303 	lsl.w	r3, r9, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	46a2      	mov	sl, r4
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	e7d2      	b.n	80015de <_vfiprintf_r+0xe2>
 8001638:	9b03      	ldr	r3, [sp, #12]
 800163a:	1d19      	adds	r1, r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	9103      	str	r1, [sp, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	bfbb      	ittet	lt
 8001644:	425b      	neglt	r3, r3
 8001646:	f042 0202 	orrlt.w	r2, r2, #2
 800164a:	9307      	strge	r3, [sp, #28]
 800164c:	9307      	strlt	r3, [sp, #28]
 800164e:	bfb8      	it	lt
 8001650:	9204      	strlt	r2, [sp, #16]
 8001652:	7823      	ldrb	r3, [r4, #0]
 8001654:	2b2e      	cmp	r3, #46	; 0x2e
 8001656:	d10c      	bne.n	8001672 <_vfiprintf_r+0x176>
 8001658:	7863      	ldrb	r3, [r4, #1]
 800165a:	2b2a      	cmp	r3, #42	; 0x2a
 800165c:	d135      	bne.n	80016ca <_vfiprintf_r+0x1ce>
 800165e:	9b03      	ldr	r3, [sp, #12]
 8001660:	3402      	adds	r4, #2
 8001662:	1d1a      	adds	r2, r3, #4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	9203      	str	r2, [sp, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	bfb8      	it	lt
 800166c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001670:	9305      	str	r3, [sp, #20]
 8001672:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800174c <_vfiprintf_r+0x250>
 8001676:	2203      	movs	r2, #3
 8001678:	4650      	mov	r0, sl
 800167a:	7821      	ldrb	r1, [r4, #0]
 800167c:	f000 fc70 	bl	8001f60 <memchr>
 8001680:	b140      	cbz	r0, 8001694 <_vfiprintf_r+0x198>
 8001682:	2340      	movs	r3, #64	; 0x40
 8001684:	eba0 000a 	sub.w	r0, r0, sl
 8001688:	fa03 f000 	lsl.w	r0, r3, r0
 800168c:	9b04      	ldr	r3, [sp, #16]
 800168e:	3401      	adds	r4, #1
 8001690:	4303      	orrs	r3, r0
 8001692:	9304      	str	r3, [sp, #16]
 8001694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001698:	2206      	movs	r2, #6
 800169a:	482d      	ldr	r0, [pc, #180]	; (8001750 <_vfiprintf_r+0x254>)
 800169c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016a0:	f000 fc5e 	bl	8001f60 <memchr>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d03f      	beq.n	8001728 <_vfiprintf_r+0x22c>
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <_vfiprintf_r+0x258>)
 80016aa:	bb1b      	cbnz	r3, 80016f4 <_vfiprintf_r+0x1f8>
 80016ac:	9b03      	ldr	r3, [sp, #12]
 80016ae:	3307      	adds	r3, #7
 80016b0:	f023 0307 	bic.w	r3, r3, #7
 80016b4:	3308      	adds	r3, #8
 80016b6:	9303      	str	r3, [sp, #12]
 80016b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ba:	443b      	add	r3, r7
 80016bc:	9309      	str	r3, [sp, #36]	; 0x24
 80016be:	e767      	b.n	8001590 <_vfiprintf_r+0x94>
 80016c0:	460c      	mov	r4, r1
 80016c2:	2001      	movs	r0, #1
 80016c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80016c8:	e7a5      	b.n	8001616 <_vfiprintf_r+0x11a>
 80016ca:	2300      	movs	r3, #0
 80016cc:	f04f 0c0a 	mov.w	ip, #10
 80016d0:	4619      	mov	r1, r3
 80016d2:	3401      	adds	r4, #1
 80016d4:	9305      	str	r3, [sp, #20]
 80016d6:	4620      	mov	r0, r4
 80016d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016dc:	3a30      	subs	r2, #48	; 0x30
 80016de:	2a09      	cmp	r2, #9
 80016e0:	d903      	bls.n	80016ea <_vfiprintf_r+0x1ee>
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0c5      	beq.n	8001672 <_vfiprintf_r+0x176>
 80016e6:	9105      	str	r1, [sp, #20]
 80016e8:	e7c3      	b.n	8001672 <_vfiprintf_r+0x176>
 80016ea:	4604      	mov	r4, r0
 80016ec:	2301      	movs	r3, #1
 80016ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80016f2:	e7f0      	b.n	80016d6 <_vfiprintf_r+0x1da>
 80016f4:	ab03      	add	r3, sp, #12
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	462a      	mov	r2, r5
 80016fa:	4630      	mov	r0, r6
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <_vfiprintf_r+0x25c>)
 80016fe:	a904      	add	r1, sp, #16
 8001700:	f3af 8000 	nop.w
 8001704:	4607      	mov	r7, r0
 8001706:	1c78      	adds	r0, r7, #1
 8001708:	d1d6      	bne.n	80016b8 <_vfiprintf_r+0x1bc>
 800170a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800170c:	07d9      	lsls	r1, r3, #31
 800170e:	d405      	bmi.n	800171c <_vfiprintf_r+0x220>
 8001710:	89ab      	ldrh	r3, [r5, #12]
 8001712:	059a      	lsls	r2, r3, #22
 8001714:	d402      	bmi.n	800171c <_vfiprintf_r+0x220>
 8001716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001718:	f7ff fe33 	bl	8001382 <__retarget_lock_release_recursive>
 800171c:	89ab      	ldrh	r3, [r5, #12]
 800171e:	065b      	lsls	r3, r3, #25
 8001720:	f53f af12 	bmi.w	8001548 <_vfiprintf_r+0x4c>
 8001724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001726:	e711      	b.n	800154c <_vfiprintf_r+0x50>
 8001728:	ab03      	add	r3, sp, #12
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	462a      	mov	r2, r5
 800172e:	4630      	mov	r0, r6
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <_vfiprintf_r+0x25c>)
 8001732:	a904      	add	r1, sp, #16
 8001734:	f000 f882 	bl	800183c <_printf_i>
 8001738:	e7e4      	b.n	8001704 <_vfiprintf_r+0x208>
 800173a:	bf00      	nop
 800173c:	08002664 	.word	0x08002664
 8001740:	08002684 	.word	0x08002684
 8001744:	08002644 	.word	0x08002644
 8001748:	080026a4 	.word	0x080026a4
 800174c:	080026aa 	.word	0x080026aa
 8001750:	080026ae 	.word	0x080026ae
 8001754:	00000000 	.word	0x00000000
 8001758:	080014d7 	.word	0x080014d7

0800175c <_printf_common>:
 800175c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001760:	4616      	mov	r6, r2
 8001762:	4699      	mov	r9, r3
 8001764:	688a      	ldr	r2, [r1, #8]
 8001766:	690b      	ldr	r3, [r1, #16]
 8001768:	4607      	mov	r7, r0
 800176a:	4293      	cmp	r3, r2
 800176c:	bfb8      	it	lt
 800176e:	4613      	movlt	r3, r2
 8001770:	6033      	str	r3, [r6, #0]
 8001772:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001776:	460c      	mov	r4, r1
 8001778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800177c:	b10a      	cbz	r2, 8001782 <_printf_common+0x26>
 800177e:	3301      	adds	r3, #1
 8001780:	6033      	str	r3, [r6, #0]
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	0699      	lsls	r1, r3, #26
 8001786:	bf42      	ittt	mi
 8001788:	6833      	ldrmi	r3, [r6, #0]
 800178a:	3302      	addmi	r3, #2
 800178c:	6033      	strmi	r3, [r6, #0]
 800178e:	6825      	ldr	r5, [r4, #0]
 8001790:	f015 0506 	ands.w	r5, r5, #6
 8001794:	d106      	bne.n	80017a4 <_printf_common+0x48>
 8001796:	f104 0a19 	add.w	sl, r4, #25
 800179a:	68e3      	ldr	r3, [r4, #12]
 800179c:	6832      	ldr	r2, [r6, #0]
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	42ab      	cmp	r3, r5
 80017a2:	dc28      	bgt.n	80017f6 <_printf_common+0x9a>
 80017a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017a8:	1e13      	subs	r3, r2, #0
 80017aa:	6822      	ldr	r2, [r4, #0]
 80017ac:	bf18      	it	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	0692      	lsls	r2, r2, #26
 80017b2:	d42d      	bmi.n	8001810 <_printf_common+0xb4>
 80017b4:	4649      	mov	r1, r9
 80017b6:	4638      	mov	r0, r7
 80017b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017bc:	47c0      	blx	r8
 80017be:	3001      	adds	r0, #1
 80017c0:	d020      	beq.n	8001804 <_printf_common+0xa8>
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	68e5      	ldr	r5, [r4, #12]
 80017c6:	f003 0306 	and.w	r3, r3, #6
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf18      	it	ne
 80017ce:	2500      	movne	r5, #0
 80017d0:	6832      	ldr	r2, [r6, #0]
 80017d2:	f04f 0600 	mov.w	r6, #0
 80017d6:	68a3      	ldr	r3, [r4, #8]
 80017d8:	bf08      	it	eq
 80017da:	1aad      	subeq	r5, r5, r2
 80017dc:	6922      	ldr	r2, [r4, #16]
 80017de:	bf08      	it	eq
 80017e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bfc4      	itt	gt
 80017e8:	1a9b      	subgt	r3, r3, r2
 80017ea:	18ed      	addgt	r5, r5, r3
 80017ec:	341a      	adds	r4, #26
 80017ee:	42b5      	cmp	r5, r6
 80017f0:	d11a      	bne.n	8001828 <_printf_common+0xcc>
 80017f2:	2000      	movs	r0, #0
 80017f4:	e008      	b.n	8001808 <_printf_common+0xac>
 80017f6:	2301      	movs	r3, #1
 80017f8:	4652      	mov	r2, sl
 80017fa:	4649      	mov	r1, r9
 80017fc:	4638      	mov	r0, r7
 80017fe:	47c0      	blx	r8
 8001800:	3001      	adds	r0, #1
 8001802:	d103      	bne.n	800180c <_printf_common+0xb0>
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800180c:	3501      	adds	r5, #1
 800180e:	e7c4      	b.n	800179a <_printf_common+0x3e>
 8001810:	2030      	movs	r0, #48	; 0x30
 8001812:	18e1      	adds	r1, r4, r3
 8001814:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800181e:	4422      	add	r2, r4
 8001820:	3302      	adds	r3, #2
 8001822:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001826:	e7c5      	b.n	80017b4 <_printf_common+0x58>
 8001828:	2301      	movs	r3, #1
 800182a:	4622      	mov	r2, r4
 800182c:	4649      	mov	r1, r9
 800182e:	4638      	mov	r0, r7
 8001830:	47c0      	blx	r8
 8001832:	3001      	adds	r0, #1
 8001834:	d0e6      	beq.n	8001804 <_printf_common+0xa8>
 8001836:	3601      	adds	r6, #1
 8001838:	e7d9      	b.n	80017ee <_printf_common+0x92>
	...

0800183c <_printf_i>:
 800183c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001840:	7e0f      	ldrb	r7, [r1, #24]
 8001842:	4691      	mov	r9, r2
 8001844:	2f78      	cmp	r7, #120	; 0x78
 8001846:	4680      	mov	r8, r0
 8001848:	460c      	mov	r4, r1
 800184a:	469a      	mov	sl, r3
 800184c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800184e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001852:	d807      	bhi.n	8001864 <_printf_i+0x28>
 8001854:	2f62      	cmp	r7, #98	; 0x62
 8001856:	d80a      	bhi.n	800186e <_printf_i+0x32>
 8001858:	2f00      	cmp	r7, #0
 800185a:	f000 80d9 	beq.w	8001a10 <_printf_i+0x1d4>
 800185e:	2f58      	cmp	r7, #88	; 0x58
 8001860:	f000 80a4 	beq.w	80019ac <_printf_i+0x170>
 8001864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800186c:	e03a      	b.n	80018e4 <_printf_i+0xa8>
 800186e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001872:	2b15      	cmp	r3, #21
 8001874:	d8f6      	bhi.n	8001864 <_printf_i+0x28>
 8001876:	a101      	add	r1, pc, #4	; (adr r1, 800187c <_printf_i+0x40>)
 8001878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800187c:	080018d5 	.word	0x080018d5
 8001880:	080018e9 	.word	0x080018e9
 8001884:	08001865 	.word	0x08001865
 8001888:	08001865 	.word	0x08001865
 800188c:	08001865 	.word	0x08001865
 8001890:	08001865 	.word	0x08001865
 8001894:	080018e9 	.word	0x080018e9
 8001898:	08001865 	.word	0x08001865
 800189c:	08001865 	.word	0x08001865
 80018a0:	08001865 	.word	0x08001865
 80018a4:	08001865 	.word	0x08001865
 80018a8:	080019f7 	.word	0x080019f7
 80018ac:	08001919 	.word	0x08001919
 80018b0:	080019d9 	.word	0x080019d9
 80018b4:	08001865 	.word	0x08001865
 80018b8:	08001865 	.word	0x08001865
 80018bc:	08001a19 	.word	0x08001a19
 80018c0:	08001865 	.word	0x08001865
 80018c4:	08001919 	.word	0x08001919
 80018c8:	08001865 	.word	0x08001865
 80018cc:	08001865 	.word	0x08001865
 80018d0:	080019e1 	.word	0x080019e1
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	1d1a      	adds	r2, r3, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	602a      	str	r2, [r5, #0]
 80018dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0a4      	b.n	8001a32 <_printf_i+0x1f6>
 80018e8:	6820      	ldr	r0, [r4, #0]
 80018ea:	6829      	ldr	r1, [r5, #0]
 80018ec:	0606      	lsls	r6, r0, #24
 80018ee:	f101 0304 	add.w	r3, r1, #4
 80018f2:	d50a      	bpl.n	800190a <_printf_i+0xce>
 80018f4:	680e      	ldr	r6, [r1, #0]
 80018f6:	602b      	str	r3, [r5, #0]
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	da03      	bge.n	8001904 <_printf_i+0xc8>
 80018fc:	232d      	movs	r3, #45	; 0x2d
 80018fe:	4276      	negs	r6, r6
 8001900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001904:	230a      	movs	r3, #10
 8001906:	485e      	ldr	r0, [pc, #376]	; (8001a80 <_printf_i+0x244>)
 8001908:	e019      	b.n	800193e <_printf_i+0x102>
 800190a:	680e      	ldr	r6, [r1, #0]
 800190c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001910:	602b      	str	r3, [r5, #0]
 8001912:	bf18      	it	ne
 8001914:	b236      	sxthne	r6, r6
 8001916:	e7ef      	b.n	80018f8 <_printf_i+0xbc>
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	6820      	ldr	r0, [r4, #0]
 800191c:	1d19      	adds	r1, r3, #4
 800191e:	6029      	str	r1, [r5, #0]
 8001920:	0601      	lsls	r1, r0, #24
 8001922:	d501      	bpl.n	8001928 <_printf_i+0xec>
 8001924:	681e      	ldr	r6, [r3, #0]
 8001926:	e002      	b.n	800192e <_printf_i+0xf2>
 8001928:	0646      	lsls	r6, r0, #25
 800192a:	d5fb      	bpl.n	8001924 <_printf_i+0xe8>
 800192c:	881e      	ldrh	r6, [r3, #0]
 800192e:	2f6f      	cmp	r7, #111	; 0x6f
 8001930:	bf0c      	ite	eq
 8001932:	2308      	moveq	r3, #8
 8001934:	230a      	movne	r3, #10
 8001936:	4852      	ldr	r0, [pc, #328]	; (8001a80 <_printf_i+0x244>)
 8001938:	2100      	movs	r1, #0
 800193a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800193e:	6865      	ldr	r5, [r4, #4]
 8001940:	2d00      	cmp	r5, #0
 8001942:	bfa8      	it	ge
 8001944:	6821      	ldrge	r1, [r4, #0]
 8001946:	60a5      	str	r5, [r4, #8]
 8001948:	bfa4      	itt	ge
 800194a:	f021 0104 	bicge.w	r1, r1, #4
 800194e:	6021      	strge	r1, [r4, #0]
 8001950:	b90e      	cbnz	r6, 8001956 <_printf_i+0x11a>
 8001952:	2d00      	cmp	r5, #0
 8001954:	d04d      	beq.n	80019f2 <_printf_i+0x1b6>
 8001956:	4615      	mov	r5, r2
 8001958:	fbb6 f1f3 	udiv	r1, r6, r3
 800195c:	fb03 6711 	mls	r7, r3, r1, r6
 8001960:	5dc7      	ldrb	r7, [r0, r7]
 8001962:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001966:	4637      	mov	r7, r6
 8001968:	42bb      	cmp	r3, r7
 800196a:	460e      	mov	r6, r1
 800196c:	d9f4      	bls.n	8001958 <_printf_i+0x11c>
 800196e:	2b08      	cmp	r3, #8
 8001970:	d10b      	bne.n	800198a <_printf_i+0x14e>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	07de      	lsls	r6, r3, #31
 8001976:	d508      	bpl.n	800198a <_printf_i+0x14e>
 8001978:	6923      	ldr	r3, [r4, #16]
 800197a:	6861      	ldr	r1, [r4, #4]
 800197c:	4299      	cmp	r1, r3
 800197e:	bfde      	ittt	le
 8001980:	2330      	movle	r3, #48	; 0x30
 8001982:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001986:	f105 35ff 	addle.w	r5, r5, #4294967295
 800198a:	1b52      	subs	r2, r2, r5
 800198c:	6122      	str	r2, [r4, #16]
 800198e:	464b      	mov	r3, r9
 8001990:	4621      	mov	r1, r4
 8001992:	4640      	mov	r0, r8
 8001994:	f8cd a000 	str.w	sl, [sp]
 8001998:	aa03      	add	r2, sp, #12
 800199a:	f7ff fedf 	bl	800175c <_printf_common>
 800199e:	3001      	adds	r0, #1
 80019a0:	d14c      	bne.n	8001a3c <_printf_i+0x200>
 80019a2:	f04f 30ff 	mov.w	r0, #4294967295
 80019a6:	b004      	add	sp, #16
 80019a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ac:	4834      	ldr	r0, [pc, #208]	; (8001a80 <_printf_i+0x244>)
 80019ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80019b2:	6829      	ldr	r1, [r5, #0]
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80019ba:	6029      	str	r1, [r5, #0]
 80019bc:	061d      	lsls	r5, r3, #24
 80019be:	d514      	bpl.n	80019ea <_printf_i+0x1ae>
 80019c0:	07df      	lsls	r7, r3, #31
 80019c2:	bf44      	itt	mi
 80019c4:	f043 0320 	orrmi.w	r3, r3, #32
 80019c8:	6023      	strmi	r3, [r4, #0]
 80019ca:	b91e      	cbnz	r6, 80019d4 <_printf_i+0x198>
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	f023 0320 	bic.w	r3, r3, #32
 80019d2:	6023      	str	r3, [r4, #0]
 80019d4:	2310      	movs	r3, #16
 80019d6:	e7af      	b.n	8001938 <_printf_i+0xfc>
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	6023      	str	r3, [r4, #0]
 80019e0:	2378      	movs	r3, #120	; 0x78
 80019e2:	4828      	ldr	r0, [pc, #160]	; (8001a84 <_printf_i+0x248>)
 80019e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019e8:	e7e3      	b.n	80019b2 <_printf_i+0x176>
 80019ea:	0659      	lsls	r1, r3, #25
 80019ec:	bf48      	it	mi
 80019ee:	b2b6      	uxthmi	r6, r6
 80019f0:	e7e6      	b.n	80019c0 <_printf_i+0x184>
 80019f2:	4615      	mov	r5, r2
 80019f4:	e7bb      	b.n	800196e <_printf_i+0x132>
 80019f6:	682b      	ldr	r3, [r5, #0]
 80019f8:	6826      	ldr	r6, [r4, #0]
 80019fa:	1d18      	adds	r0, r3, #4
 80019fc:	6961      	ldr	r1, [r4, #20]
 80019fe:	6028      	str	r0, [r5, #0]
 8001a00:	0635      	lsls	r5, r6, #24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	d501      	bpl.n	8001a0a <_printf_i+0x1ce>
 8001a06:	6019      	str	r1, [r3, #0]
 8001a08:	e002      	b.n	8001a10 <_printf_i+0x1d4>
 8001a0a:	0670      	lsls	r0, r6, #25
 8001a0c:	d5fb      	bpl.n	8001a06 <_printf_i+0x1ca>
 8001a0e:	8019      	strh	r1, [r3, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	4615      	mov	r5, r2
 8001a14:	6123      	str	r3, [r4, #16]
 8001a16:	e7ba      	b.n	800198e <_printf_i+0x152>
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	1d1a      	adds	r2, r3, #4
 8001a1e:	602a      	str	r2, [r5, #0]
 8001a20:	681d      	ldr	r5, [r3, #0]
 8001a22:	6862      	ldr	r2, [r4, #4]
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 fa9b 	bl	8001f60 <memchr>
 8001a2a:	b108      	cbz	r0, 8001a30 <_printf_i+0x1f4>
 8001a2c:	1b40      	subs	r0, r0, r5
 8001a2e:	6060      	str	r0, [r4, #4]
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	6123      	str	r3, [r4, #16]
 8001a34:	2300      	movs	r3, #0
 8001a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a3a:	e7a8      	b.n	800198e <_printf_i+0x152>
 8001a3c:	462a      	mov	r2, r5
 8001a3e:	4649      	mov	r1, r9
 8001a40:	4640      	mov	r0, r8
 8001a42:	6923      	ldr	r3, [r4, #16]
 8001a44:	47d0      	blx	sl
 8001a46:	3001      	adds	r0, #1
 8001a48:	d0ab      	beq.n	80019a2 <_printf_i+0x166>
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	079b      	lsls	r3, r3, #30
 8001a4e:	d413      	bmi.n	8001a78 <_printf_i+0x23c>
 8001a50:	68e0      	ldr	r0, [r4, #12]
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	4298      	cmp	r0, r3
 8001a56:	bfb8      	it	lt
 8001a58:	4618      	movlt	r0, r3
 8001a5a:	e7a4      	b.n	80019a6 <_printf_i+0x16a>
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	4632      	mov	r2, r6
 8001a60:	4649      	mov	r1, r9
 8001a62:	4640      	mov	r0, r8
 8001a64:	47d0      	blx	sl
 8001a66:	3001      	adds	r0, #1
 8001a68:	d09b      	beq.n	80019a2 <_printf_i+0x166>
 8001a6a:	3501      	adds	r5, #1
 8001a6c:	68e3      	ldr	r3, [r4, #12]
 8001a6e:	9903      	ldr	r1, [sp, #12]
 8001a70:	1a5b      	subs	r3, r3, r1
 8001a72:	42ab      	cmp	r3, r5
 8001a74:	dcf2      	bgt.n	8001a5c <_printf_i+0x220>
 8001a76:	e7eb      	b.n	8001a50 <_printf_i+0x214>
 8001a78:	2500      	movs	r5, #0
 8001a7a:	f104 0619 	add.w	r6, r4, #25
 8001a7e:	e7f5      	b.n	8001a6c <_printf_i+0x230>
 8001a80:	080026b5 	.word	0x080026b5
 8001a84:	080026c6 	.word	0x080026c6

08001a88 <_sbrk_r>:
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	4d05      	ldr	r5, [pc, #20]	; (8001aa4 <_sbrk_r+0x1c>)
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f000 fbf2 	bl	800227c <_sbrk>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk_r+0x1a>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	b103      	cbz	r3, 8001aa2 <_sbrk_r+0x1a>
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}
 8001aa4:	200002b4 	.word	0x200002b4

08001aa8 <__sread>:
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	460c      	mov	r4, r1
 8001aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab0:	f000 fab8 	bl	8002024 <_read_r>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	bfab      	itete	ge
 8001ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aba:	89a3      	ldrhlt	r3, [r4, #12]
 8001abc:	181b      	addge	r3, r3, r0
 8001abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ac2:	bfac      	ite	ge
 8001ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ac6:	81a3      	strhlt	r3, [r4, #12]
 8001ac8:	bd10      	pop	{r4, pc}

08001aca <__swrite>:
 8001aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ace:	461f      	mov	r7, r3
 8001ad0:	898b      	ldrh	r3, [r1, #12]
 8001ad2:	4605      	mov	r5, r0
 8001ad4:	05db      	lsls	r3, r3, #23
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	4616      	mov	r6, r2
 8001ada:	d505      	bpl.n	8001ae8 <__swrite+0x1e>
 8001adc:	2302      	movs	r3, #2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae4:	f000 f9c4 	bl	8001e70 <_lseek_r>
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	4632      	mov	r2, r6
 8001aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af0:	81a3      	strh	r3, [r4, #12]
 8001af2:	4628      	mov	r0, r5
 8001af4:	463b      	mov	r3, r7
 8001af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001afe:	f000 b869 	b.w	8001bd4 <_write_r>

08001b02 <__sseek>:
 8001b02:	b510      	push	{r4, lr}
 8001b04:	460c      	mov	r4, r1
 8001b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b0a:	f000 f9b1 	bl	8001e70 <_lseek_r>
 8001b0e:	1c43      	adds	r3, r0, #1
 8001b10:	89a3      	ldrh	r3, [r4, #12]
 8001b12:	bf15      	itete	ne
 8001b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b1e:	81a3      	strheq	r3, [r4, #12]
 8001b20:	bf18      	it	ne
 8001b22:	81a3      	strhne	r3, [r4, #12]
 8001b24:	bd10      	pop	{r4, pc}

08001b26 <__sclose>:
 8001b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2a:	f000 b8d3 	b.w	8001cd4 <_close_r>
	...

08001b30 <__swbuf_r>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	460e      	mov	r6, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	4605      	mov	r5, r0
 8001b38:	b118      	cbz	r0, 8001b42 <__swbuf_r+0x12>
 8001b3a:	6983      	ldr	r3, [r0, #24]
 8001b3c:	b90b      	cbnz	r3, 8001b42 <__swbuf_r+0x12>
 8001b3e:	f7ff fb81 	bl	8001244 <__sinit>
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <__swbuf_r+0x98>)
 8001b44:	429c      	cmp	r4, r3
 8001b46:	d12b      	bne.n	8001ba0 <__swbuf_r+0x70>
 8001b48:	686c      	ldr	r4, [r5, #4]
 8001b4a:	69a3      	ldr	r3, [r4, #24]
 8001b4c:	60a3      	str	r3, [r4, #8]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	071a      	lsls	r2, r3, #28
 8001b52:	d52f      	bpl.n	8001bb4 <__swbuf_r+0x84>
 8001b54:	6923      	ldr	r3, [r4, #16]
 8001b56:	b36b      	cbz	r3, 8001bb4 <__swbuf_r+0x84>
 8001b58:	6923      	ldr	r3, [r4, #16]
 8001b5a:	6820      	ldr	r0, [r4, #0]
 8001b5c:	b2f6      	uxtb	r6, r6
 8001b5e:	1ac0      	subs	r0, r0, r3
 8001b60:	6963      	ldr	r3, [r4, #20]
 8001b62:	4637      	mov	r7, r6
 8001b64:	4283      	cmp	r3, r0
 8001b66:	dc04      	bgt.n	8001b72 <__swbuf_r+0x42>
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 f944 	bl	8001df8 <_fflush_r>
 8001b70:	bb30      	cbnz	r0, 8001bc0 <__swbuf_r+0x90>
 8001b72:	68a3      	ldr	r3, [r4, #8]
 8001b74:	3001      	adds	r0, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60a3      	str	r3, [r4, #8]
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	6022      	str	r2, [r4, #0]
 8001b80:	701e      	strb	r6, [r3, #0]
 8001b82:	6963      	ldr	r3, [r4, #20]
 8001b84:	4283      	cmp	r3, r0
 8001b86:	d004      	beq.n	8001b92 <__swbuf_r+0x62>
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	07db      	lsls	r3, r3, #31
 8001b8c:	d506      	bpl.n	8001b9c <__swbuf_r+0x6c>
 8001b8e:	2e0a      	cmp	r6, #10
 8001b90:	d104      	bne.n	8001b9c <__swbuf_r+0x6c>
 8001b92:	4621      	mov	r1, r4
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 f92f 	bl	8001df8 <_fflush_r>
 8001b9a:	b988      	cbnz	r0, 8001bc0 <__swbuf_r+0x90>
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <__swbuf_r+0x9c>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d101      	bne.n	8001baa <__swbuf_r+0x7a>
 8001ba6:	68ac      	ldr	r4, [r5, #8]
 8001ba8:	e7cf      	b.n	8001b4a <__swbuf_r+0x1a>
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <__swbuf_r+0xa0>)
 8001bac:	429c      	cmp	r4, r3
 8001bae:	bf08      	it	eq
 8001bb0:	68ec      	ldreq	r4, [r5, #12]
 8001bb2:	e7ca      	b.n	8001b4a <__swbuf_r+0x1a>
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f000 f81e 	bl	8001bf8 <__swsetup_r>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d0cb      	beq.n	8001b58 <__swbuf_r+0x28>
 8001bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8001bc4:	e7ea      	b.n	8001b9c <__swbuf_r+0x6c>
 8001bc6:	bf00      	nop
 8001bc8:	08002664 	.word	0x08002664
 8001bcc:	08002684 	.word	0x08002684
 8001bd0:	08002644 	.word	0x08002644

08001bd4 <_write_r>:
 8001bd4:	b538      	push	{r3, r4, r5, lr}
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4d05      	ldr	r5, [pc, #20]	; (8001bf4 <_write_r+0x20>)
 8001be0:	602a      	str	r2, [r5, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f000 faf7 	bl	80021d6 <_write>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d102      	bne.n	8001bf2 <_write_r+0x1e>
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	b103      	cbz	r3, 8001bf2 <_write_r+0x1e>
 8001bf0:	6023      	str	r3, [r4, #0]
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	200002b4 	.word	0x200002b4

08001bf8 <__swsetup_r>:
 8001bf8:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <__swsetup_r+0xcc>)
 8001bfa:	b570      	push	{r4, r5, r6, lr}
 8001bfc:	681d      	ldr	r5, [r3, #0]
 8001bfe:	4606      	mov	r6, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	b125      	cbz	r5, 8001c0e <__swsetup_r+0x16>
 8001c04:	69ab      	ldr	r3, [r5, #24]
 8001c06:	b913      	cbnz	r3, 8001c0e <__swsetup_r+0x16>
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f7ff fb1b 	bl	8001244 <__sinit>
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <__swsetup_r+0xd0>)
 8001c10:	429c      	cmp	r4, r3
 8001c12:	d10f      	bne.n	8001c34 <__swsetup_r+0x3c>
 8001c14:	686c      	ldr	r4, [r5, #4]
 8001c16:	89a3      	ldrh	r3, [r4, #12]
 8001c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c1c:	0719      	lsls	r1, r3, #28
 8001c1e:	d42c      	bmi.n	8001c7a <__swsetup_r+0x82>
 8001c20:	06dd      	lsls	r5, r3, #27
 8001c22:	d411      	bmi.n	8001c48 <__swsetup_r+0x50>
 8001c24:	2309      	movs	r3, #9
 8001c26:	6033      	str	r3, [r6, #0]
 8001c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	e03e      	b.n	8001cb2 <__swsetup_r+0xba>
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <__swsetup_r+0xd4>)
 8001c36:	429c      	cmp	r4, r3
 8001c38:	d101      	bne.n	8001c3e <__swsetup_r+0x46>
 8001c3a:	68ac      	ldr	r4, [r5, #8]
 8001c3c:	e7eb      	b.n	8001c16 <__swsetup_r+0x1e>
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <__swsetup_r+0xd8>)
 8001c40:	429c      	cmp	r4, r3
 8001c42:	bf08      	it	eq
 8001c44:	68ec      	ldreq	r4, [r5, #12]
 8001c46:	e7e6      	b.n	8001c16 <__swsetup_r+0x1e>
 8001c48:	0758      	lsls	r0, r3, #29
 8001c4a:	d512      	bpl.n	8001c72 <__swsetup_r+0x7a>
 8001c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c4e:	b141      	cbz	r1, 8001c62 <__swsetup_r+0x6a>
 8001c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c54:	4299      	cmp	r1, r3
 8001c56:	d002      	beq.n	8001c5e <__swsetup_r+0x66>
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f000 f99b 	bl	8001f94 <_free_r>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6363      	str	r3, [r4, #52]	; 0x34
 8001c62:	89a3      	ldrh	r3, [r4, #12]
 8001c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c68:	81a3      	strh	r3, [r4, #12]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6063      	str	r3, [r4, #4]
 8001c6e:	6923      	ldr	r3, [r4, #16]
 8001c70:	6023      	str	r3, [r4, #0]
 8001c72:	89a3      	ldrh	r3, [r4, #12]
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	81a3      	strh	r3, [r4, #12]
 8001c7a:	6923      	ldr	r3, [r4, #16]
 8001c7c:	b94b      	cbnz	r3, 8001c92 <__swsetup_r+0x9a>
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c88:	d003      	beq.n	8001c92 <__swsetup_r+0x9a>
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f000 f927 	bl	8001ee0 <__smakebuf_r>
 8001c92:	89a0      	ldrh	r0, [r4, #12]
 8001c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c98:	f010 0301 	ands.w	r3, r0, #1
 8001c9c:	d00a      	beq.n	8001cb4 <__swsetup_r+0xbc>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60a3      	str	r3, [r4, #8]
 8001ca2:	6963      	ldr	r3, [r4, #20]
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	61a3      	str	r3, [r4, #24]
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	b943      	cbnz	r3, 8001cbe <__swsetup_r+0xc6>
 8001cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cb0:	d1ba      	bne.n	8001c28 <__swsetup_r+0x30>
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
 8001cb4:	0781      	lsls	r1, r0, #30
 8001cb6:	bf58      	it	pl
 8001cb8:	6963      	ldrpl	r3, [r4, #20]
 8001cba:	60a3      	str	r3, [r4, #8]
 8001cbc:	e7f4      	b.n	8001ca8 <__swsetup_r+0xb0>
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e7f7      	b.n	8001cb2 <__swsetup_r+0xba>
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	08002664 	.word	0x08002664
 8001ccc:	08002684 	.word	0x08002684
 8001cd0:	08002644 	.word	0x08002644

08001cd4 <_close_r>:
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	4d05      	ldr	r5, [pc, #20]	; (8001cf0 <_close_r+0x1c>)
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	f000 faa6 	bl	8002230 <_close>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_close_r+0x1a>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_close_r+0x1a>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	200002b4 	.word	0x200002b4

08001cf4 <__sflush_r>:
 8001cf4:	898a      	ldrh	r2, [r1, #12]
 8001cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	0710      	lsls	r0, r2, #28
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	d457      	bmi.n	8001db0 <__sflush_r+0xbc>
 8001d00:	684b      	ldr	r3, [r1, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc04      	bgt.n	8001d10 <__sflush_r+0x1c>
 8001d06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dc01      	bgt.n	8001d10 <__sflush_r+0x1c>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d12:	2e00      	cmp	r6, #0
 8001d14:	d0fa      	beq.n	8001d0c <__sflush_r+0x18>
 8001d16:	2300      	movs	r3, #0
 8001d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d1c:	682f      	ldr	r7, [r5, #0]
 8001d1e:	602b      	str	r3, [r5, #0]
 8001d20:	d032      	beq.n	8001d88 <__sflush_r+0x94>
 8001d22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	075a      	lsls	r2, r3, #29
 8001d28:	d505      	bpl.n	8001d36 <__sflush_r+0x42>
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	1ac0      	subs	r0, r0, r3
 8001d2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d30:	b10b      	cbz	r3, 8001d36 <__sflush_r+0x42>
 8001d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d34:	1ac0      	subs	r0, r0, r3
 8001d36:	2300      	movs	r3, #0
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	6a21      	ldr	r1, [r4, #32]
 8001d40:	47b0      	blx	r6
 8001d42:	1c43      	adds	r3, r0, #1
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	d106      	bne.n	8001d56 <__sflush_r+0x62>
 8001d48:	6829      	ldr	r1, [r5, #0]
 8001d4a:	291d      	cmp	r1, #29
 8001d4c:	d82c      	bhi.n	8001da8 <__sflush_r+0xb4>
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <__sflush_r+0x100>)
 8001d50:	40ca      	lsrs	r2, r1
 8001d52:	07d6      	lsls	r6, r2, #31
 8001d54:	d528      	bpl.n	8001da8 <__sflush_r+0xb4>
 8001d56:	2200      	movs	r2, #0
 8001d58:	6062      	str	r2, [r4, #4]
 8001d5a:	6922      	ldr	r2, [r4, #16]
 8001d5c:	04d9      	lsls	r1, r3, #19
 8001d5e:	6022      	str	r2, [r4, #0]
 8001d60:	d504      	bpl.n	8001d6c <__sflush_r+0x78>
 8001d62:	1c42      	adds	r2, r0, #1
 8001d64:	d101      	bne.n	8001d6a <__sflush_r+0x76>
 8001d66:	682b      	ldr	r3, [r5, #0]
 8001d68:	b903      	cbnz	r3, 8001d6c <__sflush_r+0x78>
 8001d6a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d6e:	602f      	str	r7, [r5, #0]
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d0cb      	beq.n	8001d0c <__sflush_r+0x18>
 8001d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d78:	4299      	cmp	r1, r3
 8001d7a:	d002      	beq.n	8001d82 <__sflush_r+0x8e>
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f000 f909 	bl	8001f94 <_free_r>
 8001d82:	2000      	movs	r0, #0
 8001d84:	6360      	str	r0, [r4, #52]	; 0x34
 8001d86:	e7c2      	b.n	8001d0e <__sflush_r+0x1a>
 8001d88:	6a21      	ldr	r1, [r4, #32]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	47b0      	blx	r6
 8001d90:	1c41      	adds	r1, r0, #1
 8001d92:	d1c7      	bne.n	8001d24 <__sflush_r+0x30>
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0c4      	beq.n	8001d24 <__sflush_r+0x30>
 8001d9a:	2b1d      	cmp	r3, #29
 8001d9c:	d001      	beq.n	8001da2 <__sflush_r+0xae>
 8001d9e:	2b16      	cmp	r3, #22
 8001da0:	d101      	bne.n	8001da6 <__sflush_r+0xb2>
 8001da2:	602f      	str	r7, [r5, #0]
 8001da4:	e7b2      	b.n	8001d0c <__sflush_r+0x18>
 8001da6:	89a3      	ldrh	r3, [r4, #12]
 8001da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	e7ae      	b.n	8001d0e <__sflush_r+0x1a>
 8001db0:	690f      	ldr	r7, [r1, #16]
 8001db2:	2f00      	cmp	r7, #0
 8001db4:	d0aa      	beq.n	8001d0c <__sflush_r+0x18>
 8001db6:	0793      	lsls	r3, r2, #30
 8001db8:	bf18      	it	ne
 8001dba:	2300      	movne	r3, #0
 8001dbc:	680e      	ldr	r6, [r1, #0]
 8001dbe:	bf08      	it	eq
 8001dc0:	694b      	ldreq	r3, [r1, #20]
 8001dc2:	1bf6      	subs	r6, r6, r7
 8001dc4:	600f      	str	r7, [r1, #0]
 8001dc6:	608b      	str	r3, [r1, #8]
 8001dc8:	2e00      	cmp	r6, #0
 8001dca:	dd9f      	ble.n	8001d0c <__sflush_r+0x18>
 8001dcc:	4633      	mov	r3, r6
 8001dce:	463a      	mov	r2, r7
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	6a21      	ldr	r1, [r4, #32]
 8001dd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001dd8:	47e0      	blx	ip
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	dc06      	bgt.n	8001dec <__sflush_r+0xf8>
 8001dde:	89a3      	ldrh	r3, [r4, #12]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	e790      	b.n	8001d0e <__sflush_r+0x1a>
 8001dec:	4407      	add	r7, r0
 8001dee:	1a36      	subs	r6, r6, r0
 8001df0:	e7ea      	b.n	8001dc8 <__sflush_r+0xd4>
 8001df2:	bf00      	nop
 8001df4:	20400001 	.word	0x20400001

08001df8 <_fflush_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	690b      	ldr	r3, [r1, #16]
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	b913      	cbnz	r3, 8001e08 <_fflush_r+0x10>
 8001e02:	2500      	movs	r5, #0
 8001e04:	4628      	mov	r0, r5
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	b118      	cbz	r0, 8001e12 <_fflush_r+0x1a>
 8001e0a:	6983      	ldr	r3, [r0, #24]
 8001e0c:	b90b      	cbnz	r3, 8001e12 <_fflush_r+0x1a>
 8001e0e:	f7ff fa19 	bl	8001244 <__sinit>
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <_fflush_r+0x6c>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	d11b      	bne.n	8001e50 <_fflush_r+0x58>
 8001e18:	686c      	ldr	r4, [r5, #4]
 8001e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ef      	beq.n	8001e02 <_fflush_r+0xa>
 8001e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e24:	07d0      	lsls	r0, r2, #31
 8001e26:	d404      	bmi.n	8001e32 <_fflush_r+0x3a>
 8001e28:	0599      	lsls	r1, r3, #22
 8001e2a:	d402      	bmi.n	8001e32 <_fflush_r+0x3a>
 8001e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e2e:	f7ff faa7 	bl	8001380 <__retarget_lock_acquire_recursive>
 8001e32:	4628      	mov	r0, r5
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7ff ff5d 	bl	8001cf4 <__sflush_r>
 8001e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	07da      	lsls	r2, r3, #31
 8001e40:	d4e0      	bmi.n	8001e04 <_fflush_r+0xc>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	059b      	lsls	r3, r3, #22
 8001e46:	d4dd      	bmi.n	8001e04 <_fflush_r+0xc>
 8001e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e4a:	f7ff fa9a 	bl	8001382 <__retarget_lock_release_recursive>
 8001e4e:	e7d9      	b.n	8001e04 <_fflush_r+0xc>
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_fflush_r+0x70>)
 8001e52:	429c      	cmp	r4, r3
 8001e54:	d101      	bne.n	8001e5a <_fflush_r+0x62>
 8001e56:	68ac      	ldr	r4, [r5, #8]
 8001e58:	e7df      	b.n	8001e1a <_fflush_r+0x22>
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <_fflush_r+0x74>)
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	bf08      	it	eq
 8001e60:	68ec      	ldreq	r4, [r5, #12]
 8001e62:	e7da      	b.n	8001e1a <_fflush_r+0x22>
 8001e64:	08002664 	.word	0x08002664
 8001e68:	08002684 	.word	0x08002684
 8001e6c:	08002644 	.word	0x08002644

08001e70 <_lseek_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4d05      	ldr	r5, [pc, #20]	; (8001e90 <_lseek_r+0x20>)
 8001e7c:	602a      	str	r2, [r5, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f000 f997 	bl	80021b2 <_lseek>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	d102      	bne.n	8001e8e <_lseek_r+0x1e>
 8001e88:	682b      	ldr	r3, [r5, #0]
 8001e8a:	b103      	cbz	r3, 8001e8e <_lseek_r+0x1e>
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	200002b4 	.word	0x200002b4

08001e94 <__swhatbuf_r>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460e      	mov	r6, r1
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	b096      	sub	sp, #88	; 0x58
 8001ea4:	da08      	bge.n	8001eb8 <__swhatbuf_r+0x24>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001eac:	602a      	str	r2, [r5, #0]
 8001eae:	061a      	lsls	r2, r3, #24
 8001eb0:	d410      	bmi.n	8001ed4 <__swhatbuf_r+0x40>
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	e00e      	b.n	8001ed6 <__swhatbuf_r+0x42>
 8001eb8:	466a      	mov	r2, sp
 8001eba:	f000 f8c5 	bl	8002048 <_fstat_r>
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	dbf1      	blt.n	8001ea6 <__swhatbuf_r+0x12>
 8001ec2:	9a01      	ldr	r2, [sp, #4]
 8001ec4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ec8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ecc:	425a      	negs	r2, r3
 8001ece:	415a      	adcs	r2, r3
 8001ed0:	602a      	str	r2, [r5, #0]
 8001ed2:	e7ee      	b.n	8001eb2 <__swhatbuf_r+0x1e>
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	b016      	add	sp, #88	; 0x58
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ee0 <__smakebuf_r>:
 8001ee0:	898b      	ldrh	r3, [r1, #12]
 8001ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ee4:	079d      	lsls	r5, r3, #30
 8001ee6:	4606      	mov	r6, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	d507      	bpl.n	8001efc <__smakebuf_r+0x1c>
 8001eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ef0:	6023      	str	r3, [r4, #0]
 8001ef2:	6123      	str	r3, [r4, #16]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	6163      	str	r3, [r4, #20]
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
 8001efc:	466a      	mov	r2, sp
 8001efe:	ab01      	add	r3, sp, #4
 8001f00:	f7ff ffc8 	bl	8001e94 <__swhatbuf_r>
 8001f04:	9900      	ldr	r1, [sp, #0]
 8001f06:	4605      	mov	r5, r0
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f7ff fa5b 	bl	80013c4 <_malloc_r>
 8001f0e:	b948      	cbnz	r0, 8001f24 <__smakebuf_r+0x44>
 8001f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f14:	059a      	lsls	r2, r3, #22
 8001f16:	d4ef      	bmi.n	8001ef8 <__smakebuf_r+0x18>
 8001f18:	f023 0303 	bic.w	r3, r3, #3
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	81a3      	strh	r3, [r4, #12]
 8001f22:	e7e3      	b.n	8001eec <__smakebuf_r+0xc>
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <__smakebuf_r+0x7c>)
 8001f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f28:	89a3      	ldrh	r3, [r4, #12]
 8001f2a:	6020      	str	r0, [r4, #0]
 8001f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f30:	81a3      	strh	r3, [r4, #12]
 8001f32:	9b00      	ldr	r3, [sp, #0]
 8001f34:	6120      	str	r0, [r4, #16]
 8001f36:	6163      	str	r3, [r4, #20]
 8001f38:	9b01      	ldr	r3, [sp, #4]
 8001f3a:	b15b      	cbz	r3, 8001f54 <__smakebuf_r+0x74>
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f42:	f000 f893 	bl	800206c <_isatty_r>
 8001f46:	b128      	cbz	r0, 8001f54 <__smakebuf_r+0x74>
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	81a3      	strh	r3, [r4, #12]
 8001f54:	89a0      	ldrh	r0, [r4, #12]
 8001f56:	4305      	orrs	r5, r0
 8001f58:	81a5      	strh	r5, [r4, #12]
 8001f5a:	e7cd      	b.n	8001ef8 <__smakebuf_r+0x18>
 8001f5c:	080011dd 	.word	0x080011dd

08001f60 <memchr>:
 8001f60:	4603      	mov	r3, r0
 8001f62:	b510      	push	{r4, lr}
 8001f64:	b2c9      	uxtb	r1, r1
 8001f66:	4402      	add	r2, r0
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	d101      	bne.n	8001f72 <memchr+0x12>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e003      	b.n	8001f7a <memchr+0x1a>
 8001f72:	7804      	ldrb	r4, [r0, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	428c      	cmp	r4, r1
 8001f78:	d1f6      	bne.n	8001f68 <memchr+0x8>
 8001f7a:	bd10      	pop	{r4, pc}

08001f7c <__malloc_lock>:
 8001f7c:	4801      	ldr	r0, [pc, #4]	; (8001f84 <__malloc_lock+0x8>)
 8001f7e:	f7ff b9ff 	b.w	8001380 <__retarget_lock_acquire_recursive>
 8001f82:	bf00      	nop
 8001f84:	200002a8 	.word	0x200002a8

08001f88 <__malloc_unlock>:
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <__malloc_unlock+0x8>)
 8001f8a:	f7ff b9fa 	b.w	8001382 <__retarget_lock_release_recursive>
 8001f8e:	bf00      	nop
 8001f90:	200002a8 	.word	0x200002a8

08001f94 <_free_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4605      	mov	r5, r0
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	d040      	beq.n	800201e <_free_r+0x8a>
 8001f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fa0:	1f0c      	subs	r4, r1, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bfb8      	it	lt
 8001fa6:	18e4      	addlt	r4, r4, r3
 8001fa8:	f7ff ffe8 	bl	8001f7c <__malloc_lock>
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <_free_r+0x8c>)
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	b933      	cbnz	r3, 8001fc0 <_free_r+0x2c>
 8001fb2:	6063      	str	r3, [r4, #4]
 8001fb4:	6014      	str	r4, [r2, #0]
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fbc:	f7ff bfe4 	b.w	8001f88 <__malloc_unlock>
 8001fc0:	42a3      	cmp	r3, r4
 8001fc2:	d908      	bls.n	8001fd6 <_free_r+0x42>
 8001fc4:	6820      	ldr	r0, [r4, #0]
 8001fc6:	1821      	adds	r1, r4, r0
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	bf01      	itttt	eq
 8001fcc:	6819      	ldreq	r1, [r3, #0]
 8001fce:	685b      	ldreq	r3, [r3, #4]
 8001fd0:	1809      	addeq	r1, r1, r0
 8001fd2:	6021      	streq	r1, [r4, #0]
 8001fd4:	e7ed      	b.n	8001fb2 <_free_r+0x1e>
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	b10b      	cbz	r3, 8001fe0 <_free_r+0x4c>
 8001fdc:	42a3      	cmp	r3, r4
 8001fde:	d9fa      	bls.n	8001fd6 <_free_r+0x42>
 8001fe0:	6811      	ldr	r1, [r2, #0]
 8001fe2:	1850      	adds	r0, r2, r1
 8001fe4:	42a0      	cmp	r0, r4
 8001fe6:	d10b      	bne.n	8002000 <_free_r+0x6c>
 8001fe8:	6820      	ldr	r0, [r4, #0]
 8001fea:	4401      	add	r1, r0
 8001fec:	1850      	adds	r0, r2, r1
 8001fee:	4283      	cmp	r3, r0
 8001ff0:	6011      	str	r1, [r2, #0]
 8001ff2:	d1e0      	bne.n	8001fb6 <_free_r+0x22>
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4401      	add	r1, r0
 8001ffa:	6011      	str	r1, [r2, #0]
 8001ffc:	6053      	str	r3, [r2, #4]
 8001ffe:	e7da      	b.n	8001fb6 <_free_r+0x22>
 8002000:	d902      	bls.n	8002008 <_free_r+0x74>
 8002002:	230c      	movs	r3, #12
 8002004:	602b      	str	r3, [r5, #0]
 8002006:	e7d6      	b.n	8001fb6 <_free_r+0x22>
 8002008:	6820      	ldr	r0, [r4, #0]
 800200a:	1821      	adds	r1, r4, r0
 800200c:	428b      	cmp	r3, r1
 800200e:	bf01      	itttt	eq
 8002010:	6819      	ldreq	r1, [r3, #0]
 8002012:	685b      	ldreq	r3, [r3, #4]
 8002014:	1809      	addeq	r1, r1, r0
 8002016:	6021      	streq	r1, [r4, #0]
 8002018:	6063      	str	r3, [r4, #4]
 800201a:	6054      	str	r4, [r2, #4]
 800201c:	e7cb      	b.n	8001fb6 <_free_r+0x22>
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	200002ac 	.word	0x200002ac

08002024 <_read_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	2200      	movs	r2, #0
 800202e:	4d05      	ldr	r5, [pc, #20]	; (8002044 <_read_r+0x20>)
 8002030:	602a      	str	r2, [r5, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	f000 f867 	bl	8002106 <_read>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d102      	bne.n	8002042 <_read_r+0x1e>
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	b103      	cbz	r3, 8002042 <_read_r+0x1e>
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	bd38      	pop	{r3, r4, r5, pc}
 8002044:	200002b4 	.word	0x200002b4

08002048 <_fstat_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	2300      	movs	r3, #0
 800204c:	4d06      	ldr	r5, [pc, #24]	; (8002068 <_fstat_r+0x20>)
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	f000 f956 	bl	8002306 <_fstat>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d102      	bne.n	8002064 <_fstat_r+0x1c>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b103      	cbz	r3, 8002064 <_fstat_r+0x1c>
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	200002b4 	.word	0x200002b4

0800206c <_isatty_r>:
 800206c:	b538      	push	{r3, r4, r5, lr}
 800206e:	2300      	movs	r3, #0
 8002070:	4d05      	ldr	r5, [pc, #20]	; (8002088 <_isatty_r+0x1c>)
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	602b      	str	r3, [r5, #0]
 8002078:	f000 faac 	bl	80025d4 <_isatty>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d102      	bne.n	8002086 <_isatty_r+0x1a>
 8002080:	682b      	ldr	r3, [r5, #0]
 8002082:	b103      	cbz	r3, 8002086 <_isatty_r+0x1a>
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	200002b4 	.word	0x200002b4

0800208c <findslot>:
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <findslot+0x2c>)
 800208e:	b510      	push	{r4, lr}
 8002090:	4604      	mov	r4, r0
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	b118      	cbz	r0, 800209e <findslot+0x12>
 8002096:	6983      	ldr	r3, [r0, #24]
 8002098:	b90b      	cbnz	r3, 800209e <findslot+0x12>
 800209a:	f7ff f8d3 	bl	8001244 <__sinit>
 800209e:	2c13      	cmp	r4, #19
 80020a0:	d807      	bhi.n	80020b2 <findslot+0x26>
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <findslot+0x30>)
 80020a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80020a8:	3201      	adds	r2, #1
 80020aa:	d002      	beq.n	80020b2 <findslot+0x26>
 80020ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80020b0:	bd10      	pop	{r4, pc}
 80020b2:	2000      	movs	r0, #0
 80020b4:	e7fc      	b.n	80020b0 <findslot+0x24>
 80020b6:	bf00      	nop
 80020b8:	20000000 	.word	0x20000000
 80020bc:	200002c8 	.word	0x200002c8

080020c0 <error>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	4604      	mov	r4, r0
 80020c4:	f000 faa2 	bl	800260c <__errno>
 80020c8:	2613      	movs	r6, #19
 80020ca:	4605      	mov	r5, r0
 80020cc:	2700      	movs	r7, #0
 80020ce:	4630      	mov	r0, r6
 80020d0:	4639      	mov	r1, r7
 80020d2:	beab      	bkpt	0x00ab
 80020d4:	4606      	mov	r6, r0
 80020d6:	4620      	mov	r0, r4
 80020d8:	602e      	str	r6, [r5, #0]
 80020da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020dc <checkerror>:
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	d101      	bne.n	80020e4 <checkerror+0x8>
 80020e0:	f7ff bfee 	b.w	80020c0 <error>
 80020e4:	4770      	bx	lr

080020e6 <_swiread>:
 80020e6:	b530      	push	{r4, r5, lr}
 80020e8:	b085      	sub	sp, #20
 80020ea:	2406      	movs	r4, #6
 80020ec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80020f0:	9203      	str	r2, [sp, #12]
 80020f2:	ad01      	add	r5, sp, #4
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	beab      	bkpt	0x00ab
 80020fa:	4604      	mov	r4, r0
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ffed 	bl	80020dc <checkerror>
 8002102:	b005      	add	sp, #20
 8002104:	bd30      	pop	{r4, r5, pc}

08002106 <_read>:
 8002106:	b570      	push	{r4, r5, r6, lr}
 8002108:	460e      	mov	r6, r1
 800210a:	4615      	mov	r5, r2
 800210c:	f7ff ffbe 	bl	800208c <findslot>
 8002110:	4604      	mov	r4, r0
 8002112:	b930      	cbnz	r0, 8002122 <_read+0x1c>
 8002114:	f000 fa7a 	bl	800260c <__errno>
 8002118:	2309      	movs	r3, #9
 800211a:	6003      	str	r3, [r0, #0]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	462a      	mov	r2, r5
 8002124:	4631      	mov	r1, r6
 8002126:	6800      	ldr	r0, [r0, #0]
 8002128:	f7ff ffdd 	bl	80020e6 <_swiread>
 800212c:	1c43      	adds	r3, r0, #1
 800212e:	bf1f      	itttt	ne
 8002130:	6863      	ldrne	r3, [r4, #4]
 8002132:	1a28      	subne	r0, r5, r0
 8002134:	181b      	addne	r3, r3, r0
 8002136:	6063      	strne	r3, [r4, #4]
 8002138:	e7f2      	b.n	8002120 <_read+0x1a>

0800213a <_swilseek>:
 800213a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800213c:	460c      	mov	r4, r1
 800213e:	4616      	mov	r6, r2
 8002140:	f7ff ffa4 	bl	800208c <findslot>
 8002144:	4605      	mov	r5, r0
 8002146:	b940      	cbnz	r0, 800215a <_swilseek+0x20>
 8002148:	f000 fa60 	bl	800260c <__errno>
 800214c:	2309      	movs	r3, #9
 800214e:	6003      	str	r3, [r0, #0]
 8002150:	f04f 34ff 	mov.w	r4, #4294967295
 8002154:	4620      	mov	r0, r4
 8002156:	b003      	add	sp, #12
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800215a:	2e02      	cmp	r6, #2
 800215c:	d903      	bls.n	8002166 <_swilseek+0x2c>
 800215e:	f000 fa55 	bl	800260c <__errno>
 8002162:	2316      	movs	r3, #22
 8002164:	e7f3      	b.n	800214e <_swilseek+0x14>
 8002166:	2e01      	cmp	r6, #1
 8002168:	d112      	bne.n	8002190 <_swilseek+0x56>
 800216a:	6843      	ldr	r3, [r0, #4]
 800216c:	18e4      	adds	r4, r4, r3
 800216e:	d4f6      	bmi.n	800215e <_swilseek+0x24>
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	260a      	movs	r6, #10
 8002174:	466f      	mov	r7, sp
 8002176:	e9cd 3400 	strd	r3, r4, [sp]
 800217a:	4630      	mov	r0, r6
 800217c:	4639      	mov	r1, r7
 800217e:	beab      	bkpt	0x00ab
 8002180:	4606      	mov	r6, r0
 8002182:	4630      	mov	r0, r6
 8002184:	f7ff ffaa 	bl	80020dc <checkerror>
 8002188:	2800      	cmp	r0, #0
 800218a:	dbe1      	blt.n	8002150 <_swilseek+0x16>
 800218c:	606c      	str	r4, [r5, #4]
 800218e:	e7e1      	b.n	8002154 <_swilseek+0x1a>
 8002190:	2e02      	cmp	r6, #2
 8002192:	d1ed      	bne.n	8002170 <_swilseek+0x36>
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	260c      	movs	r6, #12
 8002198:	466f      	mov	r7, sp
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4630      	mov	r0, r6
 800219e:	4639      	mov	r1, r7
 80021a0:	beab      	bkpt	0x00ab
 80021a2:	4606      	mov	r6, r0
 80021a4:	4630      	mov	r0, r6
 80021a6:	f7ff ff99 	bl	80020dc <checkerror>
 80021aa:	1c43      	adds	r3, r0, #1
 80021ac:	d0d0      	beq.n	8002150 <_swilseek+0x16>
 80021ae:	4404      	add	r4, r0
 80021b0:	e7de      	b.n	8002170 <_swilseek+0x36>

080021b2 <_lseek>:
 80021b2:	f7ff bfc2 	b.w	800213a <_swilseek>

080021b6 <_swiwrite>:
 80021b6:	b530      	push	{r4, r5, lr}
 80021b8:	b085      	sub	sp, #20
 80021ba:	2405      	movs	r4, #5
 80021bc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80021c0:	9203      	str	r2, [sp, #12]
 80021c2:	ad01      	add	r5, sp, #4
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	beab      	bkpt	0x00ab
 80021ca:	4604      	mov	r4, r0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff ff85 	bl	80020dc <checkerror>
 80021d2:	b005      	add	sp, #20
 80021d4:	bd30      	pop	{r4, r5, pc}

080021d6 <_write>:
 80021d6:	b570      	push	{r4, r5, r6, lr}
 80021d8:	460e      	mov	r6, r1
 80021da:	4615      	mov	r5, r2
 80021dc:	f7ff ff56 	bl	800208c <findslot>
 80021e0:	4604      	mov	r4, r0
 80021e2:	b930      	cbnz	r0, 80021f2 <_write+0x1c>
 80021e4:	f000 fa12 	bl	800260c <__errno>
 80021e8:	2309      	movs	r3, #9
 80021ea:	6003      	str	r3, [r0, #0]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	462a      	mov	r2, r5
 80021f4:	4631      	mov	r1, r6
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f7ff ffdd 	bl	80021b6 <_swiwrite>
 80021fc:	1e03      	subs	r3, r0, #0
 80021fe:	dbf5      	blt.n	80021ec <_write+0x16>
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	1ae8      	subs	r0, r5, r3
 8002204:	4402      	add	r2, r0
 8002206:	42ab      	cmp	r3, r5
 8002208:	6062      	str	r2, [r4, #4]
 800220a:	d1f1      	bne.n	80021f0 <_write+0x1a>
 800220c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002210:	2000      	movs	r0, #0
 8002212:	f7ff bf55 	b.w	80020c0 <error>

08002216 <_swiclose>:
 8002216:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002218:	2402      	movs	r4, #2
 800221a:	9001      	str	r0, [sp, #4]
 800221c:	ad01      	add	r5, sp, #4
 800221e:	4620      	mov	r0, r4
 8002220:	4629      	mov	r1, r5
 8002222:	beab      	bkpt	0x00ab
 8002224:	4604      	mov	r4, r0
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ff58 	bl	80020dc <checkerror>
 800222c:	b003      	add	sp, #12
 800222e:	bd30      	pop	{r4, r5, pc}

08002230 <_close>:
 8002230:	b538      	push	{r3, r4, r5, lr}
 8002232:	4605      	mov	r5, r0
 8002234:	f7ff ff2a 	bl	800208c <findslot>
 8002238:	4604      	mov	r4, r0
 800223a:	b930      	cbnz	r0, 800224a <_close+0x1a>
 800223c:	f000 f9e6 	bl	800260c <__errno>
 8002240:	2309      	movs	r3, #9
 8002242:	6003      	str	r3, [r0, #0]
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	bd38      	pop	{r3, r4, r5, pc}
 800224a:	3d01      	subs	r5, #1
 800224c:	2d01      	cmp	r5, #1
 800224e:	d809      	bhi.n	8002264 <_close+0x34>
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <_close+0x48>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	429a      	cmp	r2, r3
 8002258:	d104      	bne.n	8002264 <_close+0x34>
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	6003      	str	r3, [r0, #0]
 8002260:	2000      	movs	r0, #0
 8002262:	e7f1      	b.n	8002248 <_close+0x18>
 8002264:	6820      	ldr	r0, [r4, #0]
 8002266:	f7ff ffd6 	bl	8002216 <_swiclose>
 800226a:	2800      	cmp	r0, #0
 800226c:	d1ec      	bne.n	8002248 <_close+0x18>
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	6023      	str	r3, [r4, #0]
 8002274:	e7e8      	b.n	8002248 <_close+0x18>
 8002276:	bf00      	nop
 8002278:	200002c8 	.word	0x200002c8

0800227c <_sbrk>:
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <_sbrk+0x38>)
 800227e:	4603      	mov	r3, r0
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	b510      	push	{r4, lr}
 8002284:	b909      	cbnz	r1, 800228a <_sbrk+0xe>
 8002286:	490c      	ldr	r1, [pc, #48]	; (80022b8 <_sbrk+0x3c>)
 8002288:	6011      	str	r1, [r2, #0]
 800228a:	4669      	mov	r1, sp
 800228c:	6810      	ldr	r0, [r2, #0]
 800228e:	4403      	add	r3, r0
 8002290:	428b      	cmp	r3, r1
 8002292:	d806      	bhi.n	80022a2 <_sbrk+0x26>
 8002294:	4909      	ldr	r1, [pc, #36]	; (80022bc <_sbrk+0x40>)
 8002296:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <_sbrk+0x44>)
 8002298:	6809      	ldr	r1, [r1, #0]
 800229a:	42a1      	cmp	r1, r4
 800229c:	d008      	beq.n	80022b0 <_sbrk+0x34>
 800229e:	428b      	cmp	r3, r1
 80022a0:	d906      	bls.n	80022b0 <_sbrk+0x34>
 80022a2:	f000 f9b3 	bl	800260c <__errno>
 80022a6:	230c      	movs	r3, #12
 80022a8:	6003      	str	r3, [r0, #0]
 80022aa:	f04f 30ff 	mov.w	r0, #4294967295
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e7fc      	b.n	80022ae <_sbrk+0x32>
 80022b4:	200002b8 	.word	0x200002b8
 80022b8:	20000368 	.word	0x20000368
 80022bc:	20000064 	.word	0x20000064
 80022c0:	cafedead 	.word	0xcafedead

080022c4 <_swistat>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	460c      	mov	r4, r1
 80022c8:	f7ff fee0 	bl	800208c <findslot>
 80022cc:	4605      	mov	r5, r0
 80022ce:	b930      	cbnz	r0, 80022de <_swistat+0x1a>
 80022d0:	f000 f99c 	bl	800260c <__errno>
 80022d4:	2309      	movs	r3, #9
 80022d6:	6003      	str	r3, [r0, #0]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	260c      	movs	r6, #12
 80022e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022e6:	6063      	str	r3, [r4, #4]
 80022e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ec:	64a3      	str	r3, [r4, #72]	; 0x48
 80022ee:	4630      	mov	r0, r6
 80022f0:	4629      	mov	r1, r5
 80022f2:	beab      	bkpt	0x00ab
 80022f4:	4605      	mov	r5, r0
 80022f6:	4628      	mov	r0, r5
 80022f8:	f7ff fef0 	bl	80020dc <checkerror>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	bf1c      	itt	ne
 8002300:	6120      	strne	r0, [r4, #16]
 8002302:	2000      	movne	r0, #0
 8002304:	e7ea      	b.n	80022dc <_swistat+0x18>

08002306 <_fstat>:
 8002306:	460b      	mov	r3, r1
 8002308:	b510      	push	{r4, lr}
 800230a:	2100      	movs	r1, #0
 800230c:	4604      	mov	r4, r0
 800230e:	2258      	movs	r2, #88	; 0x58
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe ff1f 	bl	8001154 <memset>
 8002316:	4601      	mov	r1, r0
 8002318:	4620      	mov	r0, r4
 800231a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800231e:	f7ff bfd1 	b.w	80022c4 <_swistat>

08002322 <_stat>:
 8002322:	b538      	push	{r3, r4, r5, lr}
 8002324:	460d      	mov	r5, r1
 8002326:	4604      	mov	r4, r0
 8002328:	2258      	movs	r2, #88	; 0x58
 800232a:	2100      	movs	r1, #0
 800232c:	4628      	mov	r0, r5
 800232e:	f7fe ff11 	bl	8001154 <memset>
 8002332:	4620      	mov	r0, r4
 8002334:	2100      	movs	r1, #0
 8002336:	f000 f811 	bl	800235c <_swiopen>
 800233a:	1c43      	adds	r3, r0, #1
 800233c:	4604      	mov	r4, r0
 800233e:	d00b      	beq.n	8002358 <_stat+0x36>
 8002340:	686b      	ldr	r3, [r5, #4]
 8002342:	4629      	mov	r1, r5
 8002344:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002348:	606b      	str	r3, [r5, #4]
 800234a:	f7ff ffbb 	bl	80022c4 <_swistat>
 800234e:	4605      	mov	r5, r0
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff ff6d 	bl	8002230 <_close>
 8002356:	462c      	mov	r4, r5
 8002358:	4620      	mov	r0, r4
 800235a:	bd38      	pop	{r3, r4, r5, pc}

0800235c <_swiopen>:
 800235c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002360:	4607      	mov	r7, r0
 8002362:	460e      	mov	r6, r1
 8002364:	2500      	movs	r5, #0
 8002366:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800240c <_swiopen+0xb0>
 800236a:	b097      	sub	sp, #92	; 0x5c
 800236c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002370:	1c61      	adds	r1, r4, #1
 8002372:	d037      	beq.n	80023e4 <_swiopen+0x88>
 8002374:	3501      	adds	r5, #1
 8002376:	2d14      	cmp	r5, #20
 8002378:	d1f8      	bne.n	800236c <_swiopen+0x10>
 800237a:	f000 f947 	bl	800260c <__errno>
 800237e:	2318      	movs	r3, #24
 8002380:	f04f 34ff 	mov.w	r4, #4294967295
 8002384:	6003      	str	r3, [r0, #0]
 8002386:	e03d      	b.n	8002404 <_swiopen+0xa8>
 8002388:	f240 6301 	movw	r3, #1537	; 0x601
 800238c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002390:	07b2      	lsls	r2, r6, #30
 8002392:	bf48      	it	mi
 8002394:	f044 0402 	orrmi.w	r4, r4, #2
 8002398:	421e      	tst	r6, r3
 800239a:	bf18      	it	ne
 800239c:	f044 0404 	orrne.w	r4, r4, #4
 80023a0:	0733      	lsls	r3, r6, #28
 80023a2:	bf48      	it	mi
 80023a4:	f024 0404 	bicmi.w	r4, r4, #4
 80023a8:	4638      	mov	r0, r7
 80023aa:	bf48      	it	mi
 80023ac:	f044 0408 	orrmi.w	r4, r4, #8
 80023b0:	9700      	str	r7, [sp, #0]
 80023b2:	f7fd fedd 	bl	8000170 <strlen>
 80023b6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80023ba:	2401      	movs	r4, #1
 80023bc:	4620      	mov	r0, r4
 80023be:	4649      	mov	r1, r9
 80023c0:	beab      	bkpt	0x00ab
 80023c2:	4604      	mov	r4, r0
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	db08      	blt.n	80023da <_swiopen+0x7e>
 80023c8:	2300      	movs	r3, #0
 80023ca:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80023ce:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80023d2:	462c      	mov	r4, r5
 80023d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80023d8:	e014      	b.n	8002404 <_swiopen+0xa8>
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fe70 	bl	80020c0 <error>
 80023e0:	4604      	mov	r4, r0
 80023e2:	e00f      	b.n	8002404 <_swiopen+0xa8>
 80023e4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80023e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80023ec:	46e9      	mov	r9, sp
 80023ee:	d1cb      	bne.n	8002388 <_swiopen+0x2c>
 80023f0:	4649      	mov	r1, r9
 80023f2:	4638      	mov	r0, r7
 80023f4:	f7ff ff95 	bl	8002322 <_stat>
 80023f8:	3001      	adds	r0, #1
 80023fa:	d0c5      	beq.n	8002388 <_swiopen+0x2c>
 80023fc:	f000 f906 	bl	800260c <__errno>
 8002400:	2311      	movs	r3, #17
 8002402:	6003      	str	r3, [r0, #0]
 8002404:	4620      	mov	r0, r4
 8002406:	b017      	add	sp, #92	; 0x5c
 8002408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800240c:	200002c8 	.word	0x200002c8

08002410 <_get_semihosting_exts>:
 8002410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002414:	4606      	mov	r6, r0
 8002416:	460f      	mov	r7, r1
 8002418:	482a      	ldr	r0, [pc, #168]	; (80024c4 <_get_semihosting_exts+0xb4>)
 800241a:	2100      	movs	r1, #0
 800241c:	4615      	mov	r5, r2
 800241e:	f7ff ff9d 	bl	800235c <_swiopen>
 8002422:	4604      	mov	r4, r0
 8002424:	462a      	mov	r2, r5
 8002426:	2100      	movs	r1, #0
 8002428:	4630      	mov	r0, r6
 800242a:	f7fe fe93 	bl	8001154 <memset>
 800242e:	1c63      	adds	r3, r4, #1
 8002430:	d016      	beq.n	8002460 <_get_semihosting_exts+0x50>
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe2a 	bl	800208c <findslot>
 8002438:	f04f 080c 	mov.w	r8, #12
 800243c:	4681      	mov	r9, r0
 800243e:	4640      	mov	r0, r8
 8002440:	4649      	mov	r1, r9
 8002442:	beab      	bkpt	0x00ab
 8002444:	4680      	mov	r8, r0
 8002446:	4640      	mov	r0, r8
 8002448:	f7ff fe48 	bl	80020dc <checkerror>
 800244c:	2803      	cmp	r0, #3
 800244e:	dd02      	ble.n	8002456 <_get_semihosting_exts+0x46>
 8002450:	1ec3      	subs	r3, r0, #3
 8002452:	42ab      	cmp	r3, r5
 8002454:	dc08      	bgt.n	8002468 <_get_semihosting_exts+0x58>
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff feea 	bl	8002230 <_close>
 800245c:	f04f 34ff 	mov.w	r4, #4294967295
 8002460:	4620      	mov	r0, r4
 8002462:	b003      	add	sp, #12
 8002464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002468:	2204      	movs	r2, #4
 800246a:	4620      	mov	r0, r4
 800246c:	eb0d 0102 	add.w	r1, sp, r2
 8002470:	f7ff fe49 	bl	8002106 <_read>
 8002474:	2803      	cmp	r0, #3
 8002476:	ddee      	ble.n	8002456 <_get_semihosting_exts+0x46>
 8002478:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800247c:	2b53      	cmp	r3, #83	; 0x53
 800247e:	d1ea      	bne.n	8002456 <_get_semihosting_exts+0x46>
 8002480:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002484:	2b48      	cmp	r3, #72	; 0x48
 8002486:	d1e6      	bne.n	8002456 <_get_semihosting_exts+0x46>
 8002488:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800248c:	2b46      	cmp	r3, #70	; 0x46
 800248e:	d1e2      	bne.n	8002456 <_get_semihosting_exts+0x46>
 8002490:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002494:	2b42      	cmp	r3, #66	; 0x42
 8002496:	d1de      	bne.n	8002456 <_get_semihosting_exts+0x46>
 8002498:	2201      	movs	r2, #1
 800249a:	4639      	mov	r1, r7
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff fe4c 	bl	800213a <_swilseek>
 80024a2:	2800      	cmp	r0, #0
 80024a4:	dbd7      	blt.n	8002456 <_get_semihosting_exts+0x46>
 80024a6:	462a      	mov	r2, r5
 80024a8:	4631      	mov	r1, r6
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7ff fe2b 	bl	8002106 <_read>
 80024b0:	4605      	mov	r5, r0
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7ff febc 	bl	8002230 <_close>
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7ff fe0f 	bl	80020dc <checkerror>
 80024be:	4604      	mov	r4, r0
 80024c0:	e7ce      	b.n	8002460 <_get_semihosting_exts+0x50>
 80024c2:	bf00      	nop
 80024c4:	080026d7 	.word	0x080026d7

080024c8 <initialise_semihosting_exts>:
 80024c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ca:	2100      	movs	r1, #0
 80024cc:	2201      	movs	r2, #1
 80024ce:	4d09      	ldr	r5, [pc, #36]	; (80024f4 <initialise_semihosting_exts+0x2c>)
 80024d0:	4c09      	ldr	r4, [pc, #36]	; (80024f8 <initialise_semihosting_exts+0x30>)
 80024d2:	a801      	add	r0, sp, #4
 80024d4:	6029      	str	r1, [r5, #0]
 80024d6:	6022      	str	r2, [r4, #0]
 80024d8:	f7ff ff9a 	bl	8002410 <_get_semihosting_exts>
 80024dc:	2800      	cmp	r0, #0
 80024de:	dd07      	ble.n	80024f0 <initialise_semihosting_exts+0x28>
 80024e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024e4:	f003 0201 	and.w	r2, r3, #1
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	602a      	str	r2, [r5, #0]
 80024ee:	6023      	str	r3, [r4, #0]
 80024f0:	b003      	add	sp, #12
 80024f2:	bd30      	pop	{r4, r5, pc}
 80024f4:	20000068 	.word	0x20000068
 80024f8:	2000006c 	.word	0x2000006c

080024fc <_has_ext_stdout_stderr>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4c04      	ldr	r4, [pc, #16]	; (8002510 <_has_ext_stdout_stderr+0x14>)
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	da01      	bge.n	800250a <_has_ext_stdout_stderr+0xe>
 8002506:	f7ff ffdf 	bl	80024c8 <initialise_semihosting_exts>
 800250a:	6820      	ldr	r0, [r4, #0]
 800250c:	bd10      	pop	{r4, pc}
 800250e:	bf00      	nop
 8002510:	2000006c 	.word	0x2000006c

08002514 <initialise_monitor_handles>:
 8002514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002518:	2303      	movs	r3, #3
 800251a:	2400      	movs	r4, #0
 800251c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80025c0 <initialise_monitor_handles+0xac>
 8002520:	b085      	sub	sp, #20
 8002522:	f8cd 9004 	str.w	r9, [sp, #4]
 8002526:	af01      	add	r7, sp, #4
 8002528:	9303      	str	r3, [sp, #12]
 800252a:	2501      	movs	r5, #1
 800252c:	9402      	str	r4, [sp, #8]
 800252e:	4628      	mov	r0, r5
 8002530:	4639      	mov	r1, r7
 8002532:	beab      	bkpt	0x00ab
 8002534:	4605      	mov	r5, r0
 8002536:	f04f 32ff 	mov.w	r2, #4294967295
 800253a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80025c4 <initialise_monitor_handles+0xb0>
 800253e:	4623      	mov	r3, r4
 8002540:	4c21      	ldr	r4, [pc, #132]	; (80025c8 <initialise_monitor_handles+0xb4>)
 8002542:	f8c8 5000 	str.w	r5, [r8]
 8002546:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800254a:	3301      	adds	r3, #1
 800254c:	2b14      	cmp	r3, #20
 800254e:	d1fa      	bne.n	8002546 <initialise_monitor_handles+0x32>
 8002550:	f7ff ffd4 	bl	80024fc <_has_ext_stdout_stderr>
 8002554:	4d1d      	ldr	r5, [pc, #116]	; (80025cc <initialise_monitor_handles+0xb8>)
 8002556:	b1d0      	cbz	r0, 800258e <initialise_monitor_handles+0x7a>
 8002558:	f04f 0a03 	mov.w	sl, #3
 800255c:	2304      	movs	r3, #4
 800255e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002562:	2601      	movs	r6, #1
 8002564:	f8cd a00c 	str.w	sl, [sp, #12]
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	4630      	mov	r0, r6
 800256c:	4639      	mov	r1, r7
 800256e:	beab      	bkpt	0x00ab
 8002570:	4683      	mov	fp, r0
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <initialise_monitor_handles+0xbc>)
 8002574:	f8cd 9004 	str.w	r9, [sp, #4]
 8002578:	f8c3 b000 	str.w	fp, [r3]
 800257c:	2308      	movs	r3, #8
 800257e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	4630      	mov	r0, r6
 8002586:	4639      	mov	r1, r7
 8002588:	beab      	bkpt	0x00ab
 800258a:	4606      	mov	r6, r0
 800258c:	602e      	str	r6, [r5, #0]
 800258e:	2600      	movs	r6, #0
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	6066      	str	r6, [r4, #4]
 8002594:	3301      	adds	r3, #1
 8002596:	bf02      	ittt	eq
 8002598:	4b0d      	ldreq	r3, [pc, #52]	; (80025d0 <initialise_monitor_handles+0xbc>)
 800259a:	681b      	ldreq	r3, [r3, #0]
 800259c:	602b      	streq	r3, [r5, #0]
 800259e:	f8d8 3000 	ldr.w	r3, [r8]
 80025a2:	6023      	str	r3, [r4, #0]
 80025a4:	f7ff ffaa 	bl	80024fc <_has_ext_stdout_stderr>
 80025a8:	b130      	cbz	r0, 80025b8 <initialise_monitor_handles+0xa4>
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <initialise_monitor_handles+0xbc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80025b2:	682b      	ldr	r3, [r5, #0]
 80025b4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80025b8:	b005      	add	sp, #20
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025be:	bf00      	nop
 80025c0:	080026ed 	.word	0x080026ed
 80025c4:	200002c0 	.word	0x200002c0
 80025c8:	200002c8 	.word	0x200002c8
 80025cc:	200002bc 	.word	0x200002bc
 80025d0:	200002c4 	.word	0x200002c4

080025d4 <_isatty>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	f7ff fd59 	bl	800208c <findslot>
 80025da:	2509      	movs	r5, #9
 80025dc:	4604      	mov	r4, r0
 80025de:	b920      	cbnz	r0, 80025ea <_isatty+0x16>
 80025e0:	f000 f814 	bl	800260c <__errno>
 80025e4:	6005      	str	r5, [r0, #0]
 80025e6:	4620      	mov	r0, r4
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	4628      	mov	r0, r5
 80025ec:	4621      	mov	r1, r4
 80025ee:	beab      	bkpt	0x00ab
 80025f0:	4604      	mov	r4, r0
 80025f2:	2c01      	cmp	r4, #1
 80025f4:	d0f7      	beq.n	80025e6 <_isatty+0x12>
 80025f6:	f000 f809 	bl	800260c <__errno>
 80025fa:	2400      	movs	r4, #0
 80025fc:	4605      	mov	r5, r0
 80025fe:	2613      	movs	r6, #19
 8002600:	4630      	mov	r0, r6
 8002602:	4621      	mov	r1, r4
 8002604:	beab      	bkpt	0x00ab
 8002606:	4606      	mov	r6, r0
 8002608:	602e      	str	r6, [r5, #0]
 800260a:	e7ec      	b.n	80025e6 <_isatty+0x12>

0800260c <__errno>:
 800260c:	4b01      	ldr	r3, [pc, #4]	; (8002614 <__errno+0x8>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000000 	.word	0x20000000

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
