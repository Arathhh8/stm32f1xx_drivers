
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e8  080007f0  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007e8  080007e8  000107f0  2**0
                  CONTENTS
  4 .ARM          00000000  080007e8  080007e8  000107f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e8  080007f0  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ec  080007ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007f0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000832  00000000  00000000  00010819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025e  00000000  00000000  0001104b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000112b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00011368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000138f  00000000  00000000  000113f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e99  00000000  00000000  00012787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000522d  00000000  00000000  00013620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001884d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  000188a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007d0 	.word	0x080007d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007d0 	.word	0x080007d0

08000170 <delay>:
 *      Author: arath
 */

#include"stm32f103xx.h"

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0003d08f 	.word	0x0003d08f

0800019c <main>:

int main(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GpioBtn;

	GpioLed.pGPIOx = GPIOB;
 80001a2:	4b1a      	ldr	r3, [pc, #104]	; (800020c <main+0x70>)
 80001a4:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 80001aa:	2300      	movs	r3, #0
 80001ac:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 80001ae:	2303      	movs	r3, #3
 80001b0:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 80001b2:	2300      	movs	r3, #0
 80001b4:	753b      	strb	r3, [r7, #20]
	//GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PP;

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80001b6:	2101      	movs	r1, #1
 80001b8:	4814      	ldr	r0, [pc, #80]	; (800020c <main+0x70>)
 80001ba:	f000 f855 	bl	8000268 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f908 	bl	80003d8 <GPIO_Init>

	GpioBtn.pGPIOx = GPIOA;
 80001c8:	4b11      	ldr	r3, [pc, #68]	; (8000210 <main+0x74>)
 80001ca:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 80001d0:	2302      	movs	r3, #2
 80001d2:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = NO_CONFIG;
 80001d8:	2307      	movs	r3, #7
 80001da:	753b      	strb	r3, [r7, #20]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001dc:	2301      	movs	r3, #1
 80001de:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 80001e0:	2101      	movs	r1, #1
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <main+0x74>)
 80001e4:	f000 f840 	bl	8000268 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 80001e8:	463b      	mov	r3, r7
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8f4 	bl	80003d8 <GPIO_Init>

	while(1){
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == LOW){
 80001f0:	2100      	movs	r1, #0
 80001f2:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x74>)
 80001f4:	f000 fa9e 	bl	8000734 <GPIO_ReadFromInputPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f8      	bne.n	80001f0 <main+0x54>
			delay();
 80001fe:	f7ff ffb7 	bl	8000170 <delay>
			GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_0);
 8000202:	2100      	movs	r1, #0
 8000204:	4801      	ldr	r0, [pc, #4]	; (800020c <main+0x70>)
 8000206:	f000 faaa 	bl	800075e <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == LOW){
 800020a:	e7f1      	b.n	80001f0 <main+0x54>
 800020c:	40010c00 	.word	0x40010c00
 8000210:	40010800 	.word	0x40010800

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	; (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 faa1 	bl	8000788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f7ff ffa9 	bl	800019c <main>

0800024a <LoopForever>:

LoopForever:
    b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000258:	080007f0 	.word	0x080007f0
  ldr r2, =_sbss
 800025c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000260:	2000001c 	.word	0x2000001c

08000264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_2_IRQHandler>
	...

08000268 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	460b      	mov	r3, r1
 8000272:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	2b01      	cmp	r3, #1
 8000278:	f040 8099 	bne.w	80003ae <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a4e      	ldr	r2, [pc, #312]	; (80003b8 <GPIO_PeriClockControl+0x150>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d106      	bne.n	8000292 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000284:	4b4d      	ldr	r3, [pc, #308]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a4c      	ldr	r2, [pc, #304]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000290:	e08d      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a4a      	ldr	r2, [pc, #296]	; (80003c0 <GPIO_PeriClockControl+0x158>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 800029a:	4b48      	ldr	r3, [pc, #288]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a47      	ldr	r2, [pc, #284]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002a0:	f043 0308 	orr.w	r3, r3, #8
 80002a4:	6193      	str	r3, [r2, #24]
}
 80002a6:	e082      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a46      	ldr	r2, [pc, #280]	; (80003c4 <GPIO_PeriClockControl+0x15c>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 80002b0:	4b42      	ldr	r3, [pc, #264]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a41      	ldr	r2, [pc, #260]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
}
 80002bc:	e077      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <GPIO_PeriClockControl+0x160>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 80002c6:	4b3d      	ldr	r3, [pc, #244]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a3c      	ldr	r2, [pc, #240]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6193      	str	r3, [r2, #24]
}
 80002d2:	e06c      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a3d      	ldr	r2, [pc, #244]	; (80003cc <GPIO_PeriClockControl+0x164>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 80002dc:	4b37      	ldr	r3, [pc, #220]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a36      	ldr	r2, [pc, #216]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e6:	6193      	str	r3, [r2, #24]
}
 80002e8:	e061      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a38      	ldr	r2, [pc, #224]	; (80003d0 <GPIO_PeriClockControl+0x168>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80002f2:	4b32      	ldr	r3, [pc, #200]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a31      	ldr	r2, [pc, #196]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80002f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fc:	6193      	str	r3, [r2, #24]
}
 80002fe:	e056      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a34      	ldr	r2, [pc, #208]	; (80003d4 <GPIO_PeriClockControl+0x16c>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800030e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000312:	6193      	str	r3, [r2, #24]
}
 8000314:	e04b      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <GPIO_PeriClockControl+0x150>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a26      	ldr	r2, [pc, #152]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000324:	f023 0304 	bic.w	r3, r3, #4
 8000328:	6193      	str	r3, [r2, #24]
}
 800032a:	e040      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a24      	ldr	r2, [pc, #144]	; (80003c0 <GPIO_PeriClockControl+0x158>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a20      	ldr	r2, [pc, #128]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800033a:	f023 0308 	bic.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
}
 8000340:	e035      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <GPIO_PeriClockControl+0x15c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000350:	f023 0310 	bic.w	r3, r3, #16
 8000354:	6193      	str	r3, [r2, #24]
}
 8000356:	e02a      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a1b      	ldr	r2, [pc, #108]	; (80003c8 <GPIO_PeriClockControl+0x160>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a15      	ldr	r2, [pc, #84]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000366:	f023 0320 	bic.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
}
 800036c:	e01f      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <GPIO_PeriClockControl+0x164>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800037c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000380:	6193      	str	r3, [r2, #24]
}
 8000382:	e014      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <GPIO_PeriClockControl+0x168>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <GPIO_PeriClockControl+0x154>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <GPIO_PeriClockControl+0x154>)
 8000392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000396:	6193      	str	r3, [r2, #24]
}
 8000398:	e009      	b.n	80003ae <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <GPIO_PeriClockControl+0x16c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d105      	bne.n	80003ae <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a05      	ldr	r2, [pc, #20]	; (80003bc <GPIO_PeriClockControl+0x154>)
 80003a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003ac:	6193      	str	r3, [r2, #24]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40010800 	.word	0x40010800
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	40011000 	.word	0x40011000
 80003c8:	40011400 	.word	0x40011400
 80003cc:	40011800 	.word	0x40011800
 80003d0:	40011c00 	.word	0x40011c00
 80003d4:	40012000 	.word	0x40012000

080003d8 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d820      	bhi.n	800042e <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	799b      	ldrb	r3, [r3, #6]
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	2103      	movs	r1, #3
 800040c:	fa01 f303 	lsl.w	r3, r1, r3
 8000410:	43db      	mvns	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	400a      	ands	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6819      	ldr	r1, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	e020      	b.n	8000470 <GPIO_Init+0x98>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	799b      	ldrb	r3, [r3, #6]
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	791b      	ldrb	r3, [r3, #4]
 8000438:	3b08      	subs	r3, #8
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	685a      	ldr	r2, [r3, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6859      	ldr	r1, [r3, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	430a      	orrs	r2, r1
 800046e:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d84b      	bhi.n	8000514 <GPIO_Init+0x13c>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	2b07      	cmp	r3, #7
 8000482:	d822      	bhi.n	80004ca <GPIO_Init+0xf2>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	461a      	mov	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	3302      	adds	r3, #2
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	3302      	adds	r3, #2
 80004a6:	2103      	movs	r1, #3
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	43db      	mvns	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	400a      	ands	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6819      	ldr	r1, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	430a      	orrs	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	e0cd      	b.n	8000666 <GPIO_Init+0x28e>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	795b      	ldrb	r3, [r3, #5]
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	3b08      	subs	r3, #8
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	3302      	adds	r3, #2
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	3b08      	subs	r3, #8
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	3302      	adds	r3, #2
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	400a      	ands	r2, r1
 8000500:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6859      	ldr	r1, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	430a      	orrs	r2, r1
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	e0a8      	b.n	8000666 <GPIO_Init+0x28e>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b04      	cmp	r3, #4
 800051a:	d817      	bhi.n	800054c <GPIO_Init+0x174>
			// 1. Configure the FTSR (Falling trigger detection register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051c:	4b7b      	ldr	r3, [pc, #492]	; (800070c <GPIO_Init+0x334>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	4611      	mov	r1, r2
 800052c:	4a77      	ldr	r2, [pc, #476]	; (800070c <GPIO_Init+0x334>)
 800052e:	430b      	orrs	r3, r1
 8000530:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	4b76      	ldr	r3, [pc, #472]	; (800070c <GPIO_Init+0x334>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	43d2      	mvns	r2, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a71      	ldr	r2, [pc, #452]	; (800070c <GPIO_Init+0x334>)
 8000546:	400b      	ands	r3, r1
 8000548:	6093      	str	r3, [r2, #8]
 800054a:	e035      	b.n	80005b8 <GPIO_Init+0x1e0>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b05      	cmp	r3, #5
 8000552:	d817      	bhi.n	8000584 <GPIO_Init+0x1ac>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b6d      	ldr	r3, [pc, #436]	; (800070c <GPIO_Init+0x334>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a69      	ldr	r2, [pc, #420]	; (800070c <GPIO_Init+0x334>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b68      	ldr	r3, [pc, #416]	; (800070c <GPIO_Init+0x334>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a63      	ldr	r2, [pc, #396]	; (800070c <GPIO_Init+0x334>)
 800057e:	400b      	ands	r3, r1
 8000580:	60d3      	str	r3, [r2, #12]
 8000582:	e019      	b.n	80005b8 <GPIO_Init+0x1e0>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d815      	bhi.n	80005b8 <GPIO_Init+0x1e0>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b5f      	ldr	r3, [pc, #380]	; (800070c <GPIO_Init+0x334>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a5b      	ldr	r2, [pc, #364]	; (800070c <GPIO_Init+0x334>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b5a      	ldr	r3, [pc, #360]	; (800070c <GPIO_Init+0x334>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a56      	ldr	r2, [pc, #344]	; (800070c <GPIO_Init+0x334>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	f003 0303 	and.w	r3, r3, #3
 80005c8:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a50      	ldr	r2, [pc, #320]	; (8000710 <GPIO_Init+0x338>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d02b      	beq.n	800062c <GPIO_Init+0x254>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a4e      	ldr	r2, [pc, #312]	; (8000714 <GPIO_Init+0x33c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d024      	beq.n	8000628 <GPIO_Init+0x250>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a4d      	ldr	r2, [pc, #308]	; (8000718 <GPIO_Init+0x340>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d01d      	beq.n	8000624 <GPIO_Init+0x24c>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a4b      	ldr	r2, [pc, #300]	; (800071c <GPIO_Init+0x344>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d016      	beq.n	8000620 <GPIO_Init+0x248>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a4a      	ldr	r2, [pc, #296]	; (8000720 <GPIO_Init+0x348>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00f      	beq.n	800061c <GPIO_Init+0x244>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a48      	ldr	r2, [pc, #288]	; (8000724 <GPIO_Init+0x34c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d008      	beq.n	8000618 <GPIO_Init+0x240>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a47      	ldr	r2, [pc, #284]	; (8000728 <GPIO_Init+0x350>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d101      	bne.n	8000614 <GPIO_Init+0x23c>
 8000610:	2306      	movs	r3, #6
 8000612:	e00c      	b.n	800062e <GPIO_Init+0x256>
 8000614:	2300      	movs	r3, #0
 8000616:	e00a      	b.n	800062e <GPIO_Init+0x256>
 8000618:	2305      	movs	r3, #5
 800061a:	e008      	b.n	800062e <GPIO_Init+0x256>
 800061c:	2304      	movs	r3, #4
 800061e:	e006      	b.n	800062e <GPIO_Init+0x256>
 8000620:	2303      	movs	r3, #3
 8000622:	e004      	b.n	800062e <GPIO_Init+0x256>
 8000624:	2302      	movs	r3, #2
 8000626:	e002      	b.n	800062e <GPIO_Init+0x256>
 8000628:	2301      	movs	r3, #1
 800062a:	e000      	b.n	800062e <GPIO_Init+0x256>
 800062c:	2300      	movs	r3, #0
 800062e:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <GPIO_Init+0x354>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a3d      	ldr	r2, [pc, #244]	; (800072c <GPIO_Init+0x354>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 800063c:	7a7a      	ldrb	r2, [r7, #9]
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	fa02 f103 	lsl.w	r1, r2, r3
 8000646:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <GPIO_Init+0x358>)
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	3302      	adds	r3, #2
 800064c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <GPIO_Init+0x334>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	7912      	ldrb	r2, [r2, #4]
 8000658:	4611      	mov	r1, r2
 800065a:	2201      	movs	r2, #1
 800065c:	408a      	lsls	r2, r1
 800065e:	4611      	mov	r1, r2
 8000660:	4a2a      	ldr	r2, [pc, #168]	; (800070c <GPIO_Init+0x334>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	79db      	ldrb	r3, [r3, #7]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68d9      	ldr	r1, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d11d      	bne.n	80006ee <GPIO_Init+0x316>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2301      	movs	r3, #1
 80006d0:	408b      	lsls	r3, r1
 80006d2:	43db      	mvns	r3, r3
 80006d4:	4619      	mov	r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68d9      	ldr	r1, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
	if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	bf8c      	ite	hi
 80006fa:	2301      	movhi	r3, #1
 80006fc:	2300      	movls	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	60fb      	str	r3, [r7, #12]
		// configure the alternate function registers
	}
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40010400 	.word	0x40010400
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40011800 	.word	0x40011800
 8000724:	40011c00 	.word	0x40011c00
 8000728:	40012000 	.word	0x40012000
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000

08000734 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689a      	ldr	r2, [r3, #8]
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	fa22 f303 	lsr.w	r3, r2, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
	return value;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <GPIO_ToggleOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	2101      	movs	r1, #1
 8000772:	fa01 f202 	lsl.w	r2, r1, r2
 8000776:	405a      	eors	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	60da      	str	r2, [r3, #12]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
	...

08000788 <__libc_init_array>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	2600      	movs	r6, #0
 800078c:	4d0c      	ldr	r5, [pc, #48]	; (80007c0 <__libc_init_array+0x38>)
 800078e:	4c0d      	ldr	r4, [pc, #52]	; (80007c4 <__libc_init_array+0x3c>)
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	42a6      	cmp	r6, r4
 8000796:	d109      	bne.n	80007ac <__libc_init_array+0x24>
 8000798:	f000 f81a 	bl	80007d0 <_init>
 800079c:	2600      	movs	r6, #0
 800079e:	4d0a      	ldr	r5, [pc, #40]	; (80007c8 <__libc_init_array+0x40>)
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <__libc_init_array+0x44>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	42a6      	cmp	r6, r4
 80007a8:	d105      	bne.n	80007b6 <__libc_init_array+0x2e>
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b0:	4798      	blx	r3
 80007b2:	3601      	adds	r6, #1
 80007b4:	e7ee      	b.n	8000794 <__libc_init_array+0xc>
 80007b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ba:	4798      	blx	r3
 80007bc:	3601      	adds	r6, #1
 80007be:	e7f2      	b.n	80007a6 <__libc_init_array+0x1e>
 80007c0:	080007e8 	.word	0x080007e8
 80007c4:	080007e8 	.word	0x080007e8
 80007c8:	080007e8 	.word	0x080007e8
 80007cc:	080007ec 	.word	0x080007ec

080007d0 <_init>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	bf00      	nop
 80007d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d6:	bc08      	pop	{r3}
 80007d8:	469e      	mov	lr, r3
 80007da:	4770      	bx	lr

080007dc <_fini>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	bf00      	nop
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr
