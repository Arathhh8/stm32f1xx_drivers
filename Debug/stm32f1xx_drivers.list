
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000900  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a30  08000a38  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a30  08000a30  00010a38  2**0
                  CONTENTS
  4 .ARM          00000000  08000a30  08000a30  00010a38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a30  08000a38  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a30  08000a30  00010a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a38  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008dd  00000000  00000000  00010a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000272  00000000  00000000  0001133e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  000115b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001423  00000000  00000000  00011718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f67  00000000  00000000  00012b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000540f  00000000  00000000  00013aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00018eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000268  00000000  00000000  00018f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a18 	.word	0x08000a18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a18 	.word	0x08000a18

08000170 <main>:

void delay(void){
	for(uint32_t i = 0; i < 500000/2; i++);
}

int main(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GpioBtn;

	GpioLed.pGPIOx = GPIOC;
 8000176:	4b1d      	ldr	r3, [pc, #116]	; (80001ec <main+0x7c>)
 8000178:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800017a:	230d      	movs	r3, #13
 800017c:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 800017e:	2300      	movs	r3, #0
 8000180:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_2;
 8000182:	2302      	movs	r3, #2
 8000184:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 8000186:	2300      	movs	r3, #0
 8000188:	753b      	strb	r3, [r7, #20]
	//GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PP;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 800018a:	2101      	movs	r1, #1
 800018c:	4817      	ldr	r0, [pc, #92]	; (80001ec <main+0x7c>)
 800018e:	f000 f869 	bl	8000264 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000192:	f107 030c 	add.w	r3, r7, #12
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f91c 	bl	80003d4 <GPIO_Init>

	GpioBtn.pGPIOx = GPIOB;
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <main+0x80>)
 800019e:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80001a0:	2309      	movs	r3, #9
 80001a2:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80001a4:	2304      	movs	r3, #4
 80001a6:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 80001a8:	2300      	movs	r3, #0
 80001aa:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = NO_CONFIG;
 80001ac:	2307      	movs	r3, #7
 80001ae:	753b      	strb	r3, [r7, #20]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001b0:	2301      	movs	r3, #1
 80001b2:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80001b4:	2101      	movs	r1, #1
 80001b6:	480e      	ldr	r0, [pc, #56]	; (80001f0 <main+0x80>)
 80001b8:	f000 f854 	bl	8000264 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 80001bc:	463b      	mov	r3, r7
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 f908 	bl	80003d4 <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_13, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	210d      	movs	r1, #13
 80001c8:	4808      	ldr	r0, [pc, #32]	; (80001ec <main+0x7c>)
 80001ca:	f000 faf9 	bl	80007c0 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_13, GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	210d      	movs	r1, #13
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <main+0x7c>)
 80001d4:	f000 faf4 	bl	80007c0 <GPIO_WriteToOutputPin>
	// IRQ Configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 80001d8:	210f      	movs	r1, #15
 80001da:	2017      	movs	r0, #23
 80001dc:	f000 fbaa 	bl	8000934 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 80001e0:	2101      	movs	r1, #1
 80001e2:	2017      	movs	r0, #23
 80001e4:	f000 fb24 	bl	8000830 <GPIO_IRQInterruptConfig>

	while(1){
 80001e8:	e7fe      	b.n	80001e8 <main+0x78>
 80001ea:	bf00      	nop
 80001ec:	40011000 	.word	0x40011000
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <EXTI9_5_IRQHandler>:

	return 0;
}


void EXTI9_5_IRQHandler(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(GPIO_PIN_NO_9); // clear the pending event from EXTI line
 80001f8:	2009      	movs	r0, #9
 80001fa:	f000 fbc9 	bl	8000990 <GPIO_IRQHandling>

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_13);
 80001fe:	210d      	movs	r1, #13
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <EXTI9_5_IRQHandler+0x18>)
 8000202:	f000 fb01 	bl	8000808 <GPIO_ToggleOutputPin>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40011000 	.word	0x40011000

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	; (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	; (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 fbc7 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ff95 	bl	8000170 <main>

08000246 <LoopForever>:

LoopForever:
    b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	08000a38 	.word	0x08000a38
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000270:	78fb      	ldrb	r3, [r7, #3]
 8000272:	2b01      	cmp	r3, #1
 8000274:	f040 8099 	bne.w	80003aa <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a4e      	ldr	r2, [pc, #312]	; (80003b4 <GPIO_PeriClockControl+0x150>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d106      	bne.n	800028e <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000280:	4b4d      	ldr	r3, [pc, #308]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a4c      	ldr	r2, [pc, #304]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 800028c:	e08d      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a4a      	ldr	r2, [pc, #296]	; (80003bc <GPIO_PeriClockControl+0x158>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000296:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a47      	ldr	r2, [pc, #284]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6193      	str	r3, [r2, #24]
}
 80002a2:	e082      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a46      	ldr	r2, [pc, #280]	; (80003c0 <GPIO_PeriClockControl+0x15c>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 80002ac:	4b42      	ldr	r3, [pc, #264]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a41      	ldr	r2, [pc, #260]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
}
 80002b8:	e077      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a41      	ldr	r2, [pc, #260]	; (80003c4 <GPIO_PeriClockControl+0x160>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 80002c2:	4b3d      	ldr	r3, [pc, #244]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a3c      	ldr	r2, [pc, #240]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	6193      	str	r3, [r2, #24]
}
 80002ce:	e06c      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a3d      	ldr	r2, [pc, #244]	; (80003c8 <GPIO_PeriClockControl+0x164>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 80002d8:	4b37      	ldr	r3, [pc, #220]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a36      	ldr	r2, [pc, #216]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e2:	6193      	str	r3, [r2, #24]
}
 80002e4:	e061      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a38      	ldr	r2, [pc, #224]	; (80003cc <GPIO_PeriClockControl+0x168>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 80002ee:	4b32      	ldr	r3, [pc, #200]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80002f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f8:	6193      	str	r3, [r2, #24]
}
 80002fa:	e056      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a34      	ldr	r2, [pc, #208]	; (80003d0 <GPIO_PeriClockControl+0x16c>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800030a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800030e:	6193      	str	r3, [r2, #24]
}
 8000310:	e04b      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <GPIO_PeriClockControl+0x150>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 800031a:	4b27      	ldr	r3, [pc, #156]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a26      	ldr	r2, [pc, #152]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000320:	f023 0304 	bic.w	r3, r3, #4
 8000324:	6193      	str	r3, [r2, #24]
}
 8000326:	e040      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a24      	ldr	r2, [pc, #144]	; (80003bc <GPIO_PeriClockControl+0x158>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a20      	ldr	r2, [pc, #128]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000336:	f023 0308 	bic.w	r3, r3, #8
 800033a:	6193      	str	r3, [r2, #24]
}
 800033c:	e035      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <GPIO_PeriClockControl+0x15c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 8000346:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800034c:	f023 0310 	bic.w	r3, r3, #16
 8000350:	6193      	str	r3, [r2, #24]
}
 8000352:	e02a      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <GPIO_PeriClockControl+0x160>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d106      	bne.n	800036a <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000362:	f023 0320 	bic.w	r3, r3, #32
 8000366:	6193      	str	r3, [r2, #24]
}
 8000368:	e01f      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <GPIO_PeriClockControl+0x164>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d106      	bne.n	8000380 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 8000378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800037c:	6193      	str	r3, [r2, #24]
}
 800037e:	e014      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a12      	ldr	r2, [pc, #72]	; (80003cc <GPIO_PeriClockControl+0x168>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d106      	bne.n	8000396 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 800038e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000392:	6193      	str	r3, [r2, #24]
}
 8000394:	e009      	b.n	80003aa <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <GPIO_PeriClockControl+0x16c>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d105      	bne.n	80003aa <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <GPIO_PeriClockControl+0x154>)
 80003a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003a8:	6193      	str	r3, [r2, #24]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40010800 	.word	0x40010800
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40011400 	.word	0x40011400
 80003c8:	40011800 	.word	0x40011800
 80003cc:	40011c00 	.word	0x40011c00
 80003d0:	40012000 	.word	0x40012000

080003d4 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d820      	bhi.n	800042a <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	799b      	ldrb	r3, [r3, #6]
 80003ec:	461a      	mov	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791b      	ldrb	r3, [r3, #4]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	fa02 f303 	lsl.w	r3, r2, r3
 80003f8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	2103      	movs	r1, #3
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	43db      	mvns	r3, r3
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6819      	ldr	r1, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	e020      	b.n	800046c <GPIO_Init+0x98>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	799b      	ldrb	r3, [r3, #6]
 800042e:	461a      	mov	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	3b08      	subs	r3, #8
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	685a      	ldr	r2, [r3, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	791b      	ldrb	r3, [r3, #4]
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	2103      	movs	r1, #3
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	4619      	mov	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	400a      	ands	r2, r1
 800045a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6859      	ldr	r1, [r3, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	430a      	orrs	r2, r1
 800046a:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d84b      	bhi.n	8000510 <GPIO_Init+0x13c>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d822      	bhi.n	80004c6 <GPIO_Init+0xf2>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	461a      	mov	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	3302      	adds	r3, #2
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	3302      	adds	r3, #2
 80004a2:	2103      	movs	r1, #3
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	400a      	ands	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6819      	ldr	r1, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	430a      	orrs	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e114      	b.n	80006f0 <GPIO_Init+0x31c>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	461a      	mov	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	3b08      	subs	r3, #8
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3302      	adds	r3, #2
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	685a      	ldr	r2, [r3, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	3b08      	subs	r3, #8
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	3302      	adds	r3, #2
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	430a      	orrs	r2, r1
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	e0ef      	b.n	80006f0 <GPIO_Init+0x31c>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b04      	cmp	r3, #4
 8000516:	d85e      	bhi.n	80005d6 <GPIO_Init+0x202>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d820      	bhi.n	8000562 <GPIO_Init+0x18e>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	3302      	adds	r3, #2
 8000528:	2202      	movs	r2, #2
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	3302      	adds	r3, #2
 800053e:	2103      	movs	r1, #3
 8000540:	fa01 f303 	lsl.w	r3, r1, r3
 8000544:	43db      	mvns	r3, r3
 8000546:	4619      	mov	r1, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	400a      	ands	r2, r1
 800054e:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e021      	b.n	80005a6 <GPIO_Init+0x1d2>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	3b08      	subs	r3, #8
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	3302      	adds	r3, #2
 800056c:	2202      	movs	r2, #2
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	3b08      	subs	r3, #8
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	3302      	adds	r3, #2
 8000584:	2103      	movs	r1, #3
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	400a      	ands	r2, r1
 8000594:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6859      	ldr	r1, [r3, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a6:	4b7c      	ldr	r3, [pc, #496]	; (8000798 <GPIO_Init+0x3c4>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7912      	ldrb	r2, [r2, #4]
 80005ae:	4611      	mov	r1, r2
 80005b0:	2201      	movs	r2, #1
 80005b2:	408a      	lsls	r2, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a78      	ldr	r2, [pc, #480]	; (8000798 <GPIO_Init+0x3c4>)
 80005b8:	430b      	orrs	r3, r1
 80005ba:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b76      	ldr	r3, [pc, #472]	; (8000798 <GPIO_Init+0x3c4>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	43d2      	mvns	r2, r2
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a72      	ldr	r2, [pc, #456]	; (8000798 <GPIO_Init+0x3c4>)
 80005d0:	400b      	ands	r3, r1
 80005d2:	6093      	str	r3, [r2, #8]
 80005d4:	e035      	b.n	8000642 <GPIO_Init+0x26e>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	795b      	ldrb	r3, [r3, #5]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d817      	bhi.n	800060e <GPIO_Init+0x23a>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	4b6e      	ldr	r3, [pc, #440]	; (8000798 <GPIO_Init+0x3c4>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7912      	ldrb	r2, [r2, #4]
 80005e6:	4611      	mov	r1, r2
 80005e8:	2201      	movs	r2, #1
 80005ea:	408a      	lsls	r2, r1
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a6a      	ldr	r2, [pc, #424]	; (8000798 <GPIO_Init+0x3c4>)
 80005f0:	430b      	orrs	r3, r1
 80005f2:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	4b68      	ldr	r3, [pc, #416]	; (8000798 <GPIO_Init+0x3c4>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	43d2      	mvns	r2, r2
 8000604:	4611      	mov	r1, r2
 8000606:	4a64      	ldr	r2, [pc, #400]	; (8000798 <GPIO_Init+0x3c4>)
 8000608:	400b      	ands	r3, r1
 800060a:	60d3      	str	r3, [r2, #12]
 800060c:	e019      	b.n	8000642 <GPIO_Init+0x26e>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	2b06      	cmp	r3, #6
 8000614:	d815      	bhi.n	8000642 <GPIO_Init+0x26e>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <GPIO_Init+0x3c4>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	7912      	ldrb	r2, [r2, #4]
 800061e:	4611      	mov	r1, r2
 8000620:	2201      	movs	r2, #1
 8000622:	408a      	lsls	r2, r1
 8000624:	4611      	mov	r1, r2
 8000626:	4a5c      	ldr	r2, [pc, #368]	; (8000798 <GPIO_Init+0x3c4>)
 8000628:	430b      	orrs	r3, r1
 800062a:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <GPIO_Init+0x3c4>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a56      	ldr	r2, [pc, #344]	; (8000798 <GPIO_Init+0x3c4>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a50      	ldr	r2, [pc, #320]	; (800079c <GPIO_Init+0x3c8>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d02b      	beq.n	80006b6 <GPIO_Init+0x2e2>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a4f      	ldr	r2, [pc, #316]	; (80007a0 <GPIO_Init+0x3cc>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d024      	beq.n	80006b2 <GPIO_Init+0x2de>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a4d      	ldr	r2, [pc, #308]	; (80007a4 <GPIO_Init+0x3d0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d01d      	beq.n	80006ae <GPIO_Init+0x2da>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a4c      	ldr	r2, [pc, #304]	; (80007a8 <GPIO_Init+0x3d4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d016      	beq.n	80006aa <GPIO_Init+0x2d6>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a4a      	ldr	r2, [pc, #296]	; (80007ac <GPIO_Init+0x3d8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d00f      	beq.n	80006a6 <GPIO_Init+0x2d2>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a49      	ldr	r2, [pc, #292]	; (80007b0 <GPIO_Init+0x3dc>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d008      	beq.n	80006a2 <GPIO_Init+0x2ce>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <GPIO_Init+0x3e0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <GPIO_Init+0x2ca>
 800069a:	2306      	movs	r3, #6
 800069c:	e00c      	b.n	80006b8 <GPIO_Init+0x2e4>
 800069e:	2300      	movs	r3, #0
 80006a0:	e00a      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006a2:	2305      	movs	r3, #5
 80006a4:	e008      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006a6:	2304      	movs	r3, #4
 80006a8:	e006      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e004      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <GPIO_Init+0x2e4>
 80006b6:	2300      	movs	r3, #0
 80006b8:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 80006ba:	4b3f      	ldr	r3, [pc, #252]	; (80007b8 <GPIO_Init+0x3e4>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a3e      	ldr	r2, [pc, #248]	; (80007b8 <GPIO_Init+0x3e4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 80006c6:	7a7a      	ldrb	r2, [r7, #9]
 80006c8:	7abb      	ldrb	r3, [r7, #10]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	fa02 f103 	lsl.w	r1, r2, r3
 80006d0:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <GPIO_Init+0x3e8>)
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	3302      	adds	r3, #2
 80006d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <GPIO_Init+0x3c4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7912      	ldrb	r2, [r2, #4]
 80006e2:	4611      	mov	r1, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	408a      	lsls	r2, r1
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <GPIO_Init+0x3c4>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	79db      	ldrb	r3, [r3, #7]
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	68da      	ldr	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	2301      	movs	r3, #1
 8000712:	408b      	lsls	r3, r1
 8000714:	43db      	mvns	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	400a      	ands	r2, r1
 800071e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68d9      	ldr	r1, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	430a      	orrs	r2, r1
 800072e:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7a1b      	ldrb	r3, [r3, #8]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d11d      	bne.n	8000778 <GPIO_Init+0x3a4>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7a1b      	ldrb	r3, [r3, #8]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	2301      	movs	r3, #1
 800075a:	408b      	lsls	r3, r1
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	795b      	ldrb	r3, [r3, #5]
 8000780:	2b01      	cmp	r3, #1
 8000782:	bf8c      	ite	hi
 8000784:	2301      	movhi	r3, #1
 8000786:	2300      	movls	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	60fb      	str	r3, [r7, #12]
		// configure the alternate function registers
	}
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40010400 	.word	0x40010400
 800079c:	40010800 	.word	0x40010800
 80007a0:	40010c00 	.word	0x40010c00
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40011400 	.word	0x40011400
 80007ac:	40011800 	.word	0x40011800
 80007b0:	40011c00 	.word	0x40011c00
 80007b4:	40012000 	.word	0x40012000
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010000 	.word	0x40010000

080007c0 <GPIO_WriteToOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 80007d0:	78bb      	ldrb	r3, [r7, #2]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d109      	bne.n	80007ea <GPIO_WriteToOutputPin+0x2a>
		// write 1 to the output data register at the bit field corresponding pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	60da      	str	r2, [r3, #12]
	}else{
		// write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80007e8:	e009      	b.n	80007fe <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	78fa      	ldrb	r2, [r7, #3]
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	401a      	ands	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60da      	str	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <GPIO_ToggleOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	78fa      	ldrb	r2, [r7, #3]
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	405a      	eors	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60da      	str	r2, [r3, #12]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <GPIO_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR Handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d133      	bne.n	80008ae <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b1f      	cmp	r3, #31
 800084a:	d80a      	bhi.n	8000862 <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <GPIO_IRQInterruptConfig+0xf0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <GPIO_IRQInterruptConfig+0xf0>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000860:	e059      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d90f      	bls.n	8000888 <GPIO_IRQInterruptConfig+0x58>
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b3f      	cmp	r3, #63	; 0x3f
 800086c:	d80c      	bhi.n	8000888 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <GPIO_IRQInterruptConfig+0xf4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	79fa      	ldrb	r2, [r7, #7]
 8000874:	f002 021f 	and.w	r2, r2, #31
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a28      	ldr	r2, [pc, #160]	; (8000924 <GPIO_IRQInterruptConfig+0xf4>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e046      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b3f      	cmp	r3, #63	; 0x3f
 800088c:	d943      	bls.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b5f      	cmp	r3, #95	; 0x5f
 8000892:	d840      	bhi.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER1 |= (1 << IRQNumber % 64);
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <GPIO_IRQInterruptConfig+0xf4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <GPIO_IRQInterruptConfig+0xf4>)
 80008a8:	430b      	orrs	r3, r1
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	e033      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b1f      	cmp	r3, #31
 80008b2:	d80a      	bhi.n	80008ca <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <GPIO_IRQInterruptConfig+0xf8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <GPIO_IRQInterruptConfig+0xf8>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	e025      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	d90f      	bls.n	80008f0 <GPIO_IRQInterruptConfig+0xc0>
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b3f      	cmp	r3, #63	; 0x3f
 80008d4:	d80c      	bhi.n	80008f0 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <GPIO_IRQInterruptConfig+0xfc>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	f002 021f 	and.w	r2, r2, #31
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <GPIO_IRQInterruptConfig+0xfc>)
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e012      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b3f      	cmp	r3, #63	; 0x3f
 80008f4:	d90f      	bls.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b5f      	cmp	r3, #95	; 0x5f
 80008fa:	d80c      	bhi.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <GPIO_IRQInterruptConfig+0x100>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <GPIO_IRQInterruptConfig+0x100>)
 8000910:	430b      	orrs	r3, r1
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	e7ff      	b.n	8000916 <GPIO_IRQInterruptConfig+0xe6>
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000e104 	.word	0xe000e104
 8000928:	e000e180 	.word	0xe000e180
 800092c:	e000e184 	.word	0xe000e184
 8000930:	e000e188 	.word	0xe000e188

08000934 <GPIO_IRQPriorityConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
	// 1. First lets find out the IPR register  (iprx = interrupt priority register)
	uint8_t iprx = IRQNumber / 4;
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3304      	adds	r3, #4
 800095a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000964:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	79b9      	ldrb	r1, [r7, #6]
 800096c:	7b7b      	ldrb	r3, [r7, #13]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	4619      	mov	r1, r3
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800097c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000980:	430a      	orrs	r2, r1
 8000982:	601a      	str	r2, [r3, #0]
	//*NVIC_PR_IPR5 |= (IRQPriority << shift_amount);
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <GPIO_IRQHandling+0x3c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	2101      	movs	r1, #1
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	4013      	ands	r3, r2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d009      	beq.n	80009c0 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR |= (1 << PinNumber);
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <GPIO_IRQHandling+0x3c>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <GPIO_IRQHandling+0x3c>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	6153      	str	r3, [r2, #20]
	}
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40010400 	.word	0x40010400

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	2600      	movs	r6, #0
 80009d4:	4d0c      	ldr	r5, [pc, #48]	; (8000a08 <__libc_init_array+0x38>)
 80009d6:	4c0d      	ldr	r4, [pc, #52]	; (8000a0c <__libc_init_array+0x3c>)
 80009d8:	1b64      	subs	r4, r4, r5
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	42a6      	cmp	r6, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	f000 f81a 	bl	8000a18 <_init>
 80009e4:	2600      	movs	r6, #0
 80009e6:	4d0a      	ldr	r5, [pc, #40]	; (8000a10 <__libc_init_array+0x40>)
 80009e8:	4c0a      	ldr	r4, [pc, #40]	; (8000a14 <__libc_init_array+0x44>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	42a6      	cmp	r6, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f8:	4798      	blx	r3
 80009fa:	3601      	adds	r6, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a02:	4798      	blx	r3
 8000a04:	3601      	adds	r6, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000a30 	.word	0x08000a30
 8000a0c:	08000a30 	.word	0x08000a30
 8000a10:	08000a30 	.word	0x08000a30
 8000a14:	08000a34 	.word	0x08000a34

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
