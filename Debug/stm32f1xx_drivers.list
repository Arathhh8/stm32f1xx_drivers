
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b6c  08002b6c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08002b6c  08002b6c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b6c  08002b6c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08002b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000098  08002c0c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08002c0c  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015a6  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000690  00000000  00000000  00021667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00021cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00021e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030c6  00000000  00000000  00021ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024df  00000000  00000000  000250b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b796  00000000  00000000  00027595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032d2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001198  00000000  00000000  00032d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000098 	.word	0x20000098
 800014c:	00000000 	.word	0x00000000
 8000150:	08002a04 	.word	0x08002a04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000009c 	.word	0x2000009c
 800016c:	08002a04 	.word	0x08002a04

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <USART3_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART3_Init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	usart3_handle.pUSARTx = USART3;
 8000184:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <USART3_Init+0x3c>)
 8000186:	4a0e      	ldr	r2, [pc, #56]	; (80001c0 <USART3_Init+0x40>)
 8000188:	601a      	str	r2, [r3, #0]
	usart3_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800018a:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <USART3_Init+0x3c>)
 800018c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000190:	609a      	str	r2, [r3, #8]
	usart3_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <USART3_Init+0x3c>)
 8000194:	2200      	movs	r2, #0
 8000196:	73da      	strb	r2, [r3, #15]
	usart3_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <USART3_Init+0x3c>)
 800019a:	2202      	movs	r2, #2
 800019c:	711a      	strb	r2, [r3, #4]
	usart3_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <USART3_Init+0x3c>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	731a      	strb	r2, [r3, #12]
	usart3_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <USART3_Init+0x3c>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	735a      	strb	r2, [r3, #13]
	usart3_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80001aa:	4b04      	ldr	r3, [pc, #16]	; (80001bc <USART3_Init+0x3c>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart3_handle);
 80001b0:	4802      	ldr	r0, [pc, #8]	; (80001bc <USART3_Init+0x3c>)
 80001b2:	f000 fd69 	bl	8000c88 <USART_Init>
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	200004b4 	.word	0x200004b4
 80001c0:	40004800 	.word	0x40004800

080001c4 <USART3_GPIOInit>:

void USART3_GPIOInit(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOB;
 80001ca:	4b0e      	ldr	r3, [pc, #56]	; (8000204 <USART3_GPIOInit+0x40>)
 80001cc:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 80001ce:	2302      	movs	r3, #2
 80001d0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 80001d2:	2300      	movs	r3, #0
 80001d4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001d6:	2301      	movs	r3, #1
 80001d8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 80001da:	2303      	movs	r3, #3
 80001dc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF_PP;
 80001de:	2302      	movs	r3, #2
 80001e0:	737b      	strb	r3, [r7, #13]

	// USART3 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80001e2:	230a      	movs	r3, #10
 80001e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f9c1 	bl	8000570 <GPIO_Init>

	// USART3 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 80001ee:	230b      	movs	r3, #11
 80001f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f9bb 	bl	8000570 <GPIO_Init>

}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010c00 	.word	0x40010c00

08000208 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <GPIO_ButtonInit+0x2c>)
 8000210:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000212:	2300      	movs	r3, #0
 8000214:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 8000216:	2302      	movs	r3, #2
 8000218:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 800021a:	2300      	movs	r3, #0
 800021c:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800021e:	2301      	movs	r3, #1
 8000220:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9a3 	bl	8000570 <GPIO_Init>
}
 800022a:	bf00      	nop
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40010800 	.word	0x40010800

08000238 <delay>:


void delay(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <delay+0x12>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <delay+0x28>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d9f8      	bls.n	8000244 <delay+0xc>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	0003d08f 	.word	0x0003d08f

08000264 <main>:
int main(void)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800026e:	f002 fb47 	bl	8002900 <initialise_monitor_handles>

	USART3_GPIOInit();
 8000272:	f7ff ffa7 	bl	80001c4 <USART3_GPIOInit>
    USART3_Init();
 8000276:	f7ff ff83 	bl	8000180 <USART3_Init>
    GPIO_ButtonInit();
 800027a:	f7ff ffc5 	bl	8000208 <GPIO_ButtonInit>

    USART_IRQInterruptConfig(IRQ_NO_USART3,ENABLE);
 800027e:	2101      	movs	r1, #1
 8000280:	2027      	movs	r0, #39	; 0x27
 8000282:	f000 fe9f 	bl	8000fc4 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART3,ENABLE);
 8000286:	2101      	movs	r1, #1
 8000288:	482f      	ldr	r0, [pc, #188]	; (8000348 <main+0xe4>)
 800028a:	f000 fe7f 	bl	8000f8c <USART_PeripheralControl>

    printf("Application is running\n");
 800028e:	482f      	ldr	r0, [pc, #188]	; (800034c <main+0xe8>)
 8000290:	f001 f96e 	bl	8001570 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000294:	bf00      	nop
 8000296:	2100      	movs	r1, #0
 8000298:	482d      	ldr	r0, [pc, #180]	; (8000350 <main+0xec>)
 800029a:	f000 fbab 	bl	80009f4 <GPIO_ReadFromInputPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1f8      	bne.n	8000296 <main+0x32>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002a4:	f7ff ffc8 	bl	8000238 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % NUM_DATA_TO_SEND;
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <main+0xf0>)
 80002ac:	fba3 1302 	umull	r1, r3, r3, r2
 80002b0:	0899      	lsrs	r1, r3, #2
 80002b2:	460b      	mov	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	440b      	add	r3, r1
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart3_handle,(uint8_t *)rx_buf,strlen(msg[cnt])) != USART_READY );
 80002bc:	bf00      	nop
 80002be:	4a26      	ldr	r2, [pc, #152]	; (8000358 <main+0xf4>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff52 	bl	8000170 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4922      	ldr	r1, [pc, #136]	; (800035c <main+0xf8>)
 80002d2:	4823      	ldr	r0, [pc, #140]	; (8000360 <main+0xfc>)
 80002d4:	f000 fdb1 	bl	8000e3a <USART_ReceiveDataIT>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1ef      	bne.n	80002be <main+0x5a>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart3_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80002de:	4a1e      	ldr	r2, [pc, #120]	; (8000358 <main+0xf4>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <main+0xf4>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ff3e 	bl	8000170 <strlen>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	4621      	mov	r1, r4
 80002fa:	4819      	ldr	r0, [pc, #100]	; (8000360 <main+0xfc>)
 80002fc:	f000 fd4f 	bl	8000d9e <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8000300:	4a15      	ldr	r2, [pc, #84]	; (8000358 <main+0xf4>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000308:	4619      	mov	r1, r3
 800030a:	4816      	ldr	r0, [pc, #88]	; (8000364 <main+0x100>)
 800030c:	f001 f8aa 	bl	8001464 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000310:	bf00      	nop
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <main+0x104>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d1fb      	bne.n	8000312 <main+0xae>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800031a:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <main+0xf4>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff24 	bl	8000170 <strlen>
 8000328:	4603      	mov	r3, r0
 800032a:	3301      	adds	r3, #1
 800032c:	4a0b      	ldr	r2, [pc, #44]	; (800035c <main+0xf8>)
 800032e:	2100      	movs	r1, #0
 8000330:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8000332:	490a      	ldr	r1, [pc, #40]	; (800035c <main+0xf8>)
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <main+0x108>)
 8000336:	f001 f895 	bl	8001464 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <main+0x104>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3301      	adds	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
		while( GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000346:	e7a5      	b.n	8000294 <main+0x30>
 8000348:	40004800 	.word	0x40004800
 800034c:	08002a78 	.word	0x08002a78
 8000350:	40010800 	.word	0x40010800
 8000354:	cccccccd 	.word	0xcccccccd
 8000358:	20000000 	.word	0x20000000
 800035c:	200000b4 	.word	0x200000b4
 8000360:	200004b4 	.word	0x200004b4
 8000364:	08002a90 	.word	0x08002a90
 8000368:	200004d8 	.word	0x200004d8
 800036c:	08002aa4 	.word	0x08002aa4

08000370 <USART3_IRQHandler>:
	return 0;
}


void USART3_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart3_handle);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <USART3_IRQHandler+0x10>)
 8000376:	f000 fea7 	bl	80010c8 <USART_IRQHandling>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200004b4 	.word	0x200004b4

08000384 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 8000396:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <USART_ApplicationEventCallback+0x24>)
 8000398:	2201      	movs	r2, #1
 800039a:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	200004d8 	.word	0x200004d8

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f001 f817 	bl	800140c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ff41 	bl	8000264 <main>

080003e2 <LoopForever>:

LoopForever:
    b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80003f0:	08002b74 	.word	0x08002b74
  ldr r2, =_sbss
 80003f4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80003f8:	20000598 	.word	0x20000598

080003fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_2_IRQHandler>
	...

08000400 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800040c:	78fb      	ldrb	r3, [r7, #3]
 800040e:	2b01      	cmp	r3, #1
 8000410:	f040 8099 	bne.w	8000546 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a4e      	ldr	r2, [pc, #312]	; (8000550 <GPIO_PeriClockControl+0x150>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 800041c:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a4c      	ldr	r2, [pc, #304]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000428:	e08d      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a4a      	ldr	r2, [pc, #296]	; (8000558 <GPIO_PeriClockControl+0x158>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000432:	4b48      	ldr	r3, [pc, #288]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a47      	ldr	r2, [pc, #284]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000438:	f043 0308 	orr.w	r3, r3, #8
 800043c:	6193      	str	r3, [r2, #24]
}
 800043e:	e082      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a46      	ldr	r2, [pc, #280]	; (800055c <GPIO_PeriClockControl+0x15c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000448:	4b42      	ldr	r3, [pc, #264]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6193      	str	r3, [r2, #24]
}
 8000454:	e077      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a41      	ldr	r2, [pc, #260]	; (8000560 <GPIO_PeriClockControl+0x160>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800045e:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a3c      	ldr	r2, [pc, #240]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000464:	f043 0320 	orr.w	r3, r3, #32
 8000468:	6193      	str	r3, [r2, #24]
}
 800046a:	e06c      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a3d      	ldr	r2, [pc, #244]	; (8000564 <GPIO_PeriClockControl+0x164>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000474:	4b37      	ldr	r3, [pc, #220]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a36      	ldr	r2, [pc, #216]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800047a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047e:	6193      	str	r3, [r2, #24]
}
 8000480:	e061      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a38      	ldr	r2, [pc, #224]	; (8000568 <GPIO_PeriClockControl+0x168>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a31      	ldr	r2, [pc, #196]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000494:	6193      	str	r3, [r2, #24]
}
 8000496:	e056      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a34      	ldr	r2, [pc, #208]	; (800056c <GPIO_PeriClockControl+0x16c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80004a0:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004aa:	6193      	str	r3, [r2, #24]
}
 80004ac:	e04b      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a27      	ldr	r2, [pc, #156]	; (8000550 <GPIO_PeriClockControl+0x150>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a26      	ldr	r2, [pc, #152]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004bc:	f023 0304 	bic.w	r3, r3, #4
 80004c0:	6193      	str	r3, [r2, #24]
}
 80004c2:	e040      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a24      	ldr	r2, [pc, #144]	; (8000558 <GPIO_PeriClockControl+0x158>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a20      	ldr	r2, [pc, #128]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004d2:	f023 0308 	bic.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
}
 80004d8:	e035      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a1f      	ldr	r2, [pc, #124]	; (800055c <GPIO_PeriClockControl+0x15c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004e8:	f023 0310 	bic.w	r3, r3, #16
 80004ec:	6193      	str	r3, [r2, #24]
}
 80004ee:	e02a      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <GPIO_PeriClockControl+0x160>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a15      	ldr	r2, [pc, #84]	; (8000554 <GPIO_PeriClockControl+0x154>)
 80004fe:	f023 0320 	bic.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
}
 8000504:	e01f      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <GPIO_PeriClockControl+0x164>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d106      	bne.n	800051c <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000518:	6193      	str	r3, [r2, #24]
}
 800051a:	e014      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <GPIO_PeriClockControl+0x168>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800052a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800052e:	6193      	str	r3, [r2, #24]
}
 8000530:	e009      	b.n	8000546 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <GPIO_PeriClockControl+0x16c>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d105      	bne.n	8000546 <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <GPIO_PeriClockControl+0x154>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a05      	ldr	r2, [pc, #20]	; (8000554 <GPIO_PeriClockControl+0x154>)
 8000540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000544:	6193      	str	r3, [r2, #24]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40010800 	.word	0x40010800
 8000554:	40021000 	.word	0x40021000
 8000558:	40010c00 	.word	0x40010c00
 800055c:	40011000 	.word	0x40011000
 8000560:	40011400 	.word	0x40011400
 8000564:	40011800 	.word	0x40011800
 8000568:	40011c00 	.word	0x40011c00
 800056c:	40012000 	.word	0x40012000

08000570 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff3c 	bl	8000400 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d820      	bhi.n	80005d2 <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6819      	ldr	r1, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e020      	b.n	8000614 <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	799b      	ldrb	r3, [r3, #6]
 80005d6:	461a      	mov	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	3b08      	subs	r3, #8
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	2103      	movs	r1, #3
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	400a      	ands	r2, r1
 8000602:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	6859      	ldr	r1, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	430a      	orrs	r2, r1
 8000612:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d84b      	bhi.n	80006b8 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	2b07      	cmp	r3, #7
 8000626:	d822      	bhi.n	800066e <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	795b      	ldrb	r3, [r3, #5]
 800062c:	461a      	mov	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	3302      	adds	r3, #2
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	3302      	adds	r3, #2
 800064a:	2103      	movs	r1, #3
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	400a      	ands	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6819      	ldr	r1, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	430a      	orrs	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	e114      	b.n	8000898 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	3b08      	subs	r3, #8
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	3302      	adds	r3, #2
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	3b08      	subs	r3, #8
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3302      	adds	r3, #2
 8000694:	2103      	movs	r1, #3
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	400a      	ands	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	6859      	ldr	r1, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	e0ef      	b.n	8000898 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	795b      	ldrb	r3, [r3, #5]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d85e      	bhi.n	800077e <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	2b07      	cmp	r3, #7
 80006c6:	d820      	bhi.n	800070a <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	2202      	movs	r2, #2
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	3302      	adds	r3, #2
 80006e6:	2103      	movs	r1, #3
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	400a      	ands	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6819      	ldr	r1, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	430a      	orrs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	e021      	b.n	800074e <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	3b08      	subs	r3, #8
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	3302      	adds	r3, #2
 8000714:	2202      	movs	r2, #2
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	3b08      	subs	r3, #8
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	3302      	adds	r3, #2
 800072c:	2103      	movs	r1, #3
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	430a      	orrs	r2, r1
 800074c:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074e:	4b8b      	ldr	r3, [pc, #556]	; (800097c <GPIO_Init+0x40c>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7912      	ldrb	r2, [r2, #4]
 8000756:	4611      	mov	r1, r2
 8000758:	2201      	movs	r2, #1
 800075a:	408a      	lsls	r2, r1
 800075c:	4611      	mov	r1, r2
 800075e:	4a87      	ldr	r2, [pc, #540]	; (800097c <GPIO_Init+0x40c>)
 8000760:	430b      	orrs	r3, r1
 8000762:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000764:	4b85      	ldr	r3, [pc, #532]	; (800097c <GPIO_Init+0x40c>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a81      	ldr	r2, [pc, #516]	; (800097c <GPIO_Init+0x40c>)
 8000778:	400b      	ands	r3, r1
 800077a:	6093      	str	r3, [r2, #8]
 800077c:	e035      	b.n	80007ea <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d817      	bhi.n	80007b6 <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000786:	4b7d      	ldr	r3, [pc, #500]	; (800097c <GPIO_Init+0x40c>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	7912      	ldrb	r2, [r2, #4]
 800078e:	4611      	mov	r1, r2
 8000790:	2201      	movs	r2, #1
 8000792:	408a      	lsls	r2, r1
 8000794:	4611      	mov	r1, r2
 8000796:	4a79      	ldr	r2, [pc, #484]	; (800097c <GPIO_Init+0x40c>)
 8000798:	430b      	orrs	r3, r1
 800079a:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800079c:	4b77      	ldr	r3, [pc, #476]	; (800097c <GPIO_Init+0x40c>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	7912      	ldrb	r2, [r2, #4]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a73      	ldr	r2, [pc, #460]	; (800097c <GPIO_Init+0x40c>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e019      	b.n	80007ea <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d815      	bhi.n	80007ea <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007be:	4b6f      	ldr	r3, [pc, #444]	; (800097c <GPIO_Init+0x40c>)
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7912      	ldrb	r2, [r2, #4]
 80007c6:	4611      	mov	r1, r2
 80007c8:	2201      	movs	r2, #1
 80007ca:	408a      	lsls	r2, r1
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a6b      	ldr	r2, [pc, #428]	; (800097c <GPIO_Init+0x40c>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d4:	4b69      	ldr	r3, [pc, #420]	; (800097c <GPIO_Init+0x40c>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	7912      	ldrb	r2, [r2, #4]
 80007dc:	4611      	mov	r1, r2
 80007de:	2201      	movs	r2, #1
 80007e0:	408a      	lsls	r2, r1
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a65      	ldr	r2, [pc, #404]	; (800097c <GPIO_Init+0x40c>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a5f      	ldr	r2, [pc, #380]	; (8000980 <GPIO_Init+0x410>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d02b      	beq.n	800085e <GPIO_Init+0x2ee>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a5e      	ldr	r2, [pc, #376]	; (8000984 <GPIO_Init+0x414>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d024      	beq.n	800085a <GPIO_Init+0x2ea>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a5c      	ldr	r2, [pc, #368]	; (8000988 <GPIO_Init+0x418>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d01d      	beq.n	8000856 <GPIO_Init+0x2e6>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a5b      	ldr	r2, [pc, #364]	; (800098c <GPIO_Init+0x41c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d016      	beq.n	8000852 <GPIO_Init+0x2e2>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a59      	ldr	r2, [pc, #356]	; (8000990 <GPIO_Init+0x420>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d00f      	beq.n	800084e <GPIO_Init+0x2de>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a58      	ldr	r2, [pc, #352]	; (8000994 <GPIO_Init+0x424>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d008      	beq.n	800084a <GPIO_Init+0x2da>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a56      	ldr	r2, [pc, #344]	; (8000998 <GPIO_Init+0x428>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <GPIO_Init+0x2d6>
 8000842:	2306      	movs	r3, #6
 8000844:	e00c      	b.n	8000860 <GPIO_Init+0x2f0>
 8000846:	2300      	movs	r3, #0
 8000848:	e00a      	b.n	8000860 <GPIO_Init+0x2f0>
 800084a:	2305      	movs	r3, #5
 800084c:	e008      	b.n	8000860 <GPIO_Init+0x2f0>
 800084e:	2304      	movs	r3, #4
 8000850:	e006      	b.n	8000860 <GPIO_Init+0x2f0>
 8000852:	2303      	movs	r3, #3
 8000854:	e004      	b.n	8000860 <GPIO_Init+0x2f0>
 8000856:	2302      	movs	r3, #2
 8000858:	e002      	b.n	8000860 <GPIO_Init+0x2f0>
 800085a:	2301      	movs	r3, #1
 800085c:	e000      	b.n	8000860 <GPIO_Init+0x2f0>
 800085e:	2300      	movs	r3, #0
 8000860:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <GPIO_Init+0x42c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a4d      	ldr	r2, [pc, #308]	; (800099c <GPIO_Init+0x42c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 800086e:	7a7a      	ldrb	r2, [r7, #9]
 8000870:	7abb      	ldrb	r3, [r7, #10]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	fa02 f103 	lsl.w	r1, r2, r3
 8000878:	4a49      	ldr	r2, [pc, #292]	; (80009a0 <GPIO_Init+0x430>)
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	3302      	adds	r3, #2
 800087e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <GPIO_Init+0x40c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	7912      	ldrb	r2, [r2, #4]
 800088a:	4611      	mov	r1, r2
 800088c:	2201      	movs	r2, #1
 800088e:	408a      	lsls	r2, r1
 8000890:	4611      	mov	r1, r2
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <GPIO_Init+0x40c>)
 8000894:	430b      	orrs	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	79db      	ldrb	r3, [r3, #7]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68da      	ldr	r2, [r3, #12]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	4619      	mov	r1, r3
 80008b8:	2301      	movs	r3, #1
 80008ba:	408b      	lsls	r3, r1
 80008bc:	43db      	mvns	r3, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	400a      	ands	r2, r1
 80008c6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68d9      	ldr	r1, [r3, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7a1b      	ldrb	r3, [r3, #8]
 80008e0:	2b07      	cmp	r3, #7
 80008e2:	d11d      	bne.n	8000920 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7a1b      	ldrb	r3, [r3, #8]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	4619      	mov	r1, r3
 8000900:	2301      	movs	r3, #1
 8000902:	408b      	lsls	r3, r1
 8000904:	43db      	mvns	r3, r3
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	400a      	ands	r2, r1
 800090e:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68d9      	ldr	r1, [r3, #12]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	430a      	orrs	r2, r1
 800091e:	60da      	str	r2, [r3, #12]
	}

//	// 5. Configure the alt functionality
	temp = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF_OD )){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7a5b      	ldrb	r3, [r3, #9]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d15f      	bne.n	80009ec <GPIO_Init+0x47c>
		// configure the alternate function registers
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	2b07      	cmp	r3, #7
 8000932:	d837      	bhi.n	80009a4 <GPIO_Init+0x434>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7a5b      	ldrb	r3, [r3, #9]
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	3302      	adds	r3, #2
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	2103      	movs	r1, #3
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
			pGPIOHandle->pGPIOx->CRH |= temp;
		}
	}
}
 8000978:	e038      	b.n	80009ec <GPIO_Init+0x47c>
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400
 8000980:	40010800 	.word	0x40010800
 8000984:	40010c00 	.word	0x40010c00
 8000988:	40011000 	.word	0x40011000
 800098c:	40011400 	.word	0x40011400
 8000990:	40011800 	.word	0x40011800
 8000994:	40011c00 	.word	0x40011c00
 8000998:	40012000 	.word	0x40012000
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a5b      	ldrb	r3, [r3, #9]
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	3b08      	subs	r3, #8
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	3302      	adds	r3, #2
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	3b08      	subs	r3, #8
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	2103      	movs	r1, #3
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	400a      	ands	r2, r1
 80009da:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6859      	ldr	r1, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	605a      	str	r2, [r3, #4]
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
	...

08000a20 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t RCC_GetPCLK1Value(void){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <RCC_GetPCLK1Value+0x9c>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000a34:	7a7b      	ldrb	r3, [r7, #9]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <RCC_GetPCLK1Value+0x20>
		SystemClk = 8000000;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <RCC_GetPCLK1Value+0xa0>)
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e00b      	b.n	8000a58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000a40:	7a7b      	ldrb	r3, [r7, #9]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d102      	bne.n	8000a4c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <RCC_GetPCLK1Value+0xa0>)
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e005      	b.n	8000a58 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8000a4c:	7a7b      	ldrb	r3, [r7, #9]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d102      	bne.n	8000a58 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000a52:	f000 f889 	bl	8000b68 <RCC_GetPLLOutputClock>
 8000a56:	60f8      	str	r0, [r7, #12]
	}

	//ahbp
	temp = (RCC->CFGR >> 4) & 0xF;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <RCC_GetPCLK1Value+0x9c>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	091b      	lsrs	r3, r3, #4
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000a66:	7a3b      	ldrb	r3, [r7, #8]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d802      	bhi.n	8000a72 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	72fb      	strb	r3, [r7, #11]
 8000a70:	e005      	b.n	8000a7e <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp - 8];
 8000a72:	7a3b      	ldrb	r3, [r7, #8]
 8000a74:	3b08      	subs	r3, #8
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <RCC_GetPCLK1Value+0xa4>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 8) & 0x7;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <RCC_GetPCLK1Value+0x9c>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d802      	bhi.n	8000a98 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	72bb      	strb	r3, [r7, #10]
 8000a96:	e004      	b.n	8000aa2 <RCC_GetPCLK1Value+0x82>
	}else{
		ahbp = APB1_PreScaler[temp - 4];
 8000a98:	7a3b      	ldrb	r3, [r7, #8]
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <RCC_GetPCLK1Value+0xa8>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	72fb      	strb	r3, [r7, #11]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aaa:	7abb      	ldrb	r3, [r7, #10]
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	007a1200 	.word	0x007a1200
 8000ac4:	20000014 	.word	0x20000014
 8000ac8:	20000024 	.word	0x20000024

08000acc <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <RCC_GetPCLK2Value+0x8c>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0){
 8000ae4:	7a7b      	ldrb	r3, [r7, #9]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <RCC_GetPCLK2Value+0x24>
		SystemClock = 8000000;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <RCC_GetPCLK2Value+0x90>)
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e001      	b.n	8000af4 <RCC_GetPCLK2Value+0x28>
	}else{
		SystemClock = 8000000;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <RCC_GetPCLK2Value+0x90>)
 8000af2:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <RCC_GetPCLK2Value+0x8c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	091b      	lsrs	r3, r3, #4
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d802      	bhi.n	8000b0c <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	72fb      	strb	r3, [r7, #11]
 8000b0a:	e005      	b.n	8000b18 <RCC_GetPCLK2Value+0x4c>
	}else{
       ahbp = AHB_PreScaler[tmp-8];
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b08      	subs	r3, #8
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <RCC_GetPCLK2Value+0x94>)
 8000b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b16:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 11 ) & 0x7;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <RCC_GetPCLK2Value+0x8c>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	0adb      	lsrs	r3, r3, #11
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d802      	bhi.n	8000b30 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	72bb      	strb	r3, [r7, #10]
 8000b2e:	e004      	b.n	8000b3a <RCC_GetPCLK2Value+0x6e>
	}else{
		apb2p = APB1_PreScaler[tmp-4];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b04      	subs	r3, #4
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <RCC_GetPCLK2Value+0x98>)
 8000b36:	5cd3      	ldrb	r3, [r2, r3]
 8000b38:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b42:	7abb      	ldrb	r3, [r7, #10]
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000b4a:	683b      	ldr	r3, [r7, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	007a1200 	.word	0x007a1200
 8000b60:	20000014 	.word	0x20000014
 8000b64:	20000024 	.word	0x20000024

08000b68 <RCC_GetPLLOutputClock>:


uint32_t RCC_GetPLLOutputClock(){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <USART_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d136      	bne.n	8000bf8 <USART_PeriClockControl+0x80>
			if(pUSARTx == USART1){
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <USART_PeriClockControl+0xf8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <USART_PeriClockControl+0x28>
				USART1_PCLK_EN();
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6193      	str	r3, [r2, #24]
				UART4_PCLK_DI();
			}else if(pUSARTx == UART5){
				UART5_PCLK_DI();
			}
		}
}
 8000b9e:	e061      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART2){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a35      	ldr	r2, [pc, #212]	; (8000c78 <USART_PeriClockControl+0x100>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <USART_PeriClockControl+0x3e>
				USART2_PCLK_EN();
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb2:	61d3      	str	r3, [r2, #28]
}
 8000bb4:	e056      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART3){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <USART_PeriClockControl+0x104>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <USART_PeriClockControl+0x54>
				USART3_PCLK_EN();
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a2c      	ldr	r2, [pc, #176]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	61d3      	str	r3, [r2, #28]
}
 8000bca:	e04b      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART4){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a2c      	ldr	r2, [pc, #176]	; (8000c80 <USART_PeriClockControl+0x108>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d106      	bne.n	8000be2 <USART_PeriClockControl+0x6a>
				UART4_PCLK_EN();
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bde:	61d3      	str	r3, [r2, #28]
}
 8000be0:	e040      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART5){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <USART_PeriClockControl+0x10c>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d13c      	bne.n	8000c64 <USART_PeriClockControl+0xec>
				UART5_PCLK_EN();
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bf4:	61d3      	str	r3, [r2, #28]
}
 8000bf6:	e035      	b.n	8000c64 <USART_PeriClockControl+0xec>
			if(pUSARTx == USART1){
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <USART_PeriClockControl+0xf8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <USART_PeriClockControl+0x96>
				USART1_PCLK_DI();
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c0a:	6193      	str	r3, [r2, #24]
}
 8000c0c:	e02a      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART2){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <USART_PeriClockControl+0x100>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <USART_PeriClockControl+0xac>
				USART2_PCLK_DI();
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c20:	61d3      	str	r3, [r2, #28]
}
 8000c22:	e01f      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART3){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <USART_PeriClockControl+0x104>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <USART_PeriClockControl+0xc2>
				USART3_PCLK_DI();
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c36:	61d3      	str	r3, [r2, #28]
}
 8000c38:	e014      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART4){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <USART_PeriClockControl+0x108>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <USART_PeriClockControl+0xd8>
				UART4_PCLK_DI();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c48:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c4c:	61d3      	str	r3, [r2, #28]
}
 8000c4e:	e009      	b.n	8000c64 <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART5){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <USART_PeriClockControl+0x10c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d105      	bne.n	8000c64 <USART_PeriClockControl+0xec>
				UART5_PCLK_DI();
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <USART_PeriClockControl+0xfc>)
 8000c5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c62:	61d3      	str	r3, [r2, #28]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40004800 	.word	0x40004800
 8000c80:	40004c00 	.word	0x40004c00
 8000c84:	40005000 	.word	0x40005000

08000c88 <USART_Init>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

	// Temporary variable
	uint32_t tempreg=0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff6c 	bl	8000b78 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d104      	bne.n	8000cb2 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e014      	b.n	8000cdc <USART_Init+0x54>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d104      	bne.n	8000cc4 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	e00b      	b.n	8000cdc <USART_Init+0x54>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d107      	bne.n	8000cdc <USART_Init+0x54>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= (1 << USART_CR1_RE);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_TE);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f043 0308 	orr.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7b5b      	ldrb	r3, [r3, #13]
 8000ce0:	031b      	lsls	r3, r3, #12
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7b9b      	ldrb	r3, [r3, #14]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d104      	bne.n	8000cfc <USART_Init+0x74>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e00b      	b.n	8000d14 <USART_Init+0x8c>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b9b      	ldrb	r3, [r3, #14]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d107      	bne.n	8000d14 <USART_Init+0x8c>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68d9      	ldr	r1, [r3, #12]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7b1b      	ldrb	r3, [r3, #12]
 8000d2c:	031b      	lsls	r3, r3, #12
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7bdb      	ldrb	r3, [r3, #15]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d104      	bne.n	8000d54 <USART_Init+0xcc>
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e014      	b.n	8000d7e <USART_Init+0xf6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7bdb      	ldrb	r3, [r3, #15]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d104      	bne.n	8000d66 <USART_Init+0xde>
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e00b      	b.n	8000d7e <USART_Init+0xf6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7bdb      	ldrb	r3, [r3, #15]
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d107      	bne.n	8000d7e <USART_Init+0xf6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	615a      	str	r2, [r3, #20]
/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4610      	mov	r0, r2
 8000d92:	f000 f88f 	bl	8000eb4 <USART_SetBaudRate>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <USART_SendData>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//uint8_t data;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e031      	b.n	8000e14 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000db0:	bf00      	nop
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f866 	bl	8000e8a <USART_GetFlagStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f6      	beq.n	8000db2 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	7b5b      	ldrb	r3, [r3, #13]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d118      	bne.n	8000dfe <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dde:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	7b9b      	ldrb	r3, [r3, #14]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3301      	adds	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	e00b      	b.n	8000e0e <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e007      	b.n	8000e0e <USART_SendData+0x70>
		}
		else
		{
			//This is 8bit data transfer
			//data = pUSARTHandle->pUSARTx->DR;
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3c9      	bcc.n	8000db0 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000e1c:	bf00      	nop
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f830 	bl	8000e8a <USART_GetFlagStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f6      	beq.n	8000e1e <USART_SendData+0x80>
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <USART_ReceiveDataIT>:
 *
 * @Note              - Resolve all the TODOs

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b087      	sub	sp, #28
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e4c:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d014      	beq.n	8000e7e <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void)pUSARTHandle->pUSARTx->DR;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 0220 	orr.w	r2, r2, #32
 8000e7c:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000e80:	4618      	mov	r0, r3
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName){
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]

	if(pUSARTx->SR & FlagName){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <USART_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <USART_SetBaudRate>:
 * @return            -
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <USART_SetBaudRate+0xd0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d103      	bne.n	8000ed2 <USART_SetBaudRate+0x1e>
	   //USART1 is hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000eca:	f7ff fdff 	bl	8000acc <RCC_GetPCLK2Value>
 8000ece:	61f8      	str	r0, [r7, #28]
 8000ed0:	e002      	b.n	8000ed8 <USART_SetBaudRate+0x24>
	}else{
	   PCLKx = RCC_GetPCLK1Value();
 8000ed2:	f7ff fda5 	bl	8000a20 <RCC_GetPCLK1Value>
 8000ed6:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00b      	beq.n	8000efc <USART_SetBaudRate+0x48>
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009a      	lsls	r2, r3, #2
 8000eee:	441a      	add	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e00a      	b.n	8000f12 <USART_SetBaudRate+0x5e>
	}else{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	009a      	lsls	r2, r3, #2
 8000f06:	441a      	add	r2, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <USART_SetBaudRate+0xd4>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00a      	beq.n	8000f58 <USART_SetBaudRate+0xa4>
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	3332      	adds	r3, #50	; 0x32
 8000f48:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <USART_SetBaudRate+0xd4>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <USART_SetBaudRate+0xb8>

	}else{
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	3332      	adds	r3, #50	; 0x32
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <USART_SetBaudRate+0xd4>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	095b      	lsrs	r3, r3, #5
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	609a      	str	r2, [r3, #8]
	//pUSARTx->DR = 0x85;
	//pUSARTx->BRR = 0x683;
}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40013800 	.word	0x40013800
 8000f88:	51eb851f 	.word	0x51eb851f

08000f8c <USART_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d106      	bne.n	8000fac <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000faa:	e005      	b.n	8000fb8 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <USART_IRQInterruptConfig>:

/*********************************************************************************************************/
/*										USART INTERRUPTS 												 */
/*********************************************************************************************************/

void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d133      	bne.n	8001042 <USART_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b1f      	cmp	r3, #31
 8000fde:	d80a      	bhi.n	8000ff6 <USART_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <USART_IRQInterruptConfig+0xf0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <USART_IRQInterruptConfig+0xf0>)
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000ff4:	e059      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b1f      	cmp	r3, #31
 8000ffa:	d90f      	bls.n	800101c <USART_IRQInterruptConfig+0x58>
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b3f      	cmp	r3, #63	; 0x3f
 8001000:	d80c      	bhi.n	800101c <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <USART_IRQInterruptConfig+0xf4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4611      	mov	r1, r2
 8001014:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <USART_IRQInterruptConfig+0xf4>)
 8001016:	430b      	orrs	r3, r1
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e046      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b3f      	cmp	r3, #63	; 0x3f
 8001020:	d943      	bls.n	80010aa <USART_IRQInterruptConfig+0xe6>
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b5f      	cmp	r3, #95	; 0x5f
 8001026:	d840      	bhi.n	80010aa <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER1 |= (1 << IRQNumber % 64);
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <USART_IRQInterruptConfig+0xf4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	4611      	mov	r1, r2
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <USART_IRQInterruptConfig+0xf4>)
 800103c:	430b      	orrs	r3, r1
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	e033      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	d80a      	bhi.n	800105e <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <USART_IRQInterruptConfig+0xf8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4a19      	ldr	r2, [pc, #100]	; (80010bc <USART_IRQInterruptConfig+0xf8>)
 8001058:	430b      	orrs	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	e025      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b1f      	cmp	r3, #31
 8001062:	d90f      	bls.n	8001084 <USART_IRQInterruptConfig+0xc0>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b3f      	cmp	r3, #63	; 0x3f
 8001068:	d80c      	bhi.n	8001084 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <USART_IRQInterruptConfig+0xfc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	f002 021f 	and.w	r2, r2, #31
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	4611      	mov	r1, r2
 800107c:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <USART_IRQInterruptConfig+0xfc>)
 800107e:	430b      	orrs	r3, r1
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e012      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b3f      	cmp	r3, #63	; 0x3f
 8001088:	d90f      	bls.n	80010aa <USART_IRQInterruptConfig+0xe6>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b5f      	cmp	r3, #95	; 0x5f
 800108e:	d80c      	bhi.n	80010aa <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <USART_IRQInterruptConfig+0x100>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	4611      	mov	r1, r2
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <USART_IRQInterruptConfig+0x100>)
 80010a4:	430b      	orrs	r3, r1
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	e7ff      	b.n	80010aa <USART_IRQInterruptConfig+0xe6>
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000e104 	.word	0xe000e104
 80010bc:	e000e180 	.word	0xe000e180
 80010c0:	e000e184 	.word	0xe000e184
 80010c4:	e000e188 	.word	0xe000e188

080010c8 <USART_IRQHandling>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_FLAG_TC);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE );
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 ){
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d021      	beq.n	8001132 <USART_IRQHandling+0x6a>
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01e      	beq.n	8001132 <USART_IRQHandling+0x6a>
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d119      	bne.n	8001132 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d115      	bne.n	8001132 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_FLAG_TC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001114:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff f929 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_FLAG_TXE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001148:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d055      	beq.n	80011fc <USART_IRQHandling+0x134>
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d052      	beq.n	80011fc <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d14d      	bne.n	80011fc <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d03d      	beq.n	80011e4 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b5b      	ldrb	r3, [r3, #13]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d129      	bne.n	80011c4 <USART_IRQHandling+0xfc>
				{
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001184:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7b9b      	ldrb	r3, [r3, #14]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10f      	bne.n	80011ae <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen-= 2;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	1e9a      	subs	r2, r3, #2
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
 80011ac:	e01a      	b.n	80011e4 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen-= 1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	e00f      	b.n	80011e4 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	611a      	str	r2, [r3, #16]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen-= 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011fa:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_FLAG_RXNE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d073      	beq.n	8001302 <USART_IRQHandling+0x23a>
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d070      	beq.n	8001302 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001226:	2b01      	cmp	r3, #1
 8001228:	d16b      	bne.n	8001302 <USART_IRQHandling+0x23a>
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d053      	beq.n	80012da <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b5b      	ldrb	r3, [r3, #13]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d12f      	bne.n	800129a <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7b9b      	ldrb	r3, [r3, #14]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d119      	bne.n	8001276 <USART_IRQHandling+0x1ae>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001252:	b292      	uxth	r2, r2
 8001254:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->RxLen-= 2;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	1e9a      	subs	r2, r3, #2
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	61da      	str	r2, [r3, #28]
 8001274:	e031      	b.n	80012da <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]

						 //Now increment the pRxBuffer
						 pUSARTHandle->pRxBuffer++;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	615a      	str	r2, [r3, #20]

						 //Implement the code to decrement the length
						 pUSARTHandle->RxLen-= 1;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61da      	str	r2, [r3, #28]
 8001298:	e01f      	b.n	80012da <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7b9b      	ldrb	r3, [r3, #14]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e009      	b.n	80012c6 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen-=1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	61da      	str	r2, [r3, #28]
				}


			}// if of > 0

			if(! pUSARTHandle->RxLen)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0220 	bic.w	r2, r2, #32
 80012f0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80012fa:	2101      	movs	r1, #1
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff f841 	bl	8000384 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_FLAG_CTS);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001318:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00e      	beq.n	800134a <USART_IRQHandling+0x282>
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_FLAG_CTS);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001340:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001342:	2103      	movs	r1, #3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff f81d 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_FLAG_IDLE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00f      	beq.n	8001388 <USART_IRQHandling+0x2c0>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_FLAG_IDLE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	f023 0310 	bic.w	r3, r3, #16
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	617b      	str	r3, [r7, #20]
		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001380:	2102      	movs	r1, #2
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7fe fffe 	bl	8000384 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_FLAG_ORE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0305 	and.w	r3, r3, #5
 800139e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <USART_IRQHandling+0x2ec>
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013ac:	2107      	movs	r1, #7
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7fe ffe8 	bl	8000384 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]

	if(temp2 )
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01e      	beq.n	8001404 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FLAG_FE))
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 80013d8:	2105      	movs	r1, #5
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7fe ffd2 	bl	8000384 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_FLAG_NE) )
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80013ea:	2106      	movs	r1, #6
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7fe ffc9 	bl	8000384 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_FLAG_ORE) )
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80013fc:	2107      	movs	r1, #7
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7fe ffc0 	bl	8000384 <USART_ApplicationEventCallback>
		}
	}


}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <__libc_init_array>:
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	2600      	movs	r6, #0
 8001410:	4d0c      	ldr	r5, [pc, #48]	; (8001444 <__libc_init_array+0x38>)
 8001412:	4c0d      	ldr	r4, [pc, #52]	; (8001448 <__libc_init_array+0x3c>)
 8001414:	1b64      	subs	r4, r4, r5
 8001416:	10a4      	asrs	r4, r4, #2
 8001418:	42a6      	cmp	r6, r4
 800141a:	d109      	bne.n	8001430 <__libc_init_array+0x24>
 800141c:	f001 faf2 	bl	8002a04 <_init>
 8001420:	2600      	movs	r6, #0
 8001422:	4d0a      	ldr	r5, [pc, #40]	; (800144c <__libc_init_array+0x40>)
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <__libc_init_array+0x44>)
 8001426:	1b64      	subs	r4, r4, r5
 8001428:	10a4      	asrs	r4, r4, #2
 800142a:	42a6      	cmp	r6, r4
 800142c:	d105      	bne.n	800143a <__libc_init_array+0x2e>
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	f855 3b04 	ldr.w	r3, [r5], #4
 8001434:	4798      	blx	r3
 8001436:	3601      	adds	r6, #1
 8001438:	e7ee      	b.n	8001418 <__libc_init_array+0xc>
 800143a:	f855 3b04 	ldr.w	r3, [r5], #4
 800143e:	4798      	blx	r3
 8001440:	3601      	adds	r6, #1
 8001442:	e7f2      	b.n	800142a <__libc_init_array+0x1e>
 8001444:	08002b6c 	.word	0x08002b6c
 8001448:	08002b6c 	.word	0x08002b6c
 800144c:	08002b6c 	.word	0x08002b6c
 8001450:	08002b70 	.word	0x08002b70

08001454 <memset>:
 8001454:	4603      	mov	r3, r0
 8001456:	4402      	add	r2, r0
 8001458:	4293      	cmp	r3, r2
 800145a:	d100      	bne.n	800145e <memset+0xa>
 800145c:	4770      	bx	lr
 800145e:	f803 1b01 	strb.w	r1, [r3], #1
 8001462:	e7f9      	b.n	8001458 <memset+0x4>

08001464 <iprintf>:
 8001464:	b40f      	push	{r0, r1, r2, r3}
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <iprintf+0x2c>)
 8001468:	b513      	push	{r0, r1, r4, lr}
 800146a:	681c      	ldr	r4, [r3, #0]
 800146c:	b124      	cbz	r4, 8001478 <iprintf+0x14>
 800146e:	69a3      	ldr	r3, [r4, #24]
 8001470:	b913      	cbnz	r3, 8001478 <iprintf+0x14>
 8001472:	4620      	mov	r0, r4
 8001474:	f000 fa5a 	bl	800192c <__sinit>
 8001478:	ab05      	add	r3, sp, #20
 800147a:	4620      	mov	r0, r4
 800147c:	9a04      	ldr	r2, [sp, #16]
 800147e:	68a1      	ldr	r1, [r4, #8]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f000 fc5d 	bl	8001d40 <_vfiprintf_r>
 8001486:	b002      	add	sp, #8
 8001488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800148c:	b004      	add	sp, #16
 800148e:	4770      	bx	lr
 8001490:	20000028 	.word	0x20000028

08001494 <_puts_r>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	460e      	mov	r6, r1
 8001498:	4605      	mov	r5, r0
 800149a:	b118      	cbz	r0, 80014a4 <_puts_r+0x10>
 800149c:	6983      	ldr	r3, [r0, #24]
 800149e:	b90b      	cbnz	r3, 80014a4 <_puts_r+0x10>
 80014a0:	f000 fa44 	bl	800192c <__sinit>
 80014a4:	69ab      	ldr	r3, [r5, #24]
 80014a6:	68ac      	ldr	r4, [r5, #8]
 80014a8:	b913      	cbnz	r3, 80014b0 <_puts_r+0x1c>
 80014aa:	4628      	mov	r0, r5
 80014ac:	f000 fa3e 	bl	800192c <__sinit>
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <_puts_r+0xd0>)
 80014b2:	429c      	cmp	r4, r3
 80014b4:	d120      	bne.n	80014f8 <_puts_r+0x64>
 80014b6:	686c      	ldr	r4, [r5, #4]
 80014b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ba:	07db      	lsls	r3, r3, #31
 80014bc:	d405      	bmi.n	80014ca <_puts_r+0x36>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	0598      	lsls	r0, r3, #22
 80014c2:	d402      	bmi.n	80014ca <_puts_r+0x36>
 80014c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c6:	f000 facf 	bl	8001a68 <__retarget_lock_acquire_recursive>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	0719      	lsls	r1, r3, #28
 80014ce:	d51d      	bpl.n	800150c <_puts_r+0x78>
 80014d0:	6923      	ldr	r3, [r4, #16]
 80014d2:	b1db      	cbz	r3, 800150c <_puts_r+0x78>
 80014d4:	3e01      	subs	r6, #1
 80014d6:	68a3      	ldr	r3, [r4, #8]
 80014d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80014dc:	3b01      	subs	r3, #1
 80014de:	60a3      	str	r3, [r4, #8]
 80014e0:	bb39      	cbnz	r1, 8001532 <_puts_r+0x9e>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da38      	bge.n	8001558 <_puts_r+0xc4>
 80014e6:	4622      	mov	r2, r4
 80014e8:	210a      	movs	r1, #10
 80014ea:	4628      	mov	r0, r5
 80014ec:	f000 f848 	bl	8001580 <__swbuf_r>
 80014f0:	3001      	adds	r0, #1
 80014f2:	d011      	beq.n	8001518 <_puts_r+0x84>
 80014f4:	250a      	movs	r5, #10
 80014f6:	e011      	b.n	800151c <_puts_r+0x88>
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <_puts_r+0xd4>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d101      	bne.n	8001502 <_puts_r+0x6e>
 80014fe:	68ac      	ldr	r4, [r5, #8]
 8001500:	e7da      	b.n	80014b8 <_puts_r+0x24>
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <_puts_r+0xd8>)
 8001504:	429c      	cmp	r4, r3
 8001506:	bf08      	it	eq
 8001508:	68ec      	ldreq	r4, [r5, #12]
 800150a:	e7d5      	b.n	80014b8 <_puts_r+0x24>
 800150c:	4621      	mov	r1, r4
 800150e:	4628      	mov	r0, r5
 8001510:	f000 f888 	bl	8001624 <__swsetup_r>
 8001514:	2800      	cmp	r0, #0
 8001516:	d0dd      	beq.n	80014d4 <_puts_r+0x40>
 8001518:	f04f 35ff 	mov.w	r5, #4294967295
 800151c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800151e:	07da      	lsls	r2, r3, #31
 8001520:	d405      	bmi.n	800152e <_puts_r+0x9a>
 8001522:	89a3      	ldrh	r3, [r4, #12]
 8001524:	059b      	lsls	r3, r3, #22
 8001526:	d402      	bmi.n	800152e <_puts_r+0x9a>
 8001528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800152a:	f000 fa9e 	bl	8001a6a <__retarget_lock_release_recursive>
 800152e:	4628      	mov	r0, r5
 8001530:	bd70      	pop	{r4, r5, r6, pc}
 8001532:	2b00      	cmp	r3, #0
 8001534:	da04      	bge.n	8001540 <_puts_r+0xac>
 8001536:	69a2      	ldr	r2, [r4, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	dc06      	bgt.n	800154a <_puts_r+0xb6>
 800153c:	290a      	cmp	r1, #10
 800153e:	d004      	beq.n	800154a <_puts_r+0xb6>
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	6022      	str	r2, [r4, #0]
 8001546:	7019      	strb	r1, [r3, #0]
 8001548:	e7c5      	b.n	80014d6 <_puts_r+0x42>
 800154a:	4622      	mov	r2, r4
 800154c:	4628      	mov	r0, r5
 800154e:	f000 f817 	bl	8001580 <__swbuf_r>
 8001552:	3001      	adds	r0, #1
 8001554:	d1bf      	bne.n	80014d6 <_puts_r+0x42>
 8001556:	e7df      	b.n	8001518 <_puts_r+0x84>
 8001558:	250a      	movs	r5, #10
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	6022      	str	r2, [r4, #0]
 8001560:	701d      	strb	r5, [r3, #0]
 8001562:	e7db      	b.n	800151c <_puts_r+0x88>
 8001564:	08002adc 	.word	0x08002adc
 8001568:	08002afc 	.word	0x08002afc
 800156c:	08002abc 	.word	0x08002abc

08001570 <puts>:
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <puts+0xc>)
 8001572:	4601      	mov	r1, r0
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f7ff bf8d 	b.w	8001494 <_puts_r>
 800157a:	bf00      	nop
 800157c:	20000028 	.word	0x20000028

08001580 <__swbuf_r>:
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	460e      	mov	r6, r1
 8001584:	4614      	mov	r4, r2
 8001586:	4605      	mov	r5, r0
 8001588:	b118      	cbz	r0, 8001592 <__swbuf_r+0x12>
 800158a:	6983      	ldr	r3, [r0, #24]
 800158c:	b90b      	cbnz	r3, 8001592 <__swbuf_r+0x12>
 800158e:	f000 f9cd 	bl	800192c <__sinit>
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <__swbuf_r+0x98>)
 8001594:	429c      	cmp	r4, r3
 8001596:	d12b      	bne.n	80015f0 <__swbuf_r+0x70>
 8001598:	686c      	ldr	r4, [r5, #4]
 800159a:	69a3      	ldr	r3, [r4, #24]
 800159c:	60a3      	str	r3, [r4, #8]
 800159e:	89a3      	ldrh	r3, [r4, #12]
 80015a0:	071a      	lsls	r2, r3, #28
 80015a2:	d52f      	bpl.n	8001604 <__swbuf_r+0x84>
 80015a4:	6923      	ldr	r3, [r4, #16]
 80015a6:	b36b      	cbz	r3, 8001604 <__swbuf_r+0x84>
 80015a8:	6923      	ldr	r3, [r4, #16]
 80015aa:	6820      	ldr	r0, [r4, #0]
 80015ac:	b2f6      	uxtb	r6, r6
 80015ae:	1ac0      	subs	r0, r0, r3
 80015b0:	6963      	ldr	r3, [r4, #20]
 80015b2:	4637      	mov	r7, r6
 80015b4:	4283      	cmp	r3, r0
 80015b6:	dc04      	bgt.n	80015c2 <__swbuf_r+0x42>
 80015b8:	4621      	mov	r1, r4
 80015ba:	4628      	mov	r0, r5
 80015bc:	f000 f922 	bl	8001804 <_fflush_r>
 80015c0:	bb30      	cbnz	r0, 8001610 <__swbuf_r+0x90>
 80015c2:	68a3      	ldr	r3, [r4, #8]
 80015c4:	3001      	adds	r0, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	60a3      	str	r3, [r4, #8]
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	6022      	str	r2, [r4, #0]
 80015d0:	701e      	strb	r6, [r3, #0]
 80015d2:	6963      	ldr	r3, [r4, #20]
 80015d4:	4283      	cmp	r3, r0
 80015d6:	d004      	beq.n	80015e2 <__swbuf_r+0x62>
 80015d8:	89a3      	ldrh	r3, [r4, #12]
 80015da:	07db      	lsls	r3, r3, #31
 80015dc:	d506      	bpl.n	80015ec <__swbuf_r+0x6c>
 80015de:	2e0a      	cmp	r6, #10
 80015e0:	d104      	bne.n	80015ec <__swbuf_r+0x6c>
 80015e2:	4621      	mov	r1, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	f000 f90d 	bl	8001804 <_fflush_r>
 80015ea:	b988      	cbnz	r0, 8001610 <__swbuf_r+0x90>
 80015ec:	4638      	mov	r0, r7
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <__swbuf_r+0x9c>)
 80015f2:	429c      	cmp	r4, r3
 80015f4:	d101      	bne.n	80015fa <__swbuf_r+0x7a>
 80015f6:	68ac      	ldr	r4, [r5, #8]
 80015f8:	e7cf      	b.n	800159a <__swbuf_r+0x1a>
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <__swbuf_r+0xa0>)
 80015fc:	429c      	cmp	r4, r3
 80015fe:	bf08      	it	eq
 8001600:	68ec      	ldreq	r4, [r5, #12]
 8001602:	e7ca      	b.n	800159a <__swbuf_r+0x1a>
 8001604:	4621      	mov	r1, r4
 8001606:	4628      	mov	r0, r5
 8001608:	f000 f80c 	bl	8001624 <__swsetup_r>
 800160c:	2800      	cmp	r0, #0
 800160e:	d0cb      	beq.n	80015a8 <__swbuf_r+0x28>
 8001610:	f04f 37ff 	mov.w	r7, #4294967295
 8001614:	e7ea      	b.n	80015ec <__swbuf_r+0x6c>
 8001616:	bf00      	nop
 8001618:	08002adc 	.word	0x08002adc
 800161c:	08002afc 	.word	0x08002afc
 8001620:	08002abc 	.word	0x08002abc

08001624 <__swsetup_r>:
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <__swsetup_r+0xcc>)
 8001626:	b570      	push	{r4, r5, r6, lr}
 8001628:	681d      	ldr	r5, [r3, #0]
 800162a:	4606      	mov	r6, r0
 800162c:	460c      	mov	r4, r1
 800162e:	b125      	cbz	r5, 800163a <__swsetup_r+0x16>
 8001630:	69ab      	ldr	r3, [r5, #24]
 8001632:	b913      	cbnz	r3, 800163a <__swsetup_r+0x16>
 8001634:	4628      	mov	r0, r5
 8001636:	f000 f979 	bl	800192c <__sinit>
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <__swsetup_r+0xd0>)
 800163c:	429c      	cmp	r4, r3
 800163e:	d10f      	bne.n	8001660 <__swsetup_r+0x3c>
 8001640:	686c      	ldr	r4, [r5, #4]
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001648:	0719      	lsls	r1, r3, #28
 800164a:	d42c      	bmi.n	80016a6 <__swsetup_r+0x82>
 800164c:	06dd      	lsls	r5, r3, #27
 800164e:	d411      	bmi.n	8001674 <__swsetup_r+0x50>
 8001650:	2309      	movs	r3, #9
 8001652:	6033      	str	r3, [r6, #0]
 8001654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	e03e      	b.n	80016de <__swsetup_r+0xba>
 8001660:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <__swsetup_r+0xd4>)
 8001662:	429c      	cmp	r4, r3
 8001664:	d101      	bne.n	800166a <__swsetup_r+0x46>
 8001666:	68ac      	ldr	r4, [r5, #8]
 8001668:	e7eb      	b.n	8001642 <__swsetup_r+0x1e>
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <__swsetup_r+0xd8>)
 800166c:	429c      	cmp	r4, r3
 800166e:	bf08      	it	eq
 8001670:	68ec      	ldreq	r4, [r5, #12]
 8001672:	e7e6      	b.n	8001642 <__swsetup_r+0x1e>
 8001674:	0758      	lsls	r0, r3, #29
 8001676:	d512      	bpl.n	800169e <__swsetup_r+0x7a>
 8001678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800167a:	b141      	cbz	r1, 800168e <__swsetup_r+0x6a>
 800167c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001680:	4299      	cmp	r1, r3
 8001682:	d002      	beq.n	800168a <__swsetup_r+0x66>
 8001684:	4630      	mov	r0, r6
 8001686:	f000 fa57 	bl	8001b38 <_free_r>
 800168a:	2300      	movs	r3, #0
 800168c:	6363      	str	r3, [r4, #52]	; 0x34
 800168e:	89a3      	ldrh	r3, [r4, #12]
 8001690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001694:	81a3      	strh	r3, [r4, #12]
 8001696:	2300      	movs	r3, #0
 8001698:	6063      	str	r3, [r4, #4]
 800169a:	6923      	ldr	r3, [r4, #16]
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	89a3      	ldrh	r3, [r4, #12]
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	6923      	ldr	r3, [r4, #16]
 80016a8:	b94b      	cbnz	r3, 80016be <__swsetup_r+0x9a>
 80016aa:	89a3      	ldrh	r3, [r4, #12]
 80016ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b4:	d003      	beq.n	80016be <__swsetup_r+0x9a>
 80016b6:	4621      	mov	r1, r4
 80016b8:	4630      	mov	r0, r6
 80016ba:	f000 f9fd 	bl	8001ab8 <__smakebuf_r>
 80016be:	89a0      	ldrh	r0, [r4, #12]
 80016c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016c4:	f010 0301 	ands.w	r3, r0, #1
 80016c8:	d00a      	beq.n	80016e0 <__swsetup_r+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	60a3      	str	r3, [r4, #8]
 80016ce:	6963      	ldr	r3, [r4, #20]
 80016d0:	425b      	negs	r3, r3
 80016d2:	61a3      	str	r3, [r4, #24]
 80016d4:	6923      	ldr	r3, [r4, #16]
 80016d6:	b943      	cbnz	r3, 80016ea <__swsetup_r+0xc6>
 80016d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80016dc:	d1ba      	bne.n	8001654 <__swsetup_r+0x30>
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	0781      	lsls	r1, r0, #30
 80016e2:	bf58      	it	pl
 80016e4:	6963      	ldrpl	r3, [r4, #20]
 80016e6:	60a3      	str	r3, [r4, #8]
 80016e8:	e7f4      	b.n	80016d4 <__swsetup_r+0xb0>
 80016ea:	2000      	movs	r0, #0
 80016ec:	e7f7      	b.n	80016de <__swsetup_r+0xba>
 80016ee:	bf00      	nop
 80016f0:	20000028 	.word	0x20000028
 80016f4:	08002adc 	.word	0x08002adc
 80016f8:	08002afc 	.word	0x08002afc
 80016fc:	08002abc 	.word	0x08002abc

08001700 <__sflush_r>:
 8001700:	898a      	ldrh	r2, [r1, #12]
 8001702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001704:	4605      	mov	r5, r0
 8001706:	0710      	lsls	r0, r2, #28
 8001708:	460c      	mov	r4, r1
 800170a:	d457      	bmi.n	80017bc <__sflush_r+0xbc>
 800170c:	684b      	ldr	r3, [r1, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	dc04      	bgt.n	800171c <__sflush_r+0x1c>
 8001712:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	dc01      	bgt.n	800171c <__sflush_r+0x1c>
 8001718:	2000      	movs	r0, #0
 800171a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800171c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800171e:	2e00      	cmp	r6, #0
 8001720:	d0fa      	beq.n	8001718 <__sflush_r+0x18>
 8001722:	2300      	movs	r3, #0
 8001724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001728:	682f      	ldr	r7, [r5, #0]
 800172a:	602b      	str	r3, [r5, #0]
 800172c:	d032      	beq.n	8001794 <__sflush_r+0x94>
 800172e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	075a      	lsls	r2, r3, #29
 8001734:	d505      	bpl.n	8001742 <__sflush_r+0x42>
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	1ac0      	subs	r0, r0, r3
 800173a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800173c:	b10b      	cbz	r3, 8001742 <__sflush_r+0x42>
 800173e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001740:	1ac0      	subs	r0, r0, r3
 8001742:	2300      	movs	r3, #0
 8001744:	4602      	mov	r2, r0
 8001746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001748:	4628      	mov	r0, r5
 800174a:	6a21      	ldr	r1, [r4, #32]
 800174c:	47b0      	blx	r6
 800174e:	1c43      	adds	r3, r0, #1
 8001750:	89a3      	ldrh	r3, [r4, #12]
 8001752:	d106      	bne.n	8001762 <__sflush_r+0x62>
 8001754:	6829      	ldr	r1, [r5, #0]
 8001756:	291d      	cmp	r1, #29
 8001758:	d82c      	bhi.n	80017b4 <__sflush_r+0xb4>
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <__sflush_r+0x100>)
 800175c:	40ca      	lsrs	r2, r1
 800175e:	07d6      	lsls	r6, r2, #31
 8001760:	d528      	bpl.n	80017b4 <__sflush_r+0xb4>
 8001762:	2200      	movs	r2, #0
 8001764:	6062      	str	r2, [r4, #4]
 8001766:	6922      	ldr	r2, [r4, #16]
 8001768:	04d9      	lsls	r1, r3, #19
 800176a:	6022      	str	r2, [r4, #0]
 800176c:	d504      	bpl.n	8001778 <__sflush_r+0x78>
 800176e:	1c42      	adds	r2, r0, #1
 8001770:	d101      	bne.n	8001776 <__sflush_r+0x76>
 8001772:	682b      	ldr	r3, [r5, #0]
 8001774:	b903      	cbnz	r3, 8001778 <__sflush_r+0x78>
 8001776:	6560      	str	r0, [r4, #84]	; 0x54
 8001778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800177a:	602f      	str	r7, [r5, #0]
 800177c:	2900      	cmp	r1, #0
 800177e:	d0cb      	beq.n	8001718 <__sflush_r+0x18>
 8001780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001784:	4299      	cmp	r1, r3
 8001786:	d002      	beq.n	800178e <__sflush_r+0x8e>
 8001788:	4628      	mov	r0, r5
 800178a:	f000 f9d5 	bl	8001b38 <_free_r>
 800178e:	2000      	movs	r0, #0
 8001790:	6360      	str	r0, [r4, #52]	; 0x34
 8001792:	e7c2      	b.n	800171a <__sflush_r+0x1a>
 8001794:	6a21      	ldr	r1, [r4, #32]
 8001796:	2301      	movs	r3, #1
 8001798:	4628      	mov	r0, r5
 800179a:	47b0      	blx	r6
 800179c:	1c41      	adds	r1, r0, #1
 800179e:	d1c7      	bne.n	8001730 <__sflush_r+0x30>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0c4      	beq.n	8001730 <__sflush_r+0x30>
 80017a6:	2b1d      	cmp	r3, #29
 80017a8:	d001      	beq.n	80017ae <__sflush_r+0xae>
 80017aa:	2b16      	cmp	r3, #22
 80017ac:	d101      	bne.n	80017b2 <__sflush_r+0xb2>
 80017ae:	602f      	str	r7, [r5, #0]
 80017b0:	e7b2      	b.n	8001718 <__sflush_r+0x18>
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b8:	81a3      	strh	r3, [r4, #12]
 80017ba:	e7ae      	b.n	800171a <__sflush_r+0x1a>
 80017bc:	690f      	ldr	r7, [r1, #16]
 80017be:	2f00      	cmp	r7, #0
 80017c0:	d0aa      	beq.n	8001718 <__sflush_r+0x18>
 80017c2:	0793      	lsls	r3, r2, #30
 80017c4:	bf18      	it	ne
 80017c6:	2300      	movne	r3, #0
 80017c8:	680e      	ldr	r6, [r1, #0]
 80017ca:	bf08      	it	eq
 80017cc:	694b      	ldreq	r3, [r1, #20]
 80017ce:	1bf6      	subs	r6, r6, r7
 80017d0:	600f      	str	r7, [r1, #0]
 80017d2:	608b      	str	r3, [r1, #8]
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	dd9f      	ble.n	8001718 <__sflush_r+0x18>
 80017d8:	4633      	mov	r3, r6
 80017da:	463a      	mov	r2, r7
 80017dc:	4628      	mov	r0, r5
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80017e4:	47e0      	blx	ip
 80017e6:	2800      	cmp	r0, #0
 80017e8:	dc06      	bgt.n	80017f8 <__sflush_r+0xf8>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f4:	81a3      	strh	r3, [r4, #12]
 80017f6:	e790      	b.n	800171a <__sflush_r+0x1a>
 80017f8:	4407      	add	r7, r0
 80017fa:	1a36      	subs	r6, r6, r0
 80017fc:	e7ea      	b.n	80017d4 <__sflush_r+0xd4>
 80017fe:	bf00      	nop
 8001800:	20400001 	.word	0x20400001

08001804 <_fflush_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	690b      	ldr	r3, [r1, #16]
 8001808:	4605      	mov	r5, r0
 800180a:	460c      	mov	r4, r1
 800180c:	b913      	cbnz	r3, 8001814 <_fflush_r+0x10>
 800180e:	2500      	movs	r5, #0
 8001810:	4628      	mov	r0, r5
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	b118      	cbz	r0, 800181e <_fflush_r+0x1a>
 8001816:	6983      	ldr	r3, [r0, #24]
 8001818:	b90b      	cbnz	r3, 800181e <_fflush_r+0x1a>
 800181a:	f000 f887 	bl	800192c <__sinit>
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <_fflush_r+0x6c>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d11b      	bne.n	800185c <_fflush_r+0x58>
 8001824:	686c      	ldr	r4, [r5, #4]
 8001826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0ef      	beq.n	800180e <_fflush_r+0xa>
 800182e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001830:	07d0      	lsls	r0, r2, #31
 8001832:	d404      	bmi.n	800183e <_fflush_r+0x3a>
 8001834:	0599      	lsls	r1, r3, #22
 8001836:	d402      	bmi.n	800183e <_fflush_r+0x3a>
 8001838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800183a:	f000 f915 	bl	8001a68 <__retarget_lock_acquire_recursive>
 800183e:	4628      	mov	r0, r5
 8001840:	4621      	mov	r1, r4
 8001842:	f7ff ff5d 	bl	8001700 <__sflush_r>
 8001846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001848:	4605      	mov	r5, r0
 800184a:	07da      	lsls	r2, r3, #31
 800184c:	d4e0      	bmi.n	8001810 <_fflush_r+0xc>
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	059b      	lsls	r3, r3, #22
 8001852:	d4dd      	bmi.n	8001810 <_fflush_r+0xc>
 8001854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001856:	f000 f908 	bl	8001a6a <__retarget_lock_release_recursive>
 800185a:	e7d9      	b.n	8001810 <_fflush_r+0xc>
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <_fflush_r+0x70>)
 800185e:	429c      	cmp	r4, r3
 8001860:	d101      	bne.n	8001866 <_fflush_r+0x62>
 8001862:	68ac      	ldr	r4, [r5, #8]
 8001864:	e7df      	b.n	8001826 <_fflush_r+0x22>
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <_fflush_r+0x74>)
 8001868:	429c      	cmp	r4, r3
 800186a:	bf08      	it	eq
 800186c:	68ec      	ldreq	r4, [r5, #12]
 800186e:	e7da      	b.n	8001826 <_fflush_r+0x22>
 8001870:	08002adc 	.word	0x08002adc
 8001874:	08002afc 	.word	0x08002afc
 8001878:	08002abc 	.word	0x08002abc

0800187c <std>:
 800187c:	2300      	movs	r3, #0
 800187e:	b510      	push	{r4, lr}
 8001880:	4604      	mov	r4, r0
 8001882:	e9c0 3300 	strd	r3, r3, [r0]
 8001886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800188a:	6083      	str	r3, [r0, #8]
 800188c:	8181      	strh	r1, [r0, #12]
 800188e:	6643      	str	r3, [r0, #100]	; 0x64
 8001890:	81c2      	strh	r2, [r0, #14]
 8001892:	6183      	str	r3, [r0, #24]
 8001894:	4619      	mov	r1, r3
 8001896:	2208      	movs	r2, #8
 8001898:	305c      	adds	r0, #92	; 0x5c
 800189a:	f7ff fddb 	bl	8001454 <memset>
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <std+0x38>)
 80018a0:	6224      	str	r4, [r4, #32]
 80018a2:	6263      	str	r3, [r4, #36]	; 0x24
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <std+0x3c>)
 80018a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <std+0x40>)
 80018aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <std+0x44>)
 80018ae:	6323      	str	r3, [r4, #48]	; 0x30
 80018b0:	bd10      	pop	{r4, pc}
 80018b2:	bf00      	nop
 80018b4:	080022ed 	.word	0x080022ed
 80018b8:	0800230f 	.word	0x0800230f
 80018bc:	08002347 	.word	0x08002347
 80018c0:	0800236b 	.word	0x0800236b

080018c4 <_cleanup_r>:
 80018c4:	4901      	ldr	r1, [pc, #4]	; (80018cc <_cleanup_r+0x8>)
 80018c6:	f000 b8af 	b.w	8001a28 <_fwalk_reent>
 80018ca:	bf00      	nop
 80018cc:	08001805 	.word	0x08001805

080018d0 <__sfmoreglue>:
 80018d0:	2268      	movs	r2, #104	; 0x68
 80018d2:	b570      	push	{r4, r5, r6, lr}
 80018d4:	1e4d      	subs	r5, r1, #1
 80018d6:	4355      	muls	r5, r2
 80018d8:	460e      	mov	r6, r1
 80018da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018de:	f000 f993 	bl	8001c08 <_malloc_r>
 80018e2:	4604      	mov	r4, r0
 80018e4:	b140      	cbz	r0, 80018f8 <__sfmoreglue+0x28>
 80018e6:	2100      	movs	r1, #0
 80018e8:	e9c0 1600 	strd	r1, r6, [r0]
 80018ec:	300c      	adds	r0, #12
 80018ee:	60a0      	str	r0, [r4, #8]
 80018f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018f4:	f7ff fdae 	bl	8001454 <memset>
 80018f8:	4620      	mov	r0, r4
 80018fa:	bd70      	pop	{r4, r5, r6, pc}

080018fc <__sfp_lock_acquire>:
 80018fc:	4801      	ldr	r0, [pc, #4]	; (8001904 <__sfp_lock_acquire+0x8>)
 80018fe:	f000 b8b3 	b.w	8001a68 <__retarget_lock_acquire_recursive>
 8001902:	bf00      	nop
 8001904:	200004da 	.word	0x200004da

08001908 <__sfp_lock_release>:
 8001908:	4801      	ldr	r0, [pc, #4]	; (8001910 <__sfp_lock_release+0x8>)
 800190a:	f000 b8ae 	b.w	8001a6a <__retarget_lock_release_recursive>
 800190e:	bf00      	nop
 8001910:	200004da 	.word	0x200004da

08001914 <__sinit_lock_acquire>:
 8001914:	4801      	ldr	r0, [pc, #4]	; (800191c <__sinit_lock_acquire+0x8>)
 8001916:	f000 b8a7 	b.w	8001a68 <__retarget_lock_acquire_recursive>
 800191a:	bf00      	nop
 800191c:	200004db 	.word	0x200004db

08001920 <__sinit_lock_release>:
 8001920:	4801      	ldr	r0, [pc, #4]	; (8001928 <__sinit_lock_release+0x8>)
 8001922:	f000 b8a2 	b.w	8001a6a <__retarget_lock_release_recursive>
 8001926:	bf00      	nop
 8001928:	200004db 	.word	0x200004db

0800192c <__sinit>:
 800192c:	b510      	push	{r4, lr}
 800192e:	4604      	mov	r4, r0
 8001930:	f7ff fff0 	bl	8001914 <__sinit_lock_acquire>
 8001934:	69a3      	ldr	r3, [r4, #24]
 8001936:	b11b      	cbz	r3, 8001940 <__sinit+0x14>
 8001938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800193c:	f7ff bff0 	b.w	8001920 <__sinit_lock_release>
 8001940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001944:	6523      	str	r3, [r4, #80]	; 0x50
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <__sinit+0x68>)
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <__sinit+0x6c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	62a2      	str	r2, [r4, #40]	; 0x28
 800194e:	42a3      	cmp	r3, r4
 8001950:	bf08      	it	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	4620      	mov	r0, r4
 8001956:	bf08      	it	eq
 8001958:	61a3      	streq	r3, [r4, #24]
 800195a:	f000 f81f 	bl	800199c <__sfp>
 800195e:	6060      	str	r0, [r4, #4]
 8001960:	4620      	mov	r0, r4
 8001962:	f000 f81b 	bl	800199c <__sfp>
 8001966:	60a0      	str	r0, [r4, #8]
 8001968:	4620      	mov	r0, r4
 800196a:	f000 f817 	bl	800199c <__sfp>
 800196e:	2200      	movs	r2, #0
 8001970:	2104      	movs	r1, #4
 8001972:	60e0      	str	r0, [r4, #12]
 8001974:	6860      	ldr	r0, [r4, #4]
 8001976:	f7ff ff81 	bl	800187c <std>
 800197a:	2201      	movs	r2, #1
 800197c:	2109      	movs	r1, #9
 800197e:	68a0      	ldr	r0, [r4, #8]
 8001980:	f7ff ff7c 	bl	800187c <std>
 8001984:	2202      	movs	r2, #2
 8001986:	2112      	movs	r1, #18
 8001988:	68e0      	ldr	r0, [r4, #12]
 800198a:	f7ff ff77 	bl	800187c <std>
 800198e:	2301      	movs	r3, #1
 8001990:	61a3      	str	r3, [r4, #24]
 8001992:	e7d1      	b.n	8001938 <__sinit+0xc>
 8001994:	08002ab8 	.word	0x08002ab8
 8001998:	080018c5 	.word	0x080018c5

0800199c <__sfp>:
 800199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800199e:	4607      	mov	r7, r0
 80019a0:	f7ff ffac 	bl	80018fc <__sfp_lock_acquire>
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <__sfp+0x84>)
 80019a6:	681e      	ldr	r6, [r3, #0]
 80019a8:	69b3      	ldr	r3, [r6, #24]
 80019aa:	b913      	cbnz	r3, 80019b2 <__sfp+0x16>
 80019ac:	4630      	mov	r0, r6
 80019ae:	f7ff ffbd 	bl	800192c <__sinit>
 80019b2:	3648      	adds	r6, #72	; 0x48
 80019b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	d503      	bpl.n	80019c4 <__sfp+0x28>
 80019bc:	6833      	ldr	r3, [r6, #0]
 80019be:	b30b      	cbz	r3, 8001a04 <__sfp+0x68>
 80019c0:	6836      	ldr	r6, [r6, #0]
 80019c2:	e7f7      	b.n	80019b4 <__sfp+0x18>
 80019c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019c8:	b9d5      	cbnz	r5, 8001a00 <__sfp+0x64>
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <__sfp+0x88>)
 80019cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019d0:	60e3      	str	r3, [r4, #12]
 80019d2:	6665      	str	r5, [r4, #100]	; 0x64
 80019d4:	f000 f847 	bl	8001a66 <__retarget_lock_init_recursive>
 80019d8:	f7ff ff96 	bl	8001908 <__sfp_lock_release>
 80019dc:	2208      	movs	r2, #8
 80019de:	4629      	mov	r1, r5
 80019e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80019e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019e8:	6025      	str	r5, [r4, #0]
 80019ea:	61a5      	str	r5, [r4, #24]
 80019ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019f0:	f7ff fd30 	bl	8001454 <memset>
 80019f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019fc:	4620      	mov	r0, r4
 80019fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a00:	3468      	adds	r4, #104	; 0x68
 8001a02:	e7d9      	b.n	80019b8 <__sfp+0x1c>
 8001a04:	2104      	movs	r1, #4
 8001a06:	4638      	mov	r0, r7
 8001a08:	f7ff ff62 	bl	80018d0 <__sfmoreglue>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	6030      	str	r0, [r6, #0]
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d1d5      	bne.n	80019c0 <__sfp+0x24>
 8001a14:	f7ff ff78 	bl	8001908 <__sfp_lock_release>
 8001a18:	230c      	movs	r3, #12
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	e7ee      	b.n	80019fc <__sfp+0x60>
 8001a1e:	bf00      	nop
 8001a20:	08002ab8 	.word	0x08002ab8
 8001a24:	ffff0001 	.word	0xffff0001

08001a28 <_fwalk_reent>:
 8001a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a2c:	4606      	mov	r6, r0
 8001a2e:	4688      	mov	r8, r1
 8001a30:	2700      	movs	r7, #0
 8001a32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a3a:	f1b9 0901 	subs.w	r9, r9, #1
 8001a3e:	d505      	bpl.n	8001a4c <_fwalk_reent+0x24>
 8001a40:	6824      	ldr	r4, [r4, #0]
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d1f7      	bne.n	8001a36 <_fwalk_reent+0xe>
 8001a46:	4638      	mov	r0, r7
 8001a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a4c:	89ab      	ldrh	r3, [r5, #12]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d907      	bls.n	8001a62 <_fwalk_reent+0x3a>
 8001a52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a56:	3301      	adds	r3, #1
 8001a58:	d003      	beq.n	8001a62 <_fwalk_reent+0x3a>
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	47c0      	blx	r8
 8001a60:	4307      	orrs	r7, r0
 8001a62:	3568      	adds	r5, #104	; 0x68
 8001a64:	e7e9      	b.n	8001a3a <_fwalk_reent+0x12>

08001a66 <__retarget_lock_init_recursive>:
 8001a66:	4770      	bx	lr

08001a68 <__retarget_lock_acquire_recursive>:
 8001a68:	4770      	bx	lr

08001a6a <__retarget_lock_release_recursive>:
 8001a6a:	4770      	bx	lr

08001a6c <__swhatbuf_r>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460e      	mov	r6, r1
 8001a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a74:	4614      	mov	r4, r2
 8001a76:	2900      	cmp	r1, #0
 8001a78:	461d      	mov	r5, r3
 8001a7a:	b096      	sub	sp, #88	; 0x58
 8001a7c:	da08      	bge.n	8001a90 <__swhatbuf_r+0x24>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a84:	602a      	str	r2, [r5, #0]
 8001a86:	061a      	lsls	r2, r3, #24
 8001a88:	d410      	bmi.n	8001aac <__swhatbuf_r+0x40>
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	e00e      	b.n	8001aae <__swhatbuf_r+0x42>
 8001a90:	466a      	mov	r2, sp
 8001a92:	f000 fc91 	bl	80023b8 <_fstat_r>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	dbf1      	blt.n	8001a7e <__swhatbuf_r+0x12>
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001aa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001aa4:	425a      	negs	r2, r3
 8001aa6:	415a      	adcs	r2, r3
 8001aa8:	602a      	str	r2, [r5, #0]
 8001aaa:	e7ee      	b.n	8001a8a <__swhatbuf_r+0x1e>
 8001aac:	2340      	movs	r3, #64	; 0x40
 8001aae:	2000      	movs	r0, #0
 8001ab0:	6023      	str	r3, [r4, #0]
 8001ab2:	b016      	add	sp, #88	; 0x58
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ab8 <__smakebuf_r>:
 8001ab8:	898b      	ldrh	r3, [r1, #12]
 8001aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001abc:	079d      	lsls	r5, r3, #30
 8001abe:	4606      	mov	r6, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	d507      	bpl.n	8001ad4 <__smakebuf_r+0x1c>
 8001ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ac8:	6023      	str	r3, [r4, #0]
 8001aca:	6123      	str	r3, [r4, #16]
 8001acc:	2301      	movs	r3, #1
 8001ace:	6163      	str	r3, [r4, #20]
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	466a      	mov	r2, sp
 8001ad6:	ab01      	add	r3, sp, #4
 8001ad8:	f7ff ffc8 	bl	8001a6c <__swhatbuf_r>
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	4605      	mov	r5, r0
 8001ae0:	4630      	mov	r0, r6
 8001ae2:	f000 f891 	bl	8001c08 <_malloc_r>
 8001ae6:	b948      	cbnz	r0, 8001afc <__smakebuf_r+0x44>
 8001ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aec:	059a      	lsls	r2, r3, #22
 8001aee:	d4ef      	bmi.n	8001ad0 <__smakebuf_r+0x18>
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	81a3      	strh	r3, [r4, #12]
 8001afa:	e7e3      	b.n	8001ac4 <__smakebuf_r+0xc>
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <__smakebuf_r+0x7c>)
 8001afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	6020      	str	r0, [r4, #0]
 8001b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	9b00      	ldr	r3, [sp, #0]
 8001b0c:	6120      	str	r0, [r4, #16]
 8001b0e:	6163      	str	r3, [r4, #20]
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	b15b      	cbz	r3, 8001b2c <__smakebuf_r+0x74>
 8001b14:	4630      	mov	r0, r6
 8001b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b1a:	f000 fc5f 	bl	80023dc <_isatty_r>
 8001b1e:	b128      	cbz	r0, 8001b2c <__smakebuf_r+0x74>
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	81a3      	strh	r3, [r4, #12]
 8001b2c:	89a0      	ldrh	r0, [r4, #12]
 8001b2e:	4305      	orrs	r5, r0
 8001b30:	81a5      	strh	r5, [r4, #12]
 8001b32:	e7cd      	b.n	8001ad0 <__smakebuf_r+0x18>
 8001b34:	080018c5 	.word	0x080018c5

08001b38 <_free_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4605      	mov	r5, r0
 8001b3c:	2900      	cmp	r1, #0
 8001b3e:	d040      	beq.n	8001bc2 <_free_r+0x8a>
 8001b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b44:	1f0c      	subs	r4, r1, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bfb8      	it	lt
 8001b4a:	18e4      	addlt	r4, r4, r3
 8001b4c:	f000 fc76 	bl	800243c <__malloc_lock>
 8001b50:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <_free_r+0x8c>)
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	b933      	cbnz	r3, 8001b64 <_free_r+0x2c>
 8001b56:	6063      	str	r3, [r4, #4]
 8001b58:	6014      	str	r4, [r2, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b60:	f000 bc72 	b.w	8002448 <__malloc_unlock>
 8001b64:	42a3      	cmp	r3, r4
 8001b66:	d908      	bls.n	8001b7a <_free_r+0x42>
 8001b68:	6820      	ldr	r0, [r4, #0]
 8001b6a:	1821      	adds	r1, r4, r0
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	bf01      	itttt	eq
 8001b70:	6819      	ldreq	r1, [r3, #0]
 8001b72:	685b      	ldreq	r3, [r3, #4]
 8001b74:	1809      	addeq	r1, r1, r0
 8001b76:	6021      	streq	r1, [r4, #0]
 8001b78:	e7ed      	b.n	8001b56 <_free_r+0x1e>
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	b10b      	cbz	r3, 8001b84 <_free_r+0x4c>
 8001b80:	42a3      	cmp	r3, r4
 8001b82:	d9fa      	bls.n	8001b7a <_free_r+0x42>
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	1850      	adds	r0, r2, r1
 8001b88:	42a0      	cmp	r0, r4
 8001b8a:	d10b      	bne.n	8001ba4 <_free_r+0x6c>
 8001b8c:	6820      	ldr	r0, [r4, #0]
 8001b8e:	4401      	add	r1, r0
 8001b90:	1850      	adds	r0, r2, r1
 8001b92:	4283      	cmp	r3, r0
 8001b94:	6011      	str	r1, [r2, #0]
 8001b96:	d1e0      	bne.n	8001b5a <_free_r+0x22>
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4401      	add	r1, r0
 8001b9e:	6011      	str	r1, [r2, #0]
 8001ba0:	6053      	str	r3, [r2, #4]
 8001ba2:	e7da      	b.n	8001b5a <_free_r+0x22>
 8001ba4:	d902      	bls.n	8001bac <_free_r+0x74>
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	602b      	str	r3, [r5, #0]
 8001baa:	e7d6      	b.n	8001b5a <_free_r+0x22>
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	1821      	adds	r1, r4, r0
 8001bb0:	428b      	cmp	r3, r1
 8001bb2:	bf01      	itttt	eq
 8001bb4:	6819      	ldreq	r1, [r3, #0]
 8001bb6:	685b      	ldreq	r3, [r3, #4]
 8001bb8:	1809      	addeq	r1, r1, r0
 8001bba:	6021      	streq	r1, [r4, #0]
 8001bbc:	6063      	str	r3, [r4, #4]
 8001bbe:	6054      	str	r4, [r2, #4]
 8001bc0:	e7cb      	b.n	8001b5a <_free_r+0x22>
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	200004dc 	.word	0x200004dc

08001bc8 <sbrk_aligned>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4e0e      	ldr	r6, [pc, #56]	; (8001c04 <sbrk_aligned+0x3c>)
 8001bcc:	460c      	mov	r4, r1
 8001bce:	6831      	ldr	r1, [r6, #0]
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	b911      	cbnz	r1, 8001bda <sbrk_aligned+0x12>
 8001bd4:	f000 fb7a 	bl	80022cc <_sbrk_r>
 8001bd8:	6030      	str	r0, [r6, #0]
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 fb75 	bl	80022cc <_sbrk_r>
 8001be2:	1c43      	adds	r3, r0, #1
 8001be4:	d00a      	beq.n	8001bfc <sbrk_aligned+0x34>
 8001be6:	1cc4      	adds	r4, r0, #3
 8001be8:	f024 0403 	bic.w	r4, r4, #3
 8001bec:	42a0      	cmp	r0, r4
 8001bee:	d007      	beq.n	8001c00 <sbrk_aligned+0x38>
 8001bf0:	1a21      	subs	r1, r4, r0
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 fb6a 	bl	80022cc <_sbrk_r>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d101      	bne.n	8001c00 <sbrk_aligned+0x38>
 8001bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	200004e0 	.word	0x200004e0

08001c08 <_malloc_r>:
 8001c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0c:	1ccd      	adds	r5, r1, #3
 8001c0e:	f025 0503 	bic.w	r5, r5, #3
 8001c12:	3508      	adds	r5, #8
 8001c14:	2d0c      	cmp	r5, #12
 8001c16:	bf38      	it	cc
 8001c18:	250c      	movcc	r5, #12
 8001c1a:	2d00      	cmp	r5, #0
 8001c1c:	4607      	mov	r7, r0
 8001c1e:	db01      	blt.n	8001c24 <_malloc_r+0x1c>
 8001c20:	42a9      	cmp	r1, r5
 8001c22:	d905      	bls.n	8001c30 <_malloc_r+0x28>
 8001c24:	230c      	movs	r3, #12
 8001c26:	2600      	movs	r6, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c30:	4e2e      	ldr	r6, [pc, #184]	; (8001cec <_malloc_r+0xe4>)
 8001c32:	f000 fc03 	bl	800243c <__malloc_lock>
 8001c36:	6833      	ldr	r3, [r6, #0]
 8001c38:	461c      	mov	r4, r3
 8001c3a:	bb34      	cbnz	r4, 8001c8a <_malloc_r+0x82>
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	4638      	mov	r0, r7
 8001c40:	f7ff ffc2 	bl	8001bc8 <sbrk_aligned>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	4604      	mov	r4, r0
 8001c48:	d14d      	bne.n	8001ce6 <_malloc_r+0xde>
 8001c4a:	6834      	ldr	r4, [r6, #0]
 8001c4c:	4626      	mov	r6, r4
 8001c4e:	2e00      	cmp	r6, #0
 8001c50:	d140      	bne.n	8001cd4 <_malloc_r+0xcc>
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	4631      	mov	r1, r6
 8001c56:	4638      	mov	r0, r7
 8001c58:	eb04 0803 	add.w	r8, r4, r3
 8001c5c:	f000 fb36 	bl	80022cc <_sbrk_r>
 8001c60:	4580      	cmp	r8, r0
 8001c62:	d13a      	bne.n	8001cda <_malloc_r+0xd2>
 8001c64:	6821      	ldr	r1, [r4, #0]
 8001c66:	3503      	adds	r5, #3
 8001c68:	1a6d      	subs	r5, r5, r1
 8001c6a:	f025 0503 	bic.w	r5, r5, #3
 8001c6e:	3508      	adds	r5, #8
 8001c70:	2d0c      	cmp	r5, #12
 8001c72:	bf38      	it	cc
 8001c74:	250c      	movcc	r5, #12
 8001c76:	4638      	mov	r0, r7
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7ff ffa5 	bl	8001bc8 <sbrk_aligned>
 8001c7e:	3001      	adds	r0, #1
 8001c80:	d02b      	beq.n	8001cda <_malloc_r+0xd2>
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	442b      	add	r3, r5
 8001c86:	6023      	str	r3, [r4, #0]
 8001c88:	e00e      	b.n	8001ca8 <_malloc_r+0xa0>
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	1b52      	subs	r2, r2, r5
 8001c8e:	d41e      	bmi.n	8001cce <_malloc_r+0xc6>
 8001c90:	2a0b      	cmp	r2, #11
 8001c92:	d916      	bls.n	8001cc2 <_malloc_r+0xba>
 8001c94:	1961      	adds	r1, r4, r5
 8001c96:	42a3      	cmp	r3, r4
 8001c98:	6025      	str	r5, [r4, #0]
 8001c9a:	bf18      	it	ne
 8001c9c:	6059      	strne	r1, [r3, #4]
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	bf08      	it	eq
 8001ca2:	6031      	streq	r1, [r6, #0]
 8001ca4:	5162      	str	r2, [r4, r5]
 8001ca6:	604b      	str	r3, [r1, #4]
 8001ca8:	4638      	mov	r0, r7
 8001caa:	f104 060b 	add.w	r6, r4, #11
 8001cae:	f000 fbcb 	bl	8002448 <__malloc_unlock>
 8001cb2:	f026 0607 	bic.w	r6, r6, #7
 8001cb6:	1d23      	adds	r3, r4, #4
 8001cb8:	1af2      	subs	r2, r6, r3
 8001cba:	d0b6      	beq.n	8001c2a <_malloc_r+0x22>
 8001cbc:	1b9b      	subs	r3, r3, r6
 8001cbe:	50a3      	str	r3, [r4, r2]
 8001cc0:	e7b3      	b.n	8001c2a <_malloc_r+0x22>
 8001cc2:	6862      	ldr	r2, [r4, #4]
 8001cc4:	42a3      	cmp	r3, r4
 8001cc6:	bf0c      	ite	eq
 8001cc8:	6032      	streq	r2, [r6, #0]
 8001cca:	605a      	strne	r2, [r3, #4]
 8001ccc:	e7ec      	b.n	8001ca8 <_malloc_r+0xa0>
 8001cce:	4623      	mov	r3, r4
 8001cd0:	6864      	ldr	r4, [r4, #4]
 8001cd2:	e7b2      	b.n	8001c3a <_malloc_r+0x32>
 8001cd4:	4634      	mov	r4, r6
 8001cd6:	6876      	ldr	r6, [r6, #4]
 8001cd8:	e7b9      	b.n	8001c4e <_malloc_r+0x46>
 8001cda:	230c      	movs	r3, #12
 8001cdc:	4638      	mov	r0, r7
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	f000 fbb2 	bl	8002448 <__malloc_unlock>
 8001ce4:	e7a1      	b.n	8001c2a <_malloc_r+0x22>
 8001ce6:	6025      	str	r5, [r4, #0]
 8001ce8:	e7de      	b.n	8001ca8 <_malloc_r+0xa0>
 8001cea:	bf00      	nop
 8001cec:	200004dc 	.word	0x200004dc

08001cf0 <__sfputc_r>:
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	b410      	push	{r4}
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	6093      	str	r3, [r2, #8]
 8001cfa:	da07      	bge.n	8001d0c <__sfputc_r+0x1c>
 8001cfc:	6994      	ldr	r4, [r2, #24]
 8001cfe:	42a3      	cmp	r3, r4
 8001d00:	db01      	blt.n	8001d06 <__sfputc_r+0x16>
 8001d02:	290a      	cmp	r1, #10
 8001d04:	d102      	bne.n	8001d0c <__sfputc_r+0x1c>
 8001d06:	bc10      	pop	{r4}
 8001d08:	f7ff bc3a 	b.w	8001580 <__swbuf_r>
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	1c58      	adds	r0, r3, #1
 8001d10:	6010      	str	r0, [r2, #0]
 8001d12:	7019      	strb	r1, [r3, #0]
 8001d14:	4608      	mov	r0, r1
 8001d16:	bc10      	pop	{r4}
 8001d18:	4770      	bx	lr

08001d1a <__sfputs_r>:
 8001d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1c:	4606      	mov	r6, r0
 8001d1e:	460f      	mov	r7, r1
 8001d20:	4614      	mov	r4, r2
 8001d22:	18d5      	adds	r5, r2, r3
 8001d24:	42ac      	cmp	r4, r5
 8001d26:	d101      	bne.n	8001d2c <__sfputs_r+0x12>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e007      	b.n	8001d3c <__sfputs_r+0x22>
 8001d2c:	463a      	mov	r2, r7
 8001d2e:	4630      	mov	r0, r6
 8001d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d34:	f7ff ffdc 	bl	8001cf0 <__sfputc_r>
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	d1f3      	bne.n	8001d24 <__sfputs_r+0xa>
 8001d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d40 <_vfiprintf_r>:
 8001d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d44:	460d      	mov	r5, r1
 8001d46:	4614      	mov	r4, r2
 8001d48:	4698      	mov	r8, r3
 8001d4a:	4606      	mov	r6, r0
 8001d4c:	b09d      	sub	sp, #116	; 0x74
 8001d4e:	b118      	cbz	r0, 8001d58 <_vfiprintf_r+0x18>
 8001d50:	6983      	ldr	r3, [r0, #24]
 8001d52:	b90b      	cbnz	r3, 8001d58 <_vfiprintf_r+0x18>
 8001d54:	f7ff fdea 	bl	800192c <__sinit>
 8001d58:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <_vfiprintf_r+0x240>)
 8001d5a:	429d      	cmp	r5, r3
 8001d5c:	d11b      	bne.n	8001d96 <_vfiprintf_r+0x56>
 8001d5e:	6875      	ldr	r5, [r6, #4]
 8001d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d62:	07d9      	lsls	r1, r3, #31
 8001d64:	d405      	bmi.n	8001d72 <_vfiprintf_r+0x32>
 8001d66:	89ab      	ldrh	r3, [r5, #12]
 8001d68:	059a      	lsls	r2, r3, #22
 8001d6a:	d402      	bmi.n	8001d72 <_vfiprintf_r+0x32>
 8001d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d6e:	f7ff fe7b 	bl	8001a68 <__retarget_lock_acquire_recursive>
 8001d72:	89ab      	ldrh	r3, [r5, #12]
 8001d74:	071b      	lsls	r3, r3, #28
 8001d76:	d501      	bpl.n	8001d7c <_vfiprintf_r+0x3c>
 8001d78:	692b      	ldr	r3, [r5, #16]
 8001d7a:	b9eb      	cbnz	r3, 8001db8 <_vfiprintf_r+0x78>
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f7ff fc50 	bl	8001624 <__swsetup_r>
 8001d84:	b1c0      	cbz	r0, 8001db8 <_vfiprintf_r+0x78>
 8001d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d88:	07dc      	lsls	r4, r3, #31
 8001d8a:	d50e      	bpl.n	8001daa <_vfiprintf_r+0x6a>
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	b01d      	add	sp, #116	; 0x74
 8001d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <_vfiprintf_r+0x244>)
 8001d98:	429d      	cmp	r5, r3
 8001d9a:	d101      	bne.n	8001da0 <_vfiprintf_r+0x60>
 8001d9c:	68b5      	ldr	r5, [r6, #8]
 8001d9e:	e7df      	b.n	8001d60 <_vfiprintf_r+0x20>
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <_vfiprintf_r+0x248>)
 8001da2:	429d      	cmp	r5, r3
 8001da4:	bf08      	it	eq
 8001da6:	68f5      	ldreq	r5, [r6, #12]
 8001da8:	e7da      	b.n	8001d60 <_vfiprintf_r+0x20>
 8001daa:	89ab      	ldrh	r3, [r5, #12]
 8001dac:	0598      	lsls	r0, r3, #22
 8001dae:	d4ed      	bmi.n	8001d8c <_vfiprintf_r+0x4c>
 8001db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001db2:	f7ff fe5a 	bl	8001a6a <__retarget_lock_release_recursive>
 8001db6:	e7e9      	b.n	8001d8c <_vfiprintf_r+0x4c>
 8001db8:	2300      	movs	r3, #0
 8001dba:	9309      	str	r3, [sp, #36]	; 0x24
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001dc2:	2330      	movs	r3, #48	; 0x30
 8001dc4:	f04f 0901 	mov.w	r9, #1
 8001dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8001dcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001f8c <_vfiprintf_r+0x24c>
 8001dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ddc:	b10a      	cbz	r2, 8001de2 <_vfiprintf_r+0xa2>
 8001dde:	2a25      	cmp	r2, #37	; 0x25
 8001de0:	d1f9      	bne.n	8001dd6 <_vfiprintf_r+0x96>
 8001de2:	ebba 0b04 	subs.w	fp, sl, r4
 8001de6:	d00b      	beq.n	8001e00 <_vfiprintf_r+0xc0>
 8001de8:	465b      	mov	r3, fp
 8001dea:	4622      	mov	r2, r4
 8001dec:	4629      	mov	r1, r5
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff ff93 	bl	8001d1a <__sfputs_r>
 8001df4:	3001      	adds	r0, #1
 8001df6:	f000 80aa 	beq.w	8001f4e <_vfiprintf_r+0x20e>
 8001dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dfc:	445a      	add	r2, fp
 8001dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8001e00:	f89a 3000 	ldrb.w	r3, [sl]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80a2 	beq.w	8001f4e <_vfiprintf_r+0x20e>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e14:	f10a 0a01 	add.w	sl, sl, #1
 8001e18:	9304      	str	r3, [sp, #16]
 8001e1a:	9307      	str	r3, [sp, #28]
 8001e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e20:	931a      	str	r3, [sp, #104]	; 0x68
 8001e22:	4654      	mov	r4, sl
 8001e24:	2205      	movs	r2, #5
 8001e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e2a:	4858      	ldr	r0, [pc, #352]	; (8001f8c <_vfiprintf_r+0x24c>)
 8001e2c:	f000 faf8 	bl	8002420 <memchr>
 8001e30:	9a04      	ldr	r2, [sp, #16]
 8001e32:	b9d8      	cbnz	r0, 8001e6c <_vfiprintf_r+0x12c>
 8001e34:	06d1      	lsls	r1, r2, #27
 8001e36:	bf44      	itt	mi
 8001e38:	2320      	movmi	r3, #32
 8001e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e3e:	0713      	lsls	r3, r2, #28
 8001e40:	bf44      	itt	mi
 8001e42:	232b      	movmi	r3, #43	; 0x2b
 8001e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e48:	f89a 3000 	ldrb.w	r3, [sl]
 8001e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e4e:	d015      	beq.n	8001e7c <_vfiprintf_r+0x13c>
 8001e50:	4654      	mov	r4, sl
 8001e52:	2000      	movs	r0, #0
 8001e54:	f04f 0c0a 	mov.w	ip, #10
 8001e58:	9a07      	ldr	r2, [sp, #28]
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e60:	3b30      	subs	r3, #48	; 0x30
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d94e      	bls.n	8001f04 <_vfiprintf_r+0x1c4>
 8001e66:	b1b0      	cbz	r0, 8001e96 <_vfiprintf_r+0x156>
 8001e68:	9207      	str	r2, [sp, #28]
 8001e6a:	e014      	b.n	8001e96 <_vfiprintf_r+0x156>
 8001e6c:	eba0 0308 	sub.w	r3, r0, r8
 8001e70:	fa09 f303 	lsl.w	r3, r9, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	46a2      	mov	sl, r4
 8001e78:	9304      	str	r3, [sp, #16]
 8001e7a:	e7d2      	b.n	8001e22 <_vfiprintf_r+0xe2>
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	1d19      	adds	r1, r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	9103      	str	r1, [sp, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bfbb      	ittet	lt
 8001e88:	425b      	neglt	r3, r3
 8001e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e8e:	9307      	strge	r3, [sp, #28]
 8001e90:	9307      	strlt	r3, [sp, #28]
 8001e92:	bfb8      	it	lt
 8001e94:	9204      	strlt	r2, [sp, #16]
 8001e96:	7823      	ldrb	r3, [r4, #0]
 8001e98:	2b2e      	cmp	r3, #46	; 0x2e
 8001e9a:	d10c      	bne.n	8001eb6 <_vfiprintf_r+0x176>
 8001e9c:	7863      	ldrb	r3, [r4, #1]
 8001e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea0:	d135      	bne.n	8001f0e <_vfiprintf_r+0x1ce>
 8001ea2:	9b03      	ldr	r3, [sp, #12]
 8001ea4:	3402      	adds	r4, #2
 8001ea6:	1d1a      	adds	r2, r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	9203      	str	r2, [sp, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bfb8      	it	lt
 8001eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8001eb4:	9305      	str	r3, [sp, #20]
 8001eb6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001f90 <_vfiprintf_r+0x250>
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4650      	mov	r0, sl
 8001ebe:	7821      	ldrb	r1, [r4, #0]
 8001ec0:	f000 faae 	bl	8002420 <memchr>
 8001ec4:	b140      	cbz	r0, 8001ed8 <_vfiprintf_r+0x198>
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	eba0 000a 	sub.w	r0, r0, sl
 8001ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ed0:	9b04      	ldr	r3, [sp, #16]
 8001ed2:	3401      	adds	r4, #1
 8001ed4:	4303      	orrs	r3, r0
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001edc:	2206      	movs	r2, #6
 8001ede:	482d      	ldr	r0, [pc, #180]	; (8001f94 <_vfiprintf_r+0x254>)
 8001ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ee4:	f000 fa9c 	bl	8002420 <memchr>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d03f      	beq.n	8001f6c <_vfiprintf_r+0x22c>
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <_vfiprintf_r+0x258>)
 8001eee:	bb1b      	cbnz	r3, 8001f38 <_vfiprintf_r+0x1f8>
 8001ef0:	9b03      	ldr	r3, [sp, #12]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	f023 0307 	bic.w	r3, r3, #7
 8001ef8:	3308      	adds	r3, #8
 8001efa:	9303      	str	r3, [sp, #12]
 8001efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001efe:	443b      	add	r3, r7
 8001f00:	9309      	str	r3, [sp, #36]	; 0x24
 8001f02:	e767      	b.n	8001dd4 <_vfiprintf_r+0x94>
 8001f04:	460c      	mov	r4, r1
 8001f06:	2001      	movs	r0, #1
 8001f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f0c:	e7a5      	b.n	8001e5a <_vfiprintf_r+0x11a>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f04f 0c0a 	mov.w	ip, #10
 8001f14:	4619      	mov	r1, r3
 8001f16:	3401      	adds	r4, #1
 8001f18:	9305      	str	r3, [sp, #20]
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f20:	3a30      	subs	r2, #48	; 0x30
 8001f22:	2a09      	cmp	r2, #9
 8001f24:	d903      	bls.n	8001f2e <_vfiprintf_r+0x1ee>
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0c5      	beq.n	8001eb6 <_vfiprintf_r+0x176>
 8001f2a:	9105      	str	r1, [sp, #20]
 8001f2c:	e7c3      	b.n	8001eb6 <_vfiprintf_r+0x176>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	2301      	movs	r3, #1
 8001f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f36:	e7f0      	b.n	8001f1a <_vfiprintf_r+0x1da>
 8001f38:	ab03      	add	r3, sp, #12
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	4630      	mov	r0, r6
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <_vfiprintf_r+0x25c>)
 8001f42:	a904      	add	r1, sp, #16
 8001f44:	f3af 8000 	nop.w
 8001f48:	4607      	mov	r7, r0
 8001f4a:	1c78      	adds	r0, r7, #1
 8001f4c:	d1d6      	bne.n	8001efc <_vfiprintf_r+0x1bc>
 8001f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f50:	07d9      	lsls	r1, r3, #31
 8001f52:	d405      	bmi.n	8001f60 <_vfiprintf_r+0x220>
 8001f54:	89ab      	ldrh	r3, [r5, #12]
 8001f56:	059a      	lsls	r2, r3, #22
 8001f58:	d402      	bmi.n	8001f60 <_vfiprintf_r+0x220>
 8001f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f5c:	f7ff fd85 	bl	8001a6a <__retarget_lock_release_recursive>
 8001f60:	89ab      	ldrh	r3, [r5, #12]
 8001f62:	065b      	lsls	r3, r3, #25
 8001f64:	f53f af12 	bmi.w	8001d8c <_vfiprintf_r+0x4c>
 8001f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f6a:	e711      	b.n	8001d90 <_vfiprintf_r+0x50>
 8001f6c:	ab03      	add	r3, sp, #12
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	462a      	mov	r2, r5
 8001f72:	4630      	mov	r0, r6
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <_vfiprintf_r+0x25c>)
 8001f76:	a904      	add	r1, sp, #16
 8001f78:	f000 f882 	bl	8002080 <_printf_i>
 8001f7c:	e7e4      	b.n	8001f48 <_vfiprintf_r+0x208>
 8001f7e:	bf00      	nop
 8001f80:	08002adc 	.word	0x08002adc
 8001f84:	08002afc 	.word	0x08002afc
 8001f88:	08002abc 	.word	0x08002abc
 8001f8c:	08002b1c 	.word	0x08002b1c
 8001f90:	08002b22 	.word	0x08002b22
 8001f94:	08002b26 	.word	0x08002b26
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	08001d1b 	.word	0x08001d1b

08001fa0 <_printf_common>:
 8001fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa4:	4616      	mov	r6, r2
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	688a      	ldr	r2, [r1, #8]
 8001faa:	690b      	ldr	r3, [r1, #16]
 8001fac:	4607      	mov	r7, r0
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	bfb8      	it	lt
 8001fb2:	4613      	movlt	r3, r2
 8001fb4:	6033      	str	r3, [r6, #0]
 8001fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001fba:	460c      	mov	r4, r1
 8001fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001fc0:	b10a      	cbz	r2, 8001fc6 <_printf_common+0x26>
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	6033      	str	r3, [r6, #0]
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	0699      	lsls	r1, r3, #26
 8001fca:	bf42      	ittt	mi
 8001fcc:	6833      	ldrmi	r3, [r6, #0]
 8001fce:	3302      	addmi	r3, #2
 8001fd0:	6033      	strmi	r3, [r6, #0]
 8001fd2:	6825      	ldr	r5, [r4, #0]
 8001fd4:	f015 0506 	ands.w	r5, r5, #6
 8001fd8:	d106      	bne.n	8001fe8 <_printf_common+0x48>
 8001fda:	f104 0a19 	add.w	sl, r4, #25
 8001fde:	68e3      	ldr	r3, [r4, #12]
 8001fe0:	6832      	ldr	r2, [r6, #0]
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	42ab      	cmp	r3, r5
 8001fe6:	dc28      	bgt.n	800203a <_printf_common+0x9a>
 8001fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fec:	1e13      	subs	r3, r2, #0
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	bf18      	it	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	0692      	lsls	r2, r2, #26
 8001ff6:	d42d      	bmi.n	8002054 <_printf_common+0xb4>
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002000:	47c0      	blx	r8
 8002002:	3001      	adds	r0, #1
 8002004:	d020      	beq.n	8002048 <_printf_common+0xa8>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	68e5      	ldr	r5, [r4, #12]
 800200a:	f003 0306 	and.w	r3, r3, #6
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf18      	it	ne
 8002012:	2500      	movne	r5, #0
 8002014:	6832      	ldr	r2, [r6, #0]
 8002016:	f04f 0600 	mov.w	r6, #0
 800201a:	68a3      	ldr	r3, [r4, #8]
 800201c:	bf08      	it	eq
 800201e:	1aad      	subeq	r5, r5, r2
 8002020:	6922      	ldr	r2, [r4, #16]
 8002022:	bf08      	it	eq
 8002024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002028:	4293      	cmp	r3, r2
 800202a:	bfc4      	itt	gt
 800202c:	1a9b      	subgt	r3, r3, r2
 800202e:	18ed      	addgt	r5, r5, r3
 8002030:	341a      	adds	r4, #26
 8002032:	42b5      	cmp	r5, r6
 8002034:	d11a      	bne.n	800206c <_printf_common+0xcc>
 8002036:	2000      	movs	r0, #0
 8002038:	e008      	b.n	800204c <_printf_common+0xac>
 800203a:	2301      	movs	r3, #1
 800203c:	4652      	mov	r2, sl
 800203e:	4649      	mov	r1, r9
 8002040:	4638      	mov	r0, r7
 8002042:	47c0      	blx	r8
 8002044:	3001      	adds	r0, #1
 8002046:	d103      	bne.n	8002050 <_printf_common+0xb0>
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002050:	3501      	adds	r5, #1
 8002052:	e7c4      	b.n	8001fde <_printf_common+0x3e>
 8002054:	2030      	movs	r0, #48	; 0x30
 8002056:	18e1      	adds	r1, r4, r3
 8002058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002062:	4422      	add	r2, r4
 8002064:	3302      	adds	r3, #2
 8002066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800206a:	e7c5      	b.n	8001ff8 <_printf_common+0x58>
 800206c:	2301      	movs	r3, #1
 800206e:	4622      	mov	r2, r4
 8002070:	4649      	mov	r1, r9
 8002072:	4638      	mov	r0, r7
 8002074:	47c0      	blx	r8
 8002076:	3001      	adds	r0, #1
 8002078:	d0e6      	beq.n	8002048 <_printf_common+0xa8>
 800207a:	3601      	adds	r6, #1
 800207c:	e7d9      	b.n	8002032 <_printf_common+0x92>
	...

08002080 <_printf_i>:
 8002080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002084:	7e0f      	ldrb	r7, [r1, #24]
 8002086:	4691      	mov	r9, r2
 8002088:	2f78      	cmp	r7, #120	; 0x78
 800208a:	4680      	mov	r8, r0
 800208c:	460c      	mov	r4, r1
 800208e:	469a      	mov	sl, r3
 8002090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002096:	d807      	bhi.n	80020a8 <_printf_i+0x28>
 8002098:	2f62      	cmp	r7, #98	; 0x62
 800209a:	d80a      	bhi.n	80020b2 <_printf_i+0x32>
 800209c:	2f00      	cmp	r7, #0
 800209e:	f000 80d9 	beq.w	8002254 <_printf_i+0x1d4>
 80020a2:	2f58      	cmp	r7, #88	; 0x58
 80020a4:	f000 80a4 	beq.w	80021f0 <_printf_i+0x170>
 80020a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80020b0:	e03a      	b.n	8002128 <_printf_i+0xa8>
 80020b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80020b6:	2b15      	cmp	r3, #21
 80020b8:	d8f6      	bhi.n	80020a8 <_printf_i+0x28>
 80020ba:	a101      	add	r1, pc, #4	; (adr r1, 80020c0 <_printf_i+0x40>)
 80020bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80020c0:	08002119 	.word	0x08002119
 80020c4:	0800212d 	.word	0x0800212d
 80020c8:	080020a9 	.word	0x080020a9
 80020cc:	080020a9 	.word	0x080020a9
 80020d0:	080020a9 	.word	0x080020a9
 80020d4:	080020a9 	.word	0x080020a9
 80020d8:	0800212d 	.word	0x0800212d
 80020dc:	080020a9 	.word	0x080020a9
 80020e0:	080020a9 	.word	0x080020a9
 80020e4:	080020a9 	.word	0x080020a9
 80020e8:	080020a9 	.word	0x080020a9
 80020ec:	0800223b 	.word	0x0800223b
 80020f0:	0800215d 	.word	0x0800215d
 80020f4:	0800221d 	.word	0x0800221d
 80020f8:	080020a9 	.word	0x080020a9
 80020fc:	080020a9 	.word	0x080020a9
 8002100:	0800225d 	.word	0x0800225d
 8002104:	080020a9 	.word	0x080020a9
 8002108:	0800215d 	.word	0x0800215d
 800210c:	080020a9 	.word	0x080020a9
 8002110:	080020a9 	.word	0x080020a9
 8002114:	08002225 	.word	0x08002225
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	1d1a      	adds	r2, r3, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	602a      	str	r2, [r5, #0]
 8002120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002128:	2301      	movs	r3, #1
 800212a:	e0a4      	b.n	8002276 <_printf_i+0x1f6>
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	6829      	ldr	r1, [r5, #0]
 8002130:	0606      	lsls	r6, r0, #24
 8002132:	f101 0304 	add.w	r3, r1, #4
 8002136:	d50a      	bpl.n	800214e <_printf_i+0xce>
 8002138:	680e      	ldr	r6, [r1, #0]
 800213a:	602b      	str	r3, [r5, #0]
 800213c:	2e00      	cmp	r6, #0
 800213e:	da03      	bge.n	8002148 <_printf_i+0xc8>
 8002140:	232d      	movs	r3, #45	; 0x2d
 8002142:	4276      	negs	r6, r6
 8002144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002148:	230a      	movs	r3, #10
 800214a:	485e      	ldr	r0, [pc, #376]	; (80022c4 <_printf_i+0x244>)
 800214c:	e019      	b.n	8002182 <_printf_i+0x102>
 800214e:	680e      	ldr	r6, [r1, #0]
 8002150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	bf18      	it	ne
 8002158:	b236      	sxthne	r6, r6
 800215a:	e7ef      	b.n	800213c <_printf_i+0xbc>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	6820      	ldr	r0, [r4, #0]
 8002160:	1d19      	adds	r1, r3, #4
 8002162:	6029      	str	r1, [r5, #0]
 8002164:	0601      	lsls	r1, r0, #24
 8002166:	d501      	bpl.n	800216c <_printf_i+0xec>
 8002168:	681e      	ldr	r6, [r3, #0]
 800216a:	e002      	b.n	8002172 <_printf_i+0xf2>
 800216c:	0646      	lsls	r6, r0, #25
 800216e:	d5fb      	bpl.n	8002168 <_printf_i+0xe8>
 8002170:	881e      	ldrh	r6, [r3, #0]
 8002172:	2f6f      	cmp	r7, #111	; 0x6f
 8002174:	bf0c      	ite	eq
 8002176:	2308      	moveq	r3, #8
 8002178:	230a      	movne	r3, #10
 800217a:	4852      	ldr	r0, [pc, #328]	; (80022c4 <_printf_i+0x244>)
 800217c:	2100      	movs	r1, #0
 800217e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002182:	6865      	ldr	r5, [r4, #4]
 8002184:	2d00      	cmp	r5, #0
 8002186:	bfa8      	it	ge
 8002188:	6821      	ldrge	r1, [r4, #0]
 800218a:	60a5      	str	r5, [r4, #8]
 800218c:	bfa4      	itt	ge
 800218e:	f021 0104 	bicge.w	r1, r1, #4
 8002192:	6021      	strge	r1, [r4, #0]
 8002194:	b90e      	cbnz	r6, 800219a <_printf_i+0x11a>
 8002196:	2d00      	cmp	r5, #0
 8002198:	d04d      	beq.n	8002236 <_printf_i+0x1b6>
 800219a:	4615      	mov	r5, r2
 800219c:	fbb6 f1f3 	udiv	r1, r6, r3
 80021a0:	fb03 6711 	mls	r7, r3, r1, r6
 80021a4:	5dc7      	ldrb	r7, [r0, r7]
 80021a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80021aa:	4637      	mov	r7, r6
 80021ac:	42bb      	cmp	r3, r7
 80021ae:	460e      	mov	r6, r1
 80021b0:	d9f4      	bls.n	800219c <_printf_i+0x11c>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d10b      	bne.n	80021ce <_printf_i+0x14e>
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	07de      	lsls	r6, r3, #31
 80021ba:	d508      	bpl.n	80021ce <_printf_i+0x14e>
 80021bc:	6923      	ldr	r3, [r4, #16]
 80021be:	6861      	ldr	r1, [r4, #4]
 80021c0:	4299      	cmp	r1, r3
 80021c2:	bfde      	ittt	le
 80021c4:	2330      	movle	r3, #48	; 0x30
 80021c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80021ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80021ce:	1b52      	subs	r2, r2, r5
 80021d0:	6122      	str	r2, [r4, #16]
 80021d2:	464b      	mov	r3, r9
 80021d4:	4621      	mov	r1, r4
 80021d6:	4640      	mov	r0, r8
 80021d8:	f8cd a000 	str.w	sl, [sp]
 80021dc:	aa03      	add	r2, sp, #12
 80021de:	f7ff fedf 	bl	8001fa0 <_printf_common>
 80021e2:	3001      	adds	r0, #1
 80021e4:	d14c      	bne.n	8002280 <_printf_i+0x200>
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ea:	b004      	add	sp, #16
 80021ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f0:	4834      	ldr	r0, [pc, #208]	; (80022c4 <_printf_i+0x244>)
 80021f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021f6:	6829      	ldr	r1, [r5, #0]
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80021fe:	6029      	str	r1, [r5, #0]
 8002200:	061d      	lsls	r5, r3, #24
 8002202:	d514      	bpl.n	800222e <_printf_i+0x1ae>
 8002204:	07df      	lsls	r7, r3, #31
 8002206:	bf44      	itt	mi
 8002208:	f043 0320 	orrmi.w	r3, r3, #32
 800220c:	6023      	strmi	r3, [r4, #0]
 800220e:	b91e      	cbnz	r6, 8002218 <_printf_i+0x198>
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	f023 0320 	bic.w	r3, r3, #32
 8002216:	6023      	str	r3, [r4, #0]
 8002218:	2310      	movs	r3, #16
 800221a:	e7af      	b.n	800217c <_printf_i+0xfc>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	f043 0320 	orr.w	r3, r3, #32
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	2378      	movs	r3, #120	; 0x78
 8002226:	4828      	ldr	r0, [pc, #160]	; (80022c8 <_printf_i+0x248>)
 8002228:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800222c:	e7e3      	b.n	80021f6 <_printf_i+0x176>
 800222e:	0659      	lsls	r1, r3, #25
 8002230:	bf48      	it	mi
 8002232:	b2b6      	uxthmi	r6, r6
 8002234:	e7e6      	b.n	8002204 <_printf_i+0x184>
 8002236:	4615      	mov	r5, r2
 8002238:	e7bb      	b.n	80021b2 <_printf_i+0x132>
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	6826      	ldr	r6, [r4, #0]
 800223e:	1d18      	adds	r0, r3, #4
 8002240:	6961      	ldr	r1, [r4, #20]
 8002242:	6028      	str	r0, [r5, #0]
 8002244:	0635      	lsls	r5, r6, #24
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	d501      	bpl.n	800224e <_printf_i+0x1ce>
 800224a:	6019      	str	r1, [r3, #0]
 800224c:	e002      	b.n	8002254 <_printf_i+0x1d4>
 800224e:	0670      	lsls	r0, r6, #25
 8002250:	d5fb      	bpl.n	800224a <_printf_i+0x1ca>
 8002252:	8019      	strh	r1, [r3, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	4615      	mov	r5, r2
 8002258:	6123      	str	r3, [r4, #16]
 800225a:	e7ba      	b.n	80021d2 <_printf_i+0x152>
 800225c:	682b      	ldr	r3, [r5, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	1d1a      	adds	r2, r3, #4
 8002262:	602a      	str	r2, [r5, #0]
 8002264:	681d      	ldr	r5, [r3, #0]
 8002266:	6862      	ldr	r2, [r4, #4]
 8002268:	4628      	mov	r0, r5
 800226a:	f000 f8d9 	bl	8002420 <memchr>
 800226e:	b108      	cbz	r0, 8002274 <_printf_i+0x1f4>
 8002270:	1b40      	subs	r0, r0, r5
 8002272:	6060      	str	r0, [r4, #4]
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	6123      	str	r3, [r4, #16]
 8002278:	2300      	movs	r3, #0
 800227a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800227e:	e7a8      	b.n	80021d2 <_printf_i+0x152>
 8002280:	462a      	mov	r2, r5
 8002282:	4649      	mov	r1, r9
 8002284:	4640      	mov	r0, r8
 8002286:	6923      	ldr	r3, [r4, #16]
 8002288:	47d0      	blx	sl
 800228a:	3001      	adds	r0, #1
 800228c:	d0ab      	beq.n	80021e6 <_printf_i+0x166>
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	079b      	lsls	r3, r3, #30
 8002292:	d413      	bmi.n	80022bc <_printf_i+0x23c>
 8002294:	68e0      	ldr	r0, [r4, #12]
 8002296:	9b03      	ldr	r3, [sp, #12]
 8002298:	4298      	cmp	r0, r3
 800229a:	bfb8      	it	lt
 800229c:	4618      	movlt	r0, r3
 800229e:	e7a4      	b.n	80021ea <_printf_i+0x16a>
 80022a0:	2301      	movs	r3, #1
 80022a2:	4632      	mov	r2, r6
 80022a4:	4649      	mov	r1, r9
 80022a6:	4640      	mov	r0, r8
 80022a8:	47d0      	blx	sl
 80022aa:	3001      	adds	r0, #1
 80022ac:	d09b      	beq.n	80021e6 <_printf_i+0x166>
 80022ae:	3501      	adds	r5, #1
 80022b0:	68e3      	ldr	r3, [r4, #12]
 80022b2:	9903      	ldr	r1, [sp, #12]
 80022b4:	1a5b      	subs	r3, r3, r1
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	dcf2      	bgt.n	80022a0 <_printf_i+0x220>
 80022ba:	e7eb      	b.n	8002294 <_printf_i+0x214>
 80022bc:	2500      	movs	r5, #0
 80022be:	f104 0619 	add.w	r6, r4, #25
 80022c2:	e7f5      	b.n	80022b0 <_printf_i+0x230>
 80022c4:	08002b2d 	.word	0x08002b2d
 80022c8:	08002b3e 	.word	0x08002b3e

080022cc <_sbrk_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	2300      	movs	r3, #0
 80022d0:	4d05      	ldr	r5, [pc, #20]	; (80022e8 <_sbrk_r+0x1c>)
 80022d2:	4604      	mov	r4, r0
 80022d4:	4608      	mov	r0, r1
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	f000 f9c6 	bl	8002668 <_sbrk>
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d102      	bne.n	80022e6 <_sbrk_r+0x1a>
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	b103      	cbz	r3, 80022e6 <_sbrk_r+0x1a>
 80022e4:	6023      	str	r3, [r4, #0]
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
 80022e8:	200004e4 	.word	0x200004e4

080022ec <__sread>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	460c      	mov	r4, r1
 80022f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f4:	f000 f8ae 	bl	8002454 <_read_r>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	bfab      	itete	ge
 80022fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022fe:	89a3      	ldrhlt	r3, [r4, #12]
 8002300:	181b      	addge	r3, r3, r0
 8002302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002306:	bfac      	ite	ge
 8002308:	6563      	strge	r3, [r4, #84]	; 0x54
 800230a:	81a3      	strhlt	r3, [r4, #12]
 800230c:	bd10      	pop	{r4, pc}

0800230e <__swrite>:
 800230e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002312:	461f      	mov	r7, r3
 8002314:	898b      	ldrh	r3, [r1, #12]
 8002316:	4605      	mov	r5, r0
 8002318:	05db      	lsls	r3, r3, #23
 800231a:	460c      	mov	r4, r1
 800231c:	4616      	mov	r6, r2
 800231e:	d505      	bpl.n	800232c <__swrite+0x1e>
 8002320:	2302      	movs	r3, #2
 8002322:	2200      	movs	r2, #0
 8002324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002328:	f000 f868 	bl	80023fc <_lseek_r>
 800232c:	89a3      	ldrh	r3, [r4, #12]
 800232e:	4632      	mov	r2, r6
 8002330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002334:	81a3      	strh	r3, [r4, #12]
 8002336:	4628      	mov	r0, r5
 8002338:	463b      	mov	r3, r7
 800233a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800233e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002342:	f000 b817 	b.w	8002374 <_write_r>

08002346 <__sseek>:
 8002346:	b510      	push	{r4, lr}
 8002348:	460c      	mov	r4, r1
 800234a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800234e:	f000 f855 	bl	80023fc <_lseek_r>
 8002352:	1c43      	adds	r3, r0, #1
 8002354:	89a3      	ldrh	r3, [r4, #12]
 8002356:	bf15      	itete	ne
 8002358:	6560      	strne	r0, [r4, #84]	; 0x54
 800235a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800235e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002362:	81a3      	strheq	r3, [r4, #12]
 8002364:	bf18      	it	ne
 8002366:	81a3      	strhne	r3, [r4, #12]
 8002368:	bd10      	pop	{r4, pc}

0800236a <__sclose>:
 800236a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800236e:	f000 b813 	b.w	8002398 <_close_r>
	...

08002374 <_write_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	2200      	movs	r2, #0
 800237e:	4d05      	ldr	r5, [pc, #20]	; (8002394 <_write_r+0x20>)
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f000 f91d 	bl	80025c2 <_write>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_write_r+0x1e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_write_r+0x1e>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	200004e4 	.word	0x200004e4

08002398 <_close_r>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	2300      	movs	r3, #0
 800239c:	4d05      	ldr	r5, [pc, #20]	; (80023b4 <_close_r+0x1c>)
 800239e:	4604      	mov	r4, r0
 80023a0:	4608      	mov	r0, r1
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	f000 f93a 	bl	800261c <_close>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_close_r+0x1a>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_close_r+0x1a>
 80023b0:	6023      	str	r3, [r4, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	200004e4 	.word	0x200004e4

080023b8 <_fstat_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	2300      	movs	r3, #0
 80023bc:	4d06      	ldr	r5, [pc, #24]	; (80023d8 <_fstat_r+0x20>)
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	f000 f994 	bl	80026f2 <_fstat>
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	d102      	bne.n	80023d4 <_fstat_r+0x1c>
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	b103      	cbz	r3, 80023d4 <_fstat_r+0x1c>
 80023d2:	6023      	str	r3, [r4, #0]
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
 80023d6:	bf00      	nop
 80023d8:	200004e4 	.word	0x200004e4

080023dc <_isatty_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	2300      	movs	r3, #0
 80023e0:	4d05      	ldr	r5, [pc, #20]	; (80023f8 <_isatty_r+0x1c>)
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	602b      	str	r3, [r5, #0]
 80023e8:	f000 faea 	bl	80029c0 <_isatty>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d102      	bne.n	80023f6 <_isatty_r+0x1a>
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	b103      	cbz	r3, 80023f6 <_isatty_r+0x1a>
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	200004e4 	.word	0x200004e4

080023fc <_lseek_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	2200      	movs	r2, #0
 8002406:	4d05      	ldr	r5, [pc, #20]	; (800241c <_lseek_r+0x20>)
 8002408:	602a      	str	r2, [r5, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8c7 	bl	800259e <_lseek>
 8002410:	1c43      	adds	r3, r0, #1
 8002412:	d102      	bne.n	800241a <_lseek_r+0x1e>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b103      	cbz	r3, 800241a <_lseek_r+0x1e>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	200004e4 	.word	0x200004e4

08002420 <memchr>:
 8002420:	4603      	mov	r3, r0
 8002422:	b510      	push	{r4, lr}
 8002424:	b2c9      	uxtb	r1, r1
 8002426:	4402      	add	r2, r0
 8002428:	4293      	cmp	r3, r2
 800242a:	4618      	mov	r0, r3
 800242c:	d101      	bne.n	8002432 <memchr+0x12>
 800242e:	2000      	movs	r0, #0
 8002430:	e003      	b.n	800243a <memchr+0x1a>
 8002432:	7804      	ldrb	r4, [r0, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	428c      	cmp	r4, r1
 8002438:	d1f6      	bne.n	8002428 <memchr+0x8>
 800243a:	bd10      	pop	{r4, pc}

0800243c <__malloc_lock>:
 800243c:	4801      	ldr	r0, [pc, #4]	; (8002444 <__malloc_lock+0x8>)
 800243e:	f7ff bb13 	b.w	8001a68 <__retarget_lock_acquire_recursive>
 8002442:	bf00      	nop
 8002444:	200004d9 	.word	0x200004d9

08002448 <__malloc_unlock>:
 8002448:	4801      	ldr	r0, [pc, #4]	; (8002450 <__malloc_unlock+0x8>)
 800244a:	f7ff bb0e 	b.w	8001a6a <__retarget_lock_release_recursive>
 800244e:	bf00      	nop
 8002450:	200004d9 	.word	0x200004d9

08002454 <_read_r>:
 8002454:	b538      	push	{r3, r4, r5, lr}
 8002456:	4604      	mov	r4, r0
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	2200      	movs	r2, #0
 800245e:	4d05      	ldr	r5, [pc, #20]	; (8002474 <_read_r+0x20>)
 8002460:	602a      	str	r2, [r5, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	f000 f845 	bl	80024f2 <_read>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_read_r+0x1e>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_read_r+0x1e>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	200004e4 	.word	0x200004e4

08002478 <findslot>:
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <findslot+0x2c>)
 800247a:	b510      	push	{r4, lr}
 800247c:	4604      	mov	r4, r0
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	b118      	cbz	r0, 800248a <findslot+0x12>
 8002482:	6983      	ldr	r3, [r0, #24]
 8002484:	b90b      	cbnz	r3, 800248a <findslot+0x12>
 8002486:	f7ff fa51 	bl	800192c <__sinit>
 800248a:	2c13      	cmp	r4, #19
 800248c:	d807      	bhi.n	800249e <findslot+0x26>
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <findslot+0x30>)
 8002490:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002494:	3201      	adds	r2, #1
 8002496:	d002      	beq.n	800249e <findslot+0x26>
 8002498:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800249c:	bd10      	pop	{r4, pc}
 800249e:	2000      	movs	r0, #0
 80024a0:	e7fc      	b.n	800249c <findslot+0x24>
 80024a2:	bf00      	nop
 80024a4:	20000028 	.word	0x20000028
 80024a8:	200004f8 	.word	0x200004f8

080024ac <error>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	4604      	mov	r4, r0
 80024b0:	f000 faa2 	bl	80029f8 <__errno>
 80024b4:	2613      	movs	r6, #19
 80024b6:	4605      	mov	r5, r0
 80024b8:	2700      	movs	r7, #0
 80024ba:	4630      	mov	r0, r6
 80024bc:	4639      	mov	r1, r7
 80024be:	beab      	bkpt	0x00ab
 80024c0:	4606      	mov	r6, r0
 80024c2:	4620      	mov	r0, r4
 80024c4:	602e      	str	r6, [r5, #0]
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024c8 <checkerror>:
 80024c8:	1c43      	adds	r3, r0, #1
 80024ca:	d101      	bne.n	80024d0 <checkerror+0x8>
 80024cc:	f7ff bfee 	b.w	80024ac <error>
 80024d0:	4770      	bx	lr

080024d2 <_swiread>:
 80024d2:	b530      	push	{r4, r5, lr}
 80024d4:	b085      	sub	sp, #20
 80024d6:	2406      	movs	r4, #6
 80024d8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80024dc:	9203      	str	r2, [sp, #12]
 80024de:	ad01      	add	r5, sp, #4
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	beab      	bkpt	0x00ab
 80024e6:	4604      	mov	r4, r0
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff ffed 	bl	80024c8 <checkerror>
 80024ee:	b005      	add	sp, #20
 80024f0:	bd30      	pop	{r4, r5, pc}

080024f2 <_read>:
 80024f2:	b570      	push	{r4, r5, r6, lr}
 80024f4:	460e      	mov	r6, r1
 80024f6:	4615      	mov	r5, r2
 80024f8:	f7ff ffbe 	bl	8002478 <findslot>
 80024fc:	4604      	mov	r4, r0
 80024fe:	b930      	cbnz	r0, 800250e <_read+0x1c>
 8002500:	f000 fa7a 	bl	80029f8 <__errno>
 8002504:	2309      	movs	r3, #9
 8002506:	6003      	str	r3, [r0, #0]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	bd70      	pop	{r4, r5, r6, pc}
 800250e:	462a      	mov	r2, r5
 8002510:	4631      	mov	r1, r6
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	f7ff ffdd 	bl	80024d2 <_swiread>
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	bf1f      	itttt	ne
 800251c:	6863      	ldrne	r3, [r4, #4]
 800251e:	1a28      	subne	r0, r5, r0
 8002520:	181b      	addne	r3, r3, r0
 8002522:	6063      	strne	r3, [r4, #4]
 8002524:	e7f2      	b.n	800250c <_read+0x1a>

08002526 <_swilseek>:
 8002526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002528:	460c      	mov	r4, r1
 800252a:	4616      	mov	r6, r2
 800252c:	f7ff ffa4 	bl	8002478 <findslot>
 8002530:	4605      	mov	r5, r0
 8002532:	b940      	cbnz	r0, 8002546 <_swilseek+0x20>
 8002534:	f000 fa60 	bl	80029f8 <__errno>
 8002538:	2309      	movs	r3, #9
 800253a:	6003      	str	r3, [r0, #0]
 800253c:	f04f 34ff 	mov.w	r4, #4294967295
 8002540:	4620      	mov	r0, r4
 8002542:	b003      	add	sp, #12
 8002544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002546:	2e02      	cmp	r6, #2
 8002548:	d903      	bls.n	8002552 <_swilseek+0x2c>
 800254a:	f000 fa55 	bl	80029f8 <__errno>
 800254e:	2316      	movs	r3, #22
 8002550:	e7f3      	b.n	800253a <_swilseek+0x14>
 8002552:	2e01      	cmp	r6, #1
 8002554:	d112      	bne.n	800257c <_swilseek+0x56>
 8002556:	6843      	ldr	r3, [r0, #4]
 8002558:	18e4      	adds	r4, r4, r3
 800255a:	d4f6      	bmi.n	800254a <_swilseek+0x24>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	260a      	movs	r6, #10
 8002560:	466f      	mov	r7, sp
 8002562:	e9cd 3400 	strd	r3, r4, [sp]
 8002566:	4630      	mov	r0, r6
 8002568:	4639      	mov	r1, r7
 800256a:	beab      	bkpt	0x00ab
 800256c:	4606      	mov	r6, r0
 800256e:	4630      	mov	r0, r6
 8002570:	f7ff ffaa 	bl	80024c8 <checkerror>
 8002574:	2800      	cmp	r0, #0
 8002576:	dbe1      	blt.n	800253c <_swilseek+0x16>
 8002578:	606c      	str	r4, [r5, #4]
 800257a:	e7e1      	b.n	8002540 <_swilseek+0x1a>
 800257c:	2e02      	cmp	r6, #2
 800257e:	d1ed      	bne.n	800255c <_swilseek+0x36>
 8002580:	6803      	ldr	r3, [r0, #0]
 8002582:	260c      	movs	r6, #12
 8002584:	466f      	mov	r7, sp
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	4630      	mov	r0, r6
 800258a:	4639      	mov	r1, r7
 800258c:	beab      	bkpt	0x00ab
 800258e:	4606      	mov	r6, r0
 8002590:	4630      	mov	r0, r6
 8002592:	f7ff ff99 	bl	80024c8 <checkerror>
 8002596:	1c43      	adds	r3, r0, #1
 8002598:	d0d0      	beq.n	800253c <_swilseek+0x16>
 800259a:	4404      	add	r4, r0
 800259c:	e7de      	b.n	800255c <_swilseek+0x36>

0800259e <_lseek>:
 800259e:	f7ff bfc2 	b.w	8002526 <_swilseek>

080025a2 <_swiwrite>:
 80025a2:	b530      	push	{r4, r5, lr}
 80025a4:	b085      	sub	sp, #20
 80025a6:	2405      	movs	r4, #5
 80025a8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80025ac:	9203      	str	r2, [sp, #12]
 80025ae:	ad01      	add	r5, sp, #4
 80025b0:	4620      	mov	r0, r4
 80025b2:	4629      	mov	r1, r5
 80025b4:	beab      	bkpt	0x00ab
 80025b6:	4604      	mov	r4, r0
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff ff85 	bl	80024c8 <checkerror>
 80025be:	b005      	add	sp, #20
 80025c0:	bd30      	pop	{r4, r5, pc}

080025c2 <_write>:
 80025c2:	b570      	push	{r4, r5, r6, lr}
 80025c4:	460e      	mov	r6, r1
 80025c6:	4615      	mov	r5, r2
 80025c8:	f7ff ff56 	bl	8002478 <findslot>
 80025cc:	4604      	mov	r4, r0
 80025ce:	b930      	cbnz	r0, 80025de <_write+0x1c>
 80025d0:	f000 fa12 	bl	80029f8 <__errno>
 80025d4:	2309      	movs	r3, #9
 80025d6:	6003      	str	r3, [r0, #0]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
 80025de:	462a      	mov	r2, r5
 80025e0:	4631      	mov	r1, r6
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	f7ff ffdd 	bl	80025a2 <_swiwrite>
 80025e8:	1e03      	subs	r3, r0, #0
 80025ea:	dbf5      	blt.n	80025d8 <_write+0x16>
 80025ec:	6862      	ldr	r2, [r4, #4]
 80025ee:	1ae8      	subs	r0, r5, r3
 80025f0:	4402      	add	r2, r0
 80025f2:	42ab      	cmp	r3, r5
 80025f4:	6062      	str	r2, [r4, #4]
 80025f6:	d1f1      	bne.n	80025dc <_write+0x1a>
 80025f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff bf55 	b.w	80024ac <error>

08002602 <_swiclose>:
 8002602:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002604:	2402      	movs	r4, #2
 8002606:	9001      	str	r0, [sp, #4]
 8002608:	ad01      	add	r5, sp, #4
 800260a:	4620      	mov	r0, r4
 800260c:	4629      	mov	r1, r5
 800260e:	beab      	bkpt	0x00ab
 8002610:	4604      	mov	r4, r0
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff58 	bl	80024c8 <checkerror>
 8002618:	b003      	add	sp, #12
 800261a:	bd30      	pop	{r4, r5, pc}

0800261c <_close>:
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4605      	mov	r5, r0
 8002620:	f7ff ff2a 	bl	8002478 <findslot>
 8002624:	4604      	mov	r4, r0
 8002626:	b930      	cbnz	r0, 8002636 <_close+0x1a>
 8002628:	f000 f9e6 	bl	80029f8 <__errno>
 800262c:	2309      	movs	r3, #9
 800262e:	6003      	str	r3, [r0, #0]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	bd38      	pop	{r3, r4, r5, pc}
 8002636:	3d01      	subs	r5, #1
 8002638:	2d01      	cmp	r5, #1
 800263a:	d809      	bhi.n	8002650 <_close+0x34>
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <_close+0x48>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	429a      	cmp	r2, r3
 8002644:	d104      	bne.n	8002650 <_close+0x34>
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	6003      	str	r3, [r0, #0]
 800264c:	2000      	movs	r0, #0
 800264e:	e7f1      	b.n	8002634 <_close+0x18>
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	f7ff ffd6 	bl	8002602 <_swiclose>
 8002656:	2800      	cmp	r0, #0
 8002658:	d1ec      	bne.n	8002634 <_close+0x18>
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	6023      	str	r3, [r4, #0]
 8002660:	e7e8      	b.n	8002634 <_close+0x18>
 8002662:	bf00      	nop
 8002664:	200004f8 	.word	0x200004f8

08002668 <_sbrk>:
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <_sbrk+0x38>)
 800266a:	4603      	mov	r3, r0
 800266c:	6811      	ldr	r1, [r2, #0]
 800266e:	b510      	push	{r4, lr}
 8002670:	b909      	cbnz	r1, 8002676 <_sbrk+0xe>
 8002672:	490c      	ldr	r1, [pc, #48]	; (80026a4 <_sbrk+0x3c>)
 8002674:	6011      	str	r1, [r2, #0]
 8002676:	4669      	mov	r1, sp
 8002678:	6810      	ldr	r0, [r2, #0]
 800267a:	4403      	add	r3, r0
 800267c:	428b      	cmp	r3, r1
 800267e:	d806      	bhi.n	800268e <_sbrk+0x26>
 8002680:	4909      	ldr	r1, [pc, #36]	; (80026a8 <_sbrk+0x40>)
 8002682:	4c0a      	ldr	r4, [pc, #40]	; (80026ac <_sbrk+0x44>)
 8002684:	6809      	ldr	r1, [r1, #0]
 8002686:	42a1      	cmp	r1, r4
 8002688:	d008      	beq.n	800269c <_sbrk+0x34>
 800268a:	428b      	cmp	r3, r1
 800268c:	d906      	bls.n	800269c <_sbrk+0x34>
 800268e:	f000 f9b3 	bl	80029f8 <__errno>
 8002692:	230c      	movs	r3, #12
 8002694:	6003      	str	r3, [r0, #0]
 8002696:	f04f 30ff 	mov.w	r0, #4294967295
 800269a:	bd10      	pop	{r4, pc}
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e7fc      	b.n	800269a <_sbrk+0x32>
 80026a0:	200004e8 	.word	0x200004e8
 80026a4:	20000598 	.word	0x20000598
 80026a8:	2000008c 	.word	0x2000008c
 80026ac:	cafedead 	.word	0xcafedead

080026b0 <_swistat>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	460c      	mov	r4, r1
 80026b4:	f7ff fee0 	bl	8002478 <findslot>
 80026b8:	4605      	mov	r5, r0
 80026ba:	b930      	cbnz	r0, 80026ca <_swistat+0x1a>
 80026bc:	f000 f99c 	bl	80029f8 <__errno>
 80026c0:	2309      	movs	r3, #9
 80026c2:	6003      	str	r3, [r0, #0]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	bd70      	pop	{r4, r5, r6, pc}
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	260c      	movs	r6, #12
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	6063      	str	r3, [r4, #4]
 80026d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80026da:	4630      	mov	r0, r6
 80026dc:	4629      	mov	r1, r5
 80026de:	beab      	bkpt	0x00ab
 80026e0:	4605      	mov	r5, r0
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7ff fef0 	bl	80024c8 <checkerror>
 80026e8:	1c43      	adds	r3, r0, #1
 80026ea:	bf1c      	itt	ne
 80026ec:	6120      	strne	r0, [r4, #16]
 80026ee:	2000      	movne	r0, #0
 80026f0:	e7ea      	b.n	80026c8 <_swistat+0x18>

080026f2 <_fstat>:
 80026f2:	460b      	mov	r3, r1
 80026f4:	b510      	push	{r4, lr}
 80026f6:	2100      	movs	r1, #0
 80026f8:	4604      	mov	r4, r0
 80026fa:	2258      	movs	r2, #88	; 0x58
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fea9 	bl	8001454 <memset>
 8002702:	4601      	mov	r1, r0
 8002704:	4620      	mov	r0, r4
 8002706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800270a:	f7ff bfd1 	b.w	80026b0 <_swistat>

0800270e <_stat>:
 800270e:	b538      	push	{r3, r4, r5, lr}
 8002710:	460d      	mov	r5, r1
 8002712:	4604      	mov	r4, r0
 8002714:	2258      	movs	r2, #88	; 0x58
 8002716:	2100      	movs	r1, #0
 8002718:	4628      	mov	r0, r5
 800271a:	f7fe fe9b 	bl	8001454 <memset>
 800271e:	4620      	mov	r0, r4
 8002720:	2100      	movs	r1, #0
 8002722:	f000 f811 	bl	8002748 <_swiopen>
 8002726:	1c43      	adds	r3, r0, #1
 8002728:	4604      	mov	r4, r0
 800272a:	d00b      	beq.n	8002744 <_stat+0x36>
 800272c:	686b      	ldr	r3, [r5, #4]
 800272e:	4629      	mov	r1, r5
 8002730:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002734:	606b      	str	r3, [r5, #4]
 8002736:	f7ff ffbb 	bl	80026b0 <_swistat>
 800273a:	4605      	mov	r5, r0
 800273c:	4620      	mov	r0, r4
 800273e:	f7ff ff6d 	bl	800261c <_close>
 8002742:	462c      	mov	r4, r5
 8002744:	4620      	mov	r0, r4
 8002746:	bd38      	pop	{r3, r4, r5, pc}

08002748 <_swiopen>:
 8002748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800274c:	4607      	mov	r7, r0
 800274e:	460e      	mov	r6, r1
 8002750:	2500      	movs	r5, #0
 8002752:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80027f8 <_swiopen+0xb0>
 8002756:	b097      	sub	sp, #92	; 0x5c
 8002758:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800275c:	1c61      	adds	r1, r4, #1
 800275e:	d037      	beq.n	80027d0 <_swiopen+0x88>
 8002760:	3501      	adds	r5, #1
 8002762:	2d14      	cmp	r5, #20
 8002764:	d1f8      	bne.n	8002758 <_swiopen+0x10>
 8002766:	f000 f947 	bl	80029f8 <__errno>
 800276a:	2318      	movs	r3, #24
 800276c:	f04f 34ff 	mov.w	r4, #4294967295
 8002770:	6003      	str	r3, [r0, #0]
 8002772:	e03d      	b.n	80027f0 <_swiopen+0xa8>
 8002774:	f240 6301 	movw	r3, #1537	; 0x601
 8002778:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800277c:	07b2      	lsls	r2, r6, #30
 800277e:	bf48      	it	mi
 8002780:	f044 0402 	orrmi.w	r4, r4, #2
 8002784:	421e      	tst	r6, r3
 8002786:	bf18      	it	ne
 8002788:	f044 0404 	orrne.w	r4, r4, #4
 800278c:	0733      	lsls	r3, r6, #28
 800278e:	bf48      	it	mi
 8002790:	f024 0404 	bicmi.w	r4, r4, #4
 8002794:	4638      	mov	r0, r7
 8002796:	bf48      	it	mi
 8002798:	f044 0408 	orrmi.w	r4, r4, #8
 800279c:	9700      	str	r7, [sp, #0]
 800279e:	f7fd fce7 	bl	8000170 <strlen>
 80027a2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80027a6:	2401      	movs	r4, #1
 80027a8:	4620      	mov	r0, r4
 80027aa:	4649      	mov	r1, r9
 80027ac:	beab      	bkpt	0x00ab
 80027ae:	4604      	mov	r4, r0
 80027b0:	2c00      	cmp	r4, #0
 80027b2:	db08      	blt.n	80027c6 <_swiopen+0x7e>
 80027b4:	2300      	movs	r3, #0
 80027b6:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80027ba:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80027be:	462c      	mov	r4, r5
 80027c0:	f8c8 3004 	str.w	r3, [r8, #4]
 80027c4:	e014      	b.n	80027f0 <_swiopen+0xa8>
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff fe70 	bl	80024ac <error>
 80027cc:	4604      	mov	r4, r0
 80027ce:	e00f      	b.n	80027f0 <_swiopen+0xa8>
 80027d0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80027d4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027d8:	46e9      	mov	r9, sp
 80027da:	d1cb      	bne.n	8002774 <_swiopen+0x2c>
 80027dc:	4649      	mov	r1, r9
 80027de:	4638      	mov	r0, r7
 80027e0:	f7ff ff95 	bl	800270e <_stat>
 80027e4:	3001      	adds	r0, #1
 80027e6:	d0c5      	beq.n	8002774 <_swiopen+0x2c>
 80027e8:	f000 f906 	bl	80029f8 <__errno>
 80027ec:	2311      	movs	r3, #17
 80027ee:	6003      	str	r3, [r0, #0]
 80027f0:	4620      	mov	r0, r4
 80027f2:	b017      	add	sp, #92	; 0x5c
 80027f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027f8:	200004f8 	.word	0x200004f8

080027fc <_get_semihosting_exts>:
 80027fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002800:	4606      	mov	r6, r0
 8002802:	460f      	mov	r7, r1
 8002804:	482a      	ldr	r0, [pc, #168]	; (80028b0 <_get_semihosting_exts+0xb4>)
 8002806:	2100      	movs	r1, #0
 8002808:	4615      	mov	r5, r2
 800280a:	f7ff ff9d 	bl	8002748 <_swiopen>
 800280e:	4604      	mov	r4, r0
 8002810:	462a      	mov	r2, r5
 8002812:	2100      	movs	r1, #0
 8002814:	4630      	mov	r0, r6
 8002816:	f7fe fe1d 	bl	8001454 <memset>
 800281a:	1c63      	adds	r3, r4, #1
 800281c:	d016      	beq.n	800284c <_get_semihosting_exts+0x50>
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fe2a 	bl	8002478 <findslot>
 8002824:	f04f 080c 	mov.w	r8, #12
 8002828:	4681      	mov	r9, r0
 800282a:	4640      	mov	r0, r8
 800282c:	4649      	mov	r1, r9
 800282e:	beab      	bkpt	0x00ab
 8002830:	4680      	mov	r8, r0
 8002832:	4640      	mov	r0, r8
 8002834:	f7ff fe48 	bl	80024c8 <checkerror>
 8002838:	2803      	cmp	r0, #3
 800283a:	dd02      	ble.n	8002842 <_get_semihosting_exts+0x46>
 800283c:	1ec3      	subs	r3, r0, #3
 800283e:	42ab      	cmp	r3, r5
 8002840:	dc08      	bgt.n	8002854 <_get_semihosting_exts+0x58>
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff feea 	bl	800261c <_close>
 8002848:	f04f 34ff 	mov.w	r4, #4294967295
 800284c:	4620      	mov	r0, r4
 800284e:	b003      	add	sp, #12
 8002850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002854:	2204      	movs	r2, #4
 8002856:	4620      	mov	r0, r4
 8002858:	eb0d 0102 	add.w	r1, sp, r2
 800285c:	f7ff fe49 	bl	80024f2 <_read>
 8002860:	2803      	cmp	r0, #3
 8002862:	ddee      	ble.n	8002842 <_get_semihosting_exts+0x46>
 8002864:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002868:	2b53      	cmp	r3, #83	; 0x53
 800286a:	d1ea      	bne.n	8002842 <_get_semihosting_exts+0x46>
 800286c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002870:	2b48      	cmp	r3, #72	; 0x48
 8002872:	d1e6      	bne.n	8002842 <_get_semihosting_exts+0x46>
 8002874:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002878:	2b46      	cmp	r3, #70	; 0x46
 800287a:	d1e2      	bne.n	8002842 <_get_semihosting_exts+0x46>
 800287c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002880:	2b42      	cmp	r3, #66	; 0x42
 8002882:	d1de      	bne.n	8002842 <_get_semihosting_exts+0x46>
 8002884:	2201      	movs	r2, #1
 8002886:	4639      	mov	r1, r7
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff fe4c 	bl	8002526 <_swilseek>
 800288e:	2800      	cmp	r0, #0
 8002890:	dbd7      	blt.n	8002842 <_get_semihosting_exts+0x46>
 8002892:	462a      	mov	r2, r5
 8002894:	4631      	mov	r1, r6
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fe2b 	bl	80024f2 <_read>
 800289c:	4605      	mov	r5, r0
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff febc 	bl	800261c <_close>
 80028a4:	4628      	mov	r0, r5
 80028a6:	f7ff fe0f 	bl	80024c8 <checkerror>
 80028aa:	4604      	mov	r4, r0
 80028ac:	e7ce      	b.n	800284c <_get_semihosting_exts+0x50>
 80028ae:	bf00      	nop
 80028b0:	08002b4f 	.word	0x08002b4f

080028b4 <initialise_semihosting_exts>:
 80028b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028b6:	2100      	movs	r1, #0
 80028b8:	2201      	movs	r2, #1
 80028ba:	4d09      	ldr	r5, [pc, #36]	; (80028e0 <initialise_semihosting_exts+0x2c>)
 80028bc:	4c09      	ldr	r4, [pc, #36]	; (80028e4 <initialise_semihosting_exts+0x30>)
 80028be:	a801      	add	r0, sp, #4
 80028c0:	6029      	str	r1, [r5, #0]
 80028c2:	6022      	str	r2, [r4, #0]
 80028c4:	f7ff ff9a 	bl	80027fc <_get_semihosting_exts>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	dd07      	ble.n	80028dc <initialise_semihosting_exts+0x28>
 80028cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80028d0:	f003 0201 	and.w	r2, r3, #1
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	602a      	str	r2, [r5, #0]
 80028da:	6023      	str	r3, [r4, #0]
 80028dc:	b003      	add	sp, #12
 80028de:	bd30      	pop	{r4, r5, pc}
 80028e0:	20000090 	.word	0x20000090
 80028e4:	20000094 	.word	0x20000094

080028e8 <_has_ext_stdout_stderr>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4c04      	ldr	r4, [pc, #16]	; (80028fc <_has_ext_stdout_stderr+0x14>)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	da01      	bge.n	80028f6 <_has_ext_stdout_stderr+0xe>
 80028f2:	f7ff ffdf 	bl	80028b4 <initialise_semihosting_exts>
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	bd10      	pop	{r4, pc}
 80028fa:	bf00      	nop
 80028fc:	20000094 	.word	0x20000094

08002900 <initialise_monitor_handles>:
 8002900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	2303      	movs	r3, #3
 8002906:	2400      	movs	r4, #0
 8002908:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80029ac <initialise_monitor_handles+0xac>
 800290c:	b085      	sub	sp, #20
 800290e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002912:	af01      	add	r7, sp, #4
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	2501      	movs	r5, #1
 8002918:	9402      	str	r4, [sp, #8]
 800291a:	4628      	mov	r0, r5
 800291c:	4639      	mov	r1, r7
 800291e:	beab      	bkpt	0x00ab
 8002920:	4605      	mov	r5, r0
 8002922:	f04f 32ff 	mov.w	r2, #4294967295
 8002926:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80029b0 <initialise_monitor_handles+0xb0>
 800292a:	4623      	mov	r3, r4
 800292c:	4c21      	ldr	r4, [pc, #132]	; (80029b4 <initialise_monitor_handles+0xb4>)
 800292e:	f8c8 5000 	str.w	r5, [r8]
 8002932:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002936:	3301      	adds	r3, #1
 8002938:	2b14      	cmp	r3, #20
 800293a:	d1fa      	bne.n	8002932 <initialise_monitor_handles+0x32>
 800293c:	f7ff ffd4 	bl	80028e8 <_has_ext_stdout_stderr>
 8002940:	4d1d      	ldr	r5, [pc, #116]	; (80029b8 <initialise_monitor_handles+0xb8>)
 8002942:	b1d0      	cbz	r0, 800297a <initialise_monitor_handles+0x7a>
 8002944:	f04f 0a03 	mov.w	sl, #3
 8002948:	2304      	movs	r3, #4
 800294a:	f8cd 9004 	str.w	r9, [sp, #4]
 800294e:	2601      	movs	r6, #1
 8002950:	f8cd a00c 	str.w	sl, [sp, #12]
 8002954:	9302      	str	r3, [sp, #8]
 8002956:	4630      	mov	r0, r6
 8002958:	4639      	mov	r1, r7
 800295a:	beab      	bkpt	0x00ab
 800295c:	4683      	mov	fp, r0
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <initialise_monitor_handles+0xbc>)
 8002960:	f8cd 9004 	str.w	r9, [sp, #4]
 8002964:	f8c3 b000 	str.w	fp, [r3]
 8002968:	2308      	movs	r3, #8
 800296a:	f8cd a00c 	str.w	sl, [sp, #12]
 800296e:	9302      	str	r3, [sp, #8]
 8002970:	4630      	mov	r0, r6
 8002972:	4639      	mov	r1, r7
 8002974:	beab      	bkpt	0x00ab
 8002976:	4606      	mov	r6, r0
 8002978:	602e      	str	r6, [r5, #0]
 800297a:	2600      	movs	r6, #0
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	6066      	str	r6, [r4, #4]
 8002980:	3301      	adds	r3, #1
 8002982:	bf02      	ittt	eq
 8002984:	4b0d      	ldreq	r3, [pc, #52]	; (80029bc <initialise_monitor_handles+0xbc>)
 8002986:	681b      	ldreq	r3, [r3, #0]
 8002988:	602b      	streq	r3, [r5, #0]
 800298a:	f8d8 3000 	ldr.w	r3, [r8]
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	f7ff ffaa 	bl	80028e8 <_has_ext_stdout_stderr>
 8002994:	b130      	cbz	r0, 80029a4 <initialise_monitor_handles+0xa4>
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <initialise_monitor_handles+0xbc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800299e:	682b      	ldr	r3, [r5, #0]
 80029a0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80029a4:	b005      	add	sp, #20
 80029a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029aa:	bf00      	nop
 80029ac:	08002b65 	.word	0x08002b65
 80029b0:	200004f0 	.word	0x200004f0
 80029b4:	200004f8 	.word	0x200004f8
 80029b8:	200004ec 	.word	0x200004ec
 80029bc:	200004f4 	.word	0x200004f4

080029c0 <_isatty>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	f7ff fd59 	bl	8002478 <findslot>
 80029c6:	2509      	movs	r5, #9
 80029c8:	4604      	mov	r4, r0
 80029ca:	b920      	cbnz	r0, 80029d6 <_isatty+0x16>
 80029cc:	f000 f814 	bl	80029f8 <__errno>
 80029d0:	6005      	str	r5, [r0, #0]
 80029d2:	4620      	mov	r0, r4
 80029d4:	bd70      	pop	{r4, r5, r6, pc}
 80029d6:	4628      	mov	r0, r5
 80029d8:	4621      	mov	r1, r4
 80029da:	beab      	bkpt	0x00ab
 80029dc:	4604      	mov	r4, r0
 80029de:	2c01      	cmp	r4, #1
 80029e0:	d0f7      	beq.n	80029d2 <_isatty+0x12>
 80029e2:	f000 f809 	bl	80029f8 <__errno>
 80029e6:	2400      	movs	r4, #0
 80029e8:	4605      	mov	r5, r0
 80029ea:	2613      	movs	r6, #19
 80029ec:	4630      	mov	r0, r6
 80029ee:	4621      	mov	r1, r4
 80029f0:	beab      	bkpt	0x00ab
 80029f2:	4606      	mov	r6, r0
 80029f4:	602e      	str	r6, [r5, #0]
 80029f6:	e7ec      	b.n	80029d2 <_isatty+0x12>

080029f8 <__errno>:
 80029f8:	4b01      	ldr	r3, [pc, #4]	; (8002a00 <__errno+0x8>)
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000028 	.word	0x20000028

08002a04 <_init>:
 8002a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a06:	bf00      	nop
 8002a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0a:	bc08      	pop	{r3}
 8002a0c:	469e      	mov	lr, r3
 8002a0e:	4770      	bx	lr

08002a10 <_fini>:
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	bf00      	nop
 8002a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a16:	bc08      	pop	{r3}
 8002a18:	469e      	mov	lr, r3
 8002a1a:	4770      	bx	lr
