
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de0  08001de0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001de0  08001de0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de0  08001de0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de4  08001de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200000a4  08001e8c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08001e8c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fba  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000049a  00000000  00000000  00021087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00021528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00021678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c07  00000000  00000000  00021790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a3a  00000000  00000000  00024397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aa10  00000000  00000000  00025dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000307e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ed8  00000000  00000000  00030834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a4 	.word	0x200000a4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d3c 	.word	0x08001d3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a8 	.word	0x200000a8
 800016c:	08001d3c 	.word	0x08001d3c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:


// some data
uint8_t some_data[] = "We are testing I2C master Tx\n";

void delay(void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <delay+0x28>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	0003d08f 	.word	0x0003d08f

080001ac <I2C1_GPIOInits>:
/*
 * PB6 -->  I2C1_SCL
 * PB7 --> I2C1_SDA
 */

void I2C1_GPIOInits(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001b2:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <I2C1_GPIOInits+0x3c>)
 80001b4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF_OD;
 80001b6:	2303      	movs	r3, #3
 80001b8:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_OD;
 80001ba:	2301      	movs	r3, #1
 80001bc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001be:	2301      	movs	r3, #1
 80001c0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_10;
 80001c2:	2301      	movs	r3, #1
 80001c4:	72bb      	strb	r3, [r7, #10]

	// SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80001c6:	230a      	movs	r3, #10
 80001c8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	4618      	mov	r0, r3
 80001ce:	f000 f94d 	bl	800046c <GPIO_Init>

	// SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 80001d2:	230b      	movs	r3, #11
 80001d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f947 	bl	800046c <GPIO_Init>

}
 80001de:	bf00      	nop
 80001e0:	3710      	adds	r7, #16
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010c00 	.word	0x40010c00

080001ec <I2C1_Inits>:

void I2C1_Inits(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	I2C2Handle.pI2Cx = I2C2;
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <I2C1_Inits+0x2c>)
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <I2C1_Inits+0x30>)
 80001f4:	601a      	str	r2, [r3, #0]
	I2C2Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <I2C1_Inits+0x2c>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	725a      	strb	r2, [r3, #9]
	I2C2Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <I2C1_Inits+0x2c>)
 80001fe:	2261      	movs	r2, #97	; 0x61
 8000200:	721a      	strb	r2, [r3, #8]
	I2C2Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <I2C1_Inits+0x2c>)
 8000204:	2200      	movs	r2, #0
 8000206:	729a      	strb	r2, [r3, #10]
	I2C2Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <I2C1_Inits+0x2c>)
 800020a:	4a05      	ldr	r2, [pc, #20]	; (8000220 <I2C1_Inits+0x34>)
 800020c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C2Handle);
 800020e:	4802      	ldr	r0, [pc, #8]	; (8000218 <I2C1_Inits+0x2c>)
 8000210:	f000 fc90 	bl	8000b34 <I2C_Init>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	200000c0 	.word	0x200000c0
 800021c:	40005800 	.word	0x40005800
 8000220:	000186a0 	.word	0x000186a0

08000224 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <GPIO_ButtonInit+0x2c>)
 800022c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800022e:	2300      	movs	r3, #0
 8000230:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 8000232:	2302      	movs	r3, #2
 8000234:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 8000236:	2300      	movs	r3, #0
 8000238:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800023a:	2301      	movs	r3, #1
 800023c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f913 	bl	800046c <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010800 	.word	0x40010800

08000254 <main>:


int main(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000258:	f001 fcee 	bl	8001c38 <initialise_monitor_handles>
	printf("Hello STM32\n");
 800025c:	480e      	ldr	r0, [pc, #56]	; (8000298 <main+0x44>)
 800025e:	f000 fe1f 	bl	8000ea0 <puts>

	GPIO_ButtonInit();
 8000262:	f7ff ffdf 	bl	8000224 <GPIO_ButtonInit>

	// I2C Pin inits
	I2C1_GPIOInits();
 8000266:	f7ff ffa1 	bl	80001ac <I2C1_GPIOInits>


	// I2C Peripheral configuration
	I2C1_Inits();
 800026a:	f7ff ffbf 	bl	80001ec <I2C1_Inits>

	// Wait for button press
	while(1){
		// Wait till button is pressed
			while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800026e:	bf00      	nop
 8000270:	2100      	movs	r1, #0
 8000272:	480a      	ldr	r0, [pc, #40]	; (800029c <main+0x48>)
 8000274:	f000 fb3c 	bl	80008f0 <GPIO_ReadFromInputPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f8      	bne.n	8000270 <main+0x1c>

			// To avoid button de-bouncing related issues 200ms of delay
			delay();
 800027e:	f7ff ff7f 	bl	8000180 <delay>

			// Send some data to the slave
			I2C_MasterSendData(&I2C2Handle,some_data, strlen((char*)some_data), SLAVE_ADDR);
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0x4c>)
 8000284:	f7ff ff74 	bl	8000170 <strlen>
 8000288:	4602      	mov	r2, r0
 800028a:	2368      	movs	r3, #104	; 0x68
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <main+0x4c>)
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <main+0x50>)
 8000290:	f000 fd0a 	bl	8000ca8 <I2C_MasterSendData>
			while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000294:	e7eb      	b.n	800026e <main+0x1a>
 8000296:	bf00      	nop
 8000298:	08001d54 	.word	0x08001d54
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000000 	.word	0x20000000
 80002a4:	200000c0 	.word	0x200000c0

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fd49 	bl	8000d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffbb 	bl	8000254 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80002ec:	08001de8 	.word	0x08001de8
  ldr r2, =_sbss
 80002f0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80002f4:	2000018c 	.word	0x2000018c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	f040 8099 	bne.w	8000442 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a4e      	ldr	r2, [pc, #312]	; (800044c <GPIO_PeriClockControl+0x150>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000318:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a4c      	ldr	r2, [pc, #304]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000324:	e08d      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a4a      	ldr	r2, [pc, #296]	; (8000454 <GPIO_PeriClockControl+0x158>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 800032e:	4b48      	ldr	r3, [pc, #288]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a47      	ldr	r2, [pc, #284]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000334:	f043 0308 	orr.w	r3, r3, #8
 8000338:	6193      	str	r3, [r2, #24]
}
 800033a:	e082      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a46      	ldr	r2, [pc, #280]	; (8000458 <GPIO_PeriClockControl+0x15c>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000344:	4b42      	ldr	r3, [pc, #264]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a41      	ldr	r2, [pc, #260]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]
}
 8000350:	e077      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a41      	ldr	r2, [pc, #260]	; (800045c <GPIO_PeriClockControl+0x160>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800035a:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000360:	f043 0320 	orr.w	r3, r3, #32
 8000364:	6193      	str	r3, [r2, #24]
}
 8000366:	e06c      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a3d      	ldr	r2, [pc, #244]	; (8000460 <GPIO_PeriClockControl+0x164>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a36      	ldr	r2, [pc, #216]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800037a:	6193      	str	r3, [r2, #24]
}
 800037c:	e061      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a38      	ldr	r2, [pc, #224]	; (8000464 <GPIO_PeriClockControl+0x168>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a31      	ldr	r2, [pc, #196]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000390:	6193      	str	r3, [r2, #24]
}
 8000392:	e056      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a34      	ldr	r2, [pc, #208]	; (8000468 <GPIO_PeriClockControl+0x16c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 800039c:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2b      	ldr	r2, [pc, #172]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a6:	6193      	str	r3, [r2, #24]
}
 80003a8:	e04b      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a27      	ldr	r2, [pc, #156]	; (800044c <GPIO_PeriClockControl+0x150>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80003b2:	4b27      	ldr	r3, [pc, #156]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a26      	ldr	r2, [pc, #152]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003b8:	f023 0304 	bic.w	r3, r3, #4
 80003bc:	6193      	str	r3, [r2, #24]
}
 80003be:	e040      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a24      	ldr	r2, [pc, #144]	; (8000454 <GPIO_PeriClockControl+0x158>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a20      	ldr	r2, [pc, #128]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
}
 80003d4:	e035      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <GPIO_PeriClockControl+0x15c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003e4:	f023 0310 	bic.w	r3, r3, #16
 80003e8:	6193      	str	r3, [r2, #24]
}
 80003ea:	e02a      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <GPIO_PeriClockControl+0x160>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a15      	ldr	r2, [pc, #84]	; (8000450 <GPIO_PeriClockControl+0x154>)
 80003fa:	f023 0320 	bic.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
}
 8000400:	e01f      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a16      	ldr	r2, [pc, #88]	; (8000460 <GPIO_PeriClockControl+0x164>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000414:	6193      	str	r3, [r2, #24]
}
 8000416:	e014      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <GPIO_PeriClockControl+0x168>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 8000420:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800042a:	6193      	str	r3, [r2, #24]
}
 800042c:	e009      	b.n	8000442 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a0d      	ldr	r2, [pc, #52]	; (8000468 <GPIO_PeriClockControl+0x16c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d105      	bne.n	8000442 <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 8000436:	4b06      	ldr	r3, [pc, #24]	; (8000450 <GPIO_PeriClockControl+0x154>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <GPIO_PeriClockControl+0x154>)
 800043c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000440:	6193      	str	r3, [r2, #24]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40010800 	.word	0x40010800
 8000450:	40021000 	.word	0x40021000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	40011000 	.word	0x40011000
 800045c:	40011400 	.word	0x40011400
 8000460:	40011800 	.word	0x40011800
 8000464:	40011c00 	.word	0x40011c00
 8000468:	40012000 	.word	0x40012000

0800046c <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff3c 	bl	80002fc <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d820      	bhi.n	80004ce <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	799b      	ldrb	r3, [r3, #6]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	2103      	movs	r1, #3
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	4619      	mov	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	400a      	ands	r2, r1
 80004ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	e020      	b.n	8000510 <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	3b08      	subs	r3, #8
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	2103      	movs	r1, #3
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6859      	ldr	r1, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	430a      	orrs	r2, r1
 800050e:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d84b      	bhi.n	80005b4 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	2b07      	cmp	r3, #7
 8000522:	d822      	bhi.n	800056a <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	3302      	adds	r3, #2
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	3302      	adds	r3, #2
 8000546:	2103      	movs	r1, #3
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	e114      	b.n	8000794 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	3b08      	subs	r3, #8
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	3302      	adds	r3, #2
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	3b08      	subs	r3, #8
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	3302      	adds	r3, #2
 8000590:	2103      	movs	r1, #3
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	e0ef      	b.n	8000794 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d85e      	bhi.n	800067a <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d820      	bhi.n	8000606 <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3302      	adds	r3, #2
 80005cc:	2202      	movs	r2, #2
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	3302      	adds	r3, #2
 80005e2:	2103      	movs	r1, #3
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e021      	b.n	800064a <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	3b08      	subs	r3, #8
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	3302      	adds	r3, #2
 8000610:	2202      	movs	r2, #2
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	3b08      	subs	r3, #8
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	2103      	movs	r1, #3
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6859      	ldr	r1, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	430a      	orrs	r2, r1
 8000648:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b8b      	ldr	r3, [pc, #556]	; (8000878 <GPIO_Init+0x40c>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a87      	ldr	r2, [pc, #540]	; (8000878 <GPIO_Init+0x40c>)
 800065c:	430b      	orrs	r3, r1
 800065e:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000660:	4b85      	ldr	r3, [pc, #532]	; (8000878 <GPIO_Init+0x40c>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7912      	ldrb	r2, [r2, #4]
 8000668:	4611      	mov	r1, r2
 800066a:	2201      	movs	r2, #1
 800066c:	408a      	lsls	r2, r1
 800066e:	43d2      	mvns	r2, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4a81      	ldr	r2, [pc, #516]	; (8000878 <GPIO_Init+0x40c>)
 8000674:	400b      	ands	r3, r1
 8000676:	6093      	str	r3, [r2, #8]
 8000678:	e035      	b.n	80006e6 <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	795b      	ldrb	r3, [r3, #5]
 800067e:	2b05      	cmp	r3, #5
 8000680:	d817      	bhi.n	80006b2 <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000682:	4b7d      	ldr	r3, [pc, #500]	; (8000878 <GPIO_Init+0x40c>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	7912      	ldrb	r2, [r2, #4]
 800068a:	4611      	mov	r1, r2
 800068c:	2201      	movs	r2, #1
 800068e:	408a      	lsls	r2, r1
 8000690:	4611      	mov	r1, r2
 8000692:	4a79      	ldr	r2, [pc, #484]	; (8000878 <GPIO_Init+0x40c>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000698:	4b77      	ldr	r3, [pc, #476]	; (8000878 <GPIO_Init+0x40c>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7912      	ldrb	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	408a      	lsls	r2, r1
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a73      	ldr	r2, [pc, #460]	; (8000878 <GPIO_Init+0x40c>)
 80006ac:	400b      	ands	r3, r1
 80006ae:	60d3      	str	r3, [r2, #12]
 80006b0:	e019      	b.n	80006e6 <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	2b06      	cmp	r3, #6
 80006b8:	d815      	bhi.n	80006e6 <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ba:	4b6f      	ldr	r3, [pc, #444]	; (8000878 <GPIO_Init+0x40c>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4611      	mov	r1, r2
 80006c4:	2201      	movs	r2, #1
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a6b      	ldr	r2, [pc, #428]	; (8000878 <GPIO_Init+0x40c>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d0:	4b69      	ldr	r3, [pc, #420]	; (8000878 <GPIO_Init+0x40c>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	7912      	ldrb	r2, [r2, #4]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a65      	ldr	r2, [pc, #404]	; (8000878 <GPIO_Init+0x40c>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	089b      	lsrs	r3, r3, #2
 80006ec:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a5f      	ldr	r2, [pc, #380]	; (800087c <GPIO_Init+0x410>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d02b      	beq.n	800075a <GPIO_Init+0x2ee>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a5e      	ldr	r2, [pc, #376]	; (8000880 <GPIO_Init+0x414>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d024      	beq.n	8000756 <GPIO_Init+0x2ea>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a5c      	ldr	r2, [pc, #368]	; (8000884 <GPIO_Init+0x418>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d01d      	beq.n	8000752 <GPIO_Init+0x2e6>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a5b      	ldr	r2, [pc, #364]	; (8000888 <GPIO_Init+0x41c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d016      	beq.n	800074e <GPIO_Init+0x2e2>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a59      	ldr	r2, [pc, #356]	; (800088c <GPIO_Init+0x420>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d00f      	beq.n	800074a <GPIO_Init+0x2de>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a58      	ldr	r2, [pc, #352]	; (8000890 <GPIO_Init+0x424>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d008      	beq.n	8000746 <GPIO_Init+0x2da>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a56      	ldr	r2, [pc, #344]	; (8000894 <GPIO_Init+0x428>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <GPIO_Init+0x2d6>
 800073e:	2306      	movs	r3, #6
 8000740:	e00c      	b.n	800075c <GPIO_Init+0x2f0>
 8000742:	2300      	movs	r3, #0
 8000744:	e00a      	b.n	800075c <GPIO_Init+0x2f0>
 8000746:	2305      	movs	r3, #5
 8000748:	e008      	b.n	800075c <GPIO_Init+0x2f0>
 800074a:	2304      	movs	r3, #4
 800074c:	e006      	b.n	800075c <GPIO_Init+0x2f0>
 800074e:	2303      	movs	r3, #3
 8000750:	e004      	b.n	800075c <GPIO_Init+0x2f0>
 8000752:	2302      	movs	r3, #2
 8000754:	e002      	b.n	800075c <GPIO_Init+0x2f0>
 8000756:	2301      	movs	r3, #1
 8000758:	e000      	b.n	800075c <GPIO_Init+0x2f0>
 800075a:	2300      	movs	r3, #0
 800075c:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 800075e:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <GPIO_Init+0x42c>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a4d      	ldr	r2, [pc, #308]	; (8000898 <GPIO_Init+0x42c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 800076a:	7a7a      	ldrb	r2, [r7, #9]
 800076c:	7abb      	ldrb	r3, [r7, #10]
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	fa02 f103 	lsl.w	r1, r2, r3
 8000774:	4a49      	ldr	r2, [pc, #292]	; (800089c <GPIO_Init+0x430>)
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	3302      	adds	r3, #2
 800077a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <GPIO_Init+0x40c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7912      	ldrb	r2, [r2, #4]
 8000786:	4611      	mov	r1, r2
 8000788:	2201      	movs	r2, #1
 800078a:	408a      	lsls	r2, r1
 800078c:	4611      	mov	r1, r2
 800078e:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <GPIO_Init+0x40c>)
 8000790:	430b      	orrs	r3, r1
 8000792:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	79db      	ldrb	r3, [r3, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2301      	movs	r3, #1
 80007b6:	408b      	lsls	r3, r1
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	400a      	ands	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68d9      	ldr	r1, [r3, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	430a      	orrs	r2, r1
 80007d2:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a1b      	ldrb	r3, [r3, #8]
 80007dc:	2b07      	cmp	r3, #7
 80007de:	d11d      	bne.n	800081c <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2301      	movs	r3, #1
 80007fe:	408b      	lsls	r3, r1
 8000800:	43db      	mvns	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68d9      	ldr	r1, [r3, #12]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	430a      	orrs	r2, r1
 800081a:	60da      	str	r2, [r3, #12]
	}

//	// 5. Configure the alt functionality
	temp = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF_OD )){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7a5b      	ldrb	r3, [r3, #9]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d15f      	bne.n	80008e8 <GPIO_Init+0x47c>
		// configure the alternate function registers
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d837      	bhi.n	80008a0 <GPIO_Init+0x434>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7a5b      	ldrb	r3, [r3, #9]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	3302      	adds	r3, #2
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	3302      	adds	r3, #2
 8000852:	2103      	movs	r1, #3
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	400a      	ands	r2, r1
 8000862:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
			pGPIOHandle->pGPIOx->CRH |= temp;
		}
	}
}
 8000874:	e038      	b.n	80008e8 <GPIO_Init+0x47c>
 8000876:	bf00      	nop
 8000878:	40010400 	.word	0x40010400
 800087c:	40010800 	.word	0x40010800
 8000880:	40010c00 	.word	0x40010c00
 8000884:	40011000 	.word	0x40011000
 8000888:	40011400 	.word	0x40011400
 800088c:	40011800 	.word	0x40011800
 8000890:	40011c00 	.word	0x40011c00
 8000894:	40012000 	.word	0x40012000
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a5b      	ldrb	r3, [r3, #9]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	3b08      	subs	r3, #8
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	3302      	adds	r3, #2
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	3b08      	subs	r3, #8
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	3302      	adds	r3, #2
 80008c6:	2103      	movs	r1, #3
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	400a      	ands	r2, r1
 80008d6:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6859      	ldr	r1, [r3, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	605a      	str	r2, [r3, #4]
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	fa22 f303 	lsr.w	r3, r2, r3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
	return value;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADRRFlag(I2C_RegDef_t *pI2Cx);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <I2C_ExecuteAddressPhase>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000962:	78fb      	ldrb	r3, [r7, #3]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // SlaveAdrr is Slave address + r/nw
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	f023 0301 	bic.w	r3, r3, #1
 800096e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000970:	78fa      	ldrb	r2, [r7, #3]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	611a      	str	r2, [r3, #16]

}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	4013      	ands	r3, r2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <I2C_ClearADRRFlag>:

static void I2C_ClearADRRFlag(I2C_RegDef_t *pI2Cx){
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]

	uint32_t dummyRead = pI2Cx->SR1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <I2C_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t  EnorDi){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d115      	bne.n	8000a02 <I2C_PeriClockControl+0x3e>
		if(pI2Cx == I2C1){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <I2C_PeriClockControl+0x74>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d106      	bne.n	80009ec <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e8:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		}else if(pI2Cx == I2C2){
			I2C2_PCLK_DI();
		}
	}
}
 80009ea:	e01f      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		}else if(pI2Cx == I2C2){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <I2C_PeriClockControl+0x7c>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d11b      	bne.n	8000a2c <I2C_PeriClockControl+0x68>
			I2C2_PCLK_EN();
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <I2C_PeriClockControl+0x78>)
 80009fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009fe:	61d3      	str	r3, [r2, #28]
}
 8000a00:	e014      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		if(pI2Cx == I2C1){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <I2C_PeriClockControl+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <I2C_PeriClockControl+0x54>
			I2C1_PCLK_DI();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a14:	61d3      	str	r3, [r2, #28]
}
 8000a16:	e009      	b.n	8000a2c <I2C_PeriClockControl+0x68>
		}else if(pI2Cx == I2C2){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <I2C_PeriClockControl+0x7c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d105      	bne.n	8000a2c <I2C_PeriClockControl+0x68>
			I2C2_PCLK_DI();
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <I2C_PeriClockControl+0x78>)
 8000a26:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a2a:	61d3      	str	r3, [r2, #28]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40005800 	.word	0x40005800

08000a44 <I2C_PeripheralControl>:
	 * @return				-
	 *
	 * @Note				-
	 */

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d106      	bne.n	8000a64 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f043 0201 	orr.w	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000a62:	e005      	b.n	8000a70 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 0201 	bic.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(){
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

	return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <RCC_GetPCLK1Value>:

uint32_t RCC_GetPCLK1Value(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	089b      	lsrs	r3, r3, #2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000a9c:	7a7b      	ldrb	r3, [r7, #9]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <RCC_GetPCLK1Value+0x20>
		SystemClk = 8000000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <RCC_GetPCLK1Value+0xa0>)
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e00b      	b.n	8000ac0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000aa8:	7a7b      	ldrb	r3, [r7, #9]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <RCC_GetPCLK1Value+0xa0>)
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e005      	b.n	8000ac0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d102      	bne.n	8000ac0 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000aba:	f7ff ffde 	bl	8000a7a <RCC_GetPLLOutputClock>
 8000abe:	60f8      	str	r0, [r7, #12]
	}

	//ahbp
	temp = (RCC->CFGR >> 4) & 0xF;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 8000ace:	7a3b      	ldrb	r3, [r7, #8]
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d802      	bhi.n	8000ada <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	e005      	b.n	8000ae6 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp - 8];
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	3b08      	subs	r3, #8
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <RCC_GetPCLK1Value+0xa4>)
 8000ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae4:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 8) & 0x7;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <RCC_GetPCLK1Value+0x9c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	0a1b      	lsrs	r3, r3, #8
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000af4:	7a3b      	ldrb	r3, [r7, #8]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d802      	bhi.n	8000b00 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	72bb      	strb	r3, [r7, #10]
 8000afe:	e004      	b.n	8000b0a <RCC_GetPCLK1Value+0x82>
	}else{
		ahbp = APB1_PreScaler[temp - 4];
 8000b00:	7a3b      	ldrb	r3, [r7, #8]
 8000b02:	3b04      	subs	r3, #4
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <RCC_GetPCLK1Value+0xa8>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	72fb      	strb	r3, [r7, #11]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b12:	7abb      	ldrb	r3, [r7, #10]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000
 8000b28:	007a1200 	.word	0x007a1200
 8000b2c:	20000020 	.word	0x20000020
 8000b30:	20000030 	.word	0x20000030

08000b34 <I2C_Init>:
 * @return				-
 *
 * @Note				-
 */

void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


	uint32_t tempreg = 0;  // temporal register
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

	// Enable the clock for the I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff3c 	bl	80009c4 <I2C_PeriClockControl>

	// Enable the I2C peripheral
	I2C_PeripheralControl(I2C2, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4852      	ldr	r0, [pc, #328]	; (8000c98 <I2C_Init+0x164>)
 8000b50:	f7ff ff78 	bl	8000a44 <I2C_PeripheralControl>
	// ACK control bit
	//pI2CHandle->pI2Cx->CR1 = tempreg;
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	029b      	lsls	r3, r3, #10
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

	// Configure the FREQ field of CR2
	tempreg = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000b76:	f7ff ff87 	bl	8000a88 <RCC_GetPCLK1Value>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a47      	ldr	r2, [pc, #284]	; (8000c9c <I2C_Init+0x168>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
	//pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
	pI2CHandle->pI2Cx->CR2 = 0x8;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2208      	movs	r2, #8
 8000b90:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7a1b      	ldrb	r3, [r3, #8]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	609a      	str	r2, [r3, #8]

	// CCR Calculations
	uint16_t ccr_value = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <I2C_Init+0x16c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d80f      	bhi.n	8000be6 <I2C_Init+0xb2>
		// mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000bc6:	f7ff ff5f 	bl	8000a88 <RCC_GetPCLK1Value>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bd8:	897b      	ldrh	r3, [r7, #10]
 8000bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	e02d      	b.n	8000c42 <I2C_Init+0x10e>
	}else{
		// mode is fast mode
		tempreg |= (1 << 15); // configuring bit 15 of I2C_CCR
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bec:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a9b      	ldrb	r3, [r3, #10]
 8000bf2:	039b      	lsls	r3, r3, #14
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7a9b      	ldrb	r3, [r3, #10]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10b      	bne.n	8000c1c <I2C_Init+0xe8>
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c04:	f7ff ff40 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c08:	4601      	mov	r1, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c18:	817b      	strh	r3, [r7, #10]
 8000c1a:	e00c      	b.n	8000c36 <I2C_Init+0x102>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c1c:	f7ff ff34 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c20:	4601      	mov	r1, r0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009a      	lsls	r2, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c36:	897b      	ldrh	r3, [r7, #10]
 8000c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <I2C_Init+0x16c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d809      	bhi.n	8000c68 <I2C_Init+0x134>
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000c54:	f7ff ff18 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <I2C_Init+0x168>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	0c9b      	lsrs	r3, r3, #18
 8000c62:	3301      	adds	r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	e00d      	b.n	8000c84 <I2C_Init+0x150>
	}else{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000c68:	f7ff ff0e 	bl	8000a88 <RCC_GetPCLK1Value>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c72:	fb02 f303 	mul.w	r3, r2, r3
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <I2C_Init+0x170>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	09db      	lsrs	r3, r3, #7
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8e:	621a      	str	r2, [r3, #32]
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	000186a0 	.word	0x000186a0
 8000ca4:	00044b83 	.word	0x00044b83

08000ca8 <I2C_MasterSendData>:
 * @return				-
 *
 * @Note				-
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fe2d 	bl	800091a <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// NOTE: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000cc0:	bf00      	nop
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe59 	bl	8000980 <I2C_GetFlagStatus>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f6      	beq.n	8000cc2 <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe3a 	bl	8000956 <I2C_ExecuteAddressPhase>

	// 4. Confirm that adress phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000ce2:	bf00      	nop
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe48 	bl	8000980 <I2C_GetFlagStatus>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f6      	beq.n	8000ce4 <I2C_MasterSendData+0x3c>

	// 5. Clear the ADDR Flag according to its software sequence
	// NOTE: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADRRFlag(pI2CHandle->pI2Cx);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fe53 	bl	80009a6 <I2C_ClearADRRFlag>

	// 6. Send data until Len becomes 0
	while(Len > 0){
 8000d00:	e014      	b.n	8000d2c <I2C_MasterSendData+0x84>
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TxE)); // Wait till TXE is set
 8000d02:	bf00      	nop
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe38 	bl	8000980 <I2C_GetFlagStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f6      	beq.n	8000d04 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
	while(Len > 0){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e7      	bne.n	8000d02 <I2C_MasterSendData+0x5a>
	}

	// 7. When Len becomes 0 wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1, BF1 = 1, means that both SR and DR are empty and next transmission should begin
	// when BTF = 1 SCL will be stretched (pulled to LOW)
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TxE));
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe20 	bl	8000980 <I2C_GetFlagStatus>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f6      	beq.n	8000d34 <I2C_MasterSendData+0x8c>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8000d46:	bf00      	nop
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe16 	bl	8000980 <I2C_GetFlagStatus>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f6      	beq.n	8000d48 <I2C_MasterSendData+0xa0>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition
	// NOTE: generating STOP, automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fdea 	bl	8000938 <I2C_GenerateStopCondition>

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <__libc_init_array>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	2600      	movs	r6, #0
 8000d70:	4d0c      	ldr	r5, [pc, #48]	; (8000da4 <__libc_init_array+0x38>)
 8000d72:	4c0d      	ldr	r4, [pc, #52]	; (8000da8 <__libc_init_array+0x3c>)
 8000d74:	1b64      	subs	r4, r4, r5
 8000d76:	10a4      	asrs	r4, r4, #2
 8000d78:	42a6      	cmp	r6, r4
 8000d7a:	d109      	bne.n	8000d90 <__libc_init_array+0x24>
 8000d7c:	f000 ffde 	bl	8001d3c <_init>
 8000d80:	2600      	movs	r6, #0
 8000d82:	4d0a      	ldr	r5, [pc, #40]	; (8000dac <__libc_init_array+0x40>)
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <__libc_init_array+0x44>)
 8000d86:	1b64      	subs	r4, r4, r5
 8000d88:	10a4      	asrs	r4, r4, #2
 8000d8a:	42a6      	cmp	r6, r4
 8000d8c:	d105      	bne.n	8000d9a <__libc_init_array+0x2e>
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d94:	4798      	blx	r3
 8000d96:	3601      	adds	r6, #1
 8000d98:	e7ee      	b.n	8000d78 <__libc_init_array+0xc>
 8000d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d9e:	4798      	blx	r3
 8000da0:	3601      	adds	r6, #1
 8000da2:	e7f2      	b.n	8000d8a <__libc_init_array+0x1e>
 8000da4:	08001de0 	.word	0x08001de0
 8000da8:	08001de0 	.word	0x08001de0
 8000dac:	08001de0 	.word	0x08001de0
 8000db0:	08001de4 	.word	0x08001de4

08000db4 <memset>:
 8000db4:	4603      	mov	r3, r0
 8000db6:	4402      	add	r2, r0
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d100      	bne.n	8000dbe <memset+0xa>
 8000dbc:	4770      	bx	lr
 8000dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8000dc2:	e7f9      	b.n	8000db8 <memset+0x4>

08000dc4 <_puts_r>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	460e      	mov	r6, r1
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b118      	cbz	r0, 8000dd4 <_puts_r+0x10>
 8000dcc:	6983      	ldr	r3, [r0, #24]
 8000dce:	b90b      	cbnz	r3, 8000dd4 <_puts_r+0x10>
 8000dd0:	f000 fa44 	bl	800125c <__sinit>
 8000dd4:	69ab      	ldr	r3, [r5, #24]
 8000dd6:	68ac      	ldr	r4, [r5, #8]
 8000dd8:	b913      	cbnz	r3, 8000de0 <_puts_r+0x1c>
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f000 fa3e 	bl	800125c <__sinit>
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <_puts_r+0xd0>)
 8000de2:	429c      	cmp	r4, r3
 8000de4:	d120      	bne.n	8000e28 <_puts_r+0x64>
 8000de6:	686c      	ldr	r4, [r5, #4]
 8000de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dea:	07db      	lsls	r3, r3, #31
 8000dec:	d405      	bmi.n	8000dfa <_puts_r+0x36>
 8000dee:	89a3      	ldrh	r3, [r4, #12]
 8000df0:	0598      	lsls	r0, r3, #22
 8000df2:	d402      	bmi.n	8000dfa <_puts_r+0x36>
 8000df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000df6:	f000 facf 	bl	8001398 <__retarget_lock_acquire_recursive>
 8000dfa:	89a3      	ldrh	r3, [r4, #12]
 8000dfc:	0719      	lsls	r1, r3, #28
 8000dfe:	d51d      	bpl.n	8000e3c <_puts_r+0x78>
 8000e00:	6923      	ldr	r3, [r4, #16]
 8000e02:	b1db      	cbz	r3, 8000e3c <_puts_r+0x78>
 8000e04:	3e01      	subs	r6, #1
 8000e06:	68a3      	ldr	r3, [r4, #8]
 8000e08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	60a3      	str	r3, [r4, #8]
 8000e10:	bb39      	cbnz	r1, 8000e62 <_puts_r+0x9e>
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	da38      	bge.n	8000e88 <_puts_r+0xc4>
 8000e16:	4622      	mov	r2, r4
 8000e18:	210a      	movs	r1, #10
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f000 f848 	bl	8000eb0 <__swbuf_r>
 8000e20:	3001      	adds	r0, #1
 8000e22:	d011      	beq.n	8000e48 <_puts_r+0x84>
 8000e24:	250a      	movs	r5, #10
 8000e26:	e011      	b.n	8000e4c <_puts_r+0x88>
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <_puts_r+0xd4>)
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d101      	bne.n	8000e32 <_puts_r+0x6e>
 8000e2e:	68ac      	ldr	r4, [r5, #8]
 8000e30:	e7da      	b.n	8000de8 <_puts_r+0x24>
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <_puts_r+0xd8>)
 8000e34:	429c      	cmp	r4, r3
 8000e36:	bf08      	it	eq
 8000e38:	68ec      	ldreq	r4, [r5, #12]
 8000e3a:	e7d5      	b.n	8000de8 <_puts_r+0x24>
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f000 f888 	bl	8000f54 <__swsetup_r>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d0dd      	beq.n	8000e04 <_puts_r+0x40>
 8000e48:	f04f 35ff 	mov.w	r5, #4294967295
 8000e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e4e:	07da      	lsls	r2, r3, #31
 8000e50:	d405      	bmi.n	8000e5e <_puts_r+0x9a>
 8000e52:	89a3      	ldrh	r3, [r4, #12]
 8000e54:	059b      	lsls	r3, r3, #22
 8000e56:	d402      	bmi.n	8000e5e <_puts_r+0x9a>
 8000e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e5a:	f000 fa9e 	bl	800139a <__retarget_lock_release_recursive>
 8000e5e:	4628      	mov	r0, r5
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da04      	bge.n	8000e70 <_puts_r+0xac>
 8000e66:	69a2      	ldr	r2, [r4, #24]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dc06      	bgt.n	8000e7a <_puts_r+0xb6>
 8000e6c:	290a      	cmp	r1, #10
 8000e6e:	d004      	beq.n	8000e7a <_puts_r+0xb6>
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	6022      	str	r2, [r4, #0]
 8000e76:	7019      	strb	r1, [r3, #0]
 8000e78:	e7c5      	b.n	8000e06 <_puts_r+0x42>
 8000e7a:	4622      	mov	r2, r4
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	f000 f817 	bl	8000eb0 <__swbuf_r>
 8000e82:	3001      	adds	r0, #1
 8000e84:	d1bf      	bne.n	8000e06 <_puts_r+0x42>
 8000e86:	e7df      	b.n	8000e48 <_puts_r+0x84>
 8000e88:	250a      	movs	r5, #10
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	6022      	str	r2, [r4, #0]
 8000e90:	701d      	strb	r5, [r3, #0]
 8000e92:	e7db      	b.n	8000e4c <_puts_r+0x88>
 8000e94:	08001d84 	.word	0x08001d84
 8000e98:	08001da4 	.word	0x08001da4
 8000e9c:	08001d64 	.word	0x08001d64

08000ea0 <puts>:
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <puts+0xc>)
 8000ea2:	4601      	mov	r1, r0
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	f7ff bf8d 	b.w	8000dc4 <_puts_r>
 8000eaa:	bf00      	nop
 8000eac:	20000034 	.word	0x20000034

08000eb0 <__swbuf_r>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	460e      	mov	r6, r1
 8000eb4:	4614      	mov	r4, r2
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	b118      	cbz	r0, 8000ec2 <__swbuf_r+0x12>
 8000eba:	6983      	ldr	r3, [r0, #24]
 8000ebc:	b90b      	cbnz	r3, 8000ec2 <__swbuf_r+0x12>
 8000ebe:	f000 f9cd 	bl	800125c <__sinit>
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <__swbuf_r+0x98>)
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d12b      	bne.n	8000f20 <__swbuf_r+0x70>
 8000ec8:	686c      	ldr	r4, [r5, #4]
 8000eca:	69a3      	ldr	r3, [r4, #24]
 8000ecc:	60a3      	str	r3, [r4, #8]
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	071a      	lsls	r2, r3, #28
 8000ed2:	d52f      	bpl.n	8000f34 <__swbuf_r+0x84>
 8000ed4:	6923      	ldr	r3, [r4, #16]
 8000ed6:	b36b      	cbz	r3, 8000f34 <__swbuf_r+0x84>
 8000ed8:	6923      	ldr	r3, [r4, #16]
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	b2f6      	uxtb	r6, r6
 8000ede:	1ac0      	subs	r0, r0, r3
 8000ee0:	6963      	ldr	r3, [r4, #20]
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4283      	cmp	r3, r0
 8000ee6:	dc04      	bgt.n	8000ef2 <__swbuf_r+0x42>
 8000ee8:	4621      	mov	r1, r4
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 f922 	bl	8001134 <_fflush_r>
 8000ef0:	bb30      	cbnz	r0, 8000f40 <__swbuf_r+0x90>
 8000ef2:	68a3      	ldr	r3, [r4, #8]
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	60a3      	str	r3, [r4, #8]
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	6022      	str	r2, [r4, #0]
 8000f00:	701e      	strb	r6, [r3, #0]
 8000f02:	6963      	ldr	r3, [r4, #20]
 8000f04:	4283      	cmp	r3, r0
 8000f06:	d004      	beq.n	8000f12 <__swbuf_r+0x62>
 8000f08:	89a3      	ldrh	r3, [r4, #12]
 8000f0a:	07db      	lsls	r3, r3, #31
 8000f0c:	d506      	bpl.n	8000f1c <__swbuf_r+0x6c>
 8000f0e:	2e0a      	cmp	r6, #10
 8000f10:	d104      	bne.n	8000f1c <__swbuf_r+0x6c>
 8000f12:	4621      	mov	r1, r4
 8000f14:	4628      	mov	r0, r5
 8000f16:	f000 f90d 	bl	8001134 <_fflush_r>
 8000f1a:	b988      	cbnz	r0, 8000f40 <__swbuf_r+0x90>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <__swbuf_r+0x9c>)
 8000f22:	429c      	cmp	r4, r3
 8000f24:	d101      	bne.n	8000f2a <__swbuf_r+0x7a>
 8000f26:	68ac      	ldr	r4, [r5, #8]
 8000f28:	e7cf      	b.n	8000eca <__swbuf_r+0x1a>
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <__swbuf_r+0xa0>)
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	bf08      	it	eq
 8000f30:	68ec      	ldreq	r4, [r5, #12]
 8000f32:	e7ca      	b.n	8000eca <__swbuf_r+0x1a>
 8000f34:	4621      	mov	r1, r4
 8000f36:	4628      	mov	r0, r5
 8000f38:	f000 f80c 	bl	8000f54 <__swsetup_r>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	d0cb      	beq.n	8000ed8 <__swbuf_r+0x28>
 8000f40:	f04f 37ff 	mov.w	r7, #4294967295
 8000f44:	e7ea      	b.n	8000f1c <__swbuf_r+0x6c>
 8000f46:	bf00      	nop
 8000f48:	08001d84 	.word	0x08001d84
 8000f4c:	08001da4 	.word	0x08001da4
 8000f50:	08001d64 	.word	0x08001d64

08000f54 <__swsetup_r>:
 8000f54:	4b32      	ldr	r3, [pc, #200]	; (8001020 <__swsetup_r+0xcc>)
 8000f56:	b570      	push	{r4, r5, r6, lr}
 8000f58:	681d      	ldr	r5, [r3, #0]
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	460c      	mov	r4, r1
 8000f5e:	b125      	cbz	r5, 8000f6a <__swsetup_r+0x16>
 8000f60:	69ab      	ldr	r3, [r5, #24]
 8000f62:	b913      	cbnz	r3, 8000f6a <__swsetup_r+0x16>
 8000f64:	4628      	mov	r0, r5
 8000f66:	f000 f979 	bl	800125c <__sinit>
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <__swsetup_r+0xd0>)
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	d10f      	bne.n	8000f90 <__swsetup_r+0x3c>
 8000f70:	686c      	ldr	r4, [r5, #4]
 8000f72:	89a3      	ldrh	r3, [r4, #12]
 8000f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f78:	0719      	lsls	r1, r3, #28
 8000f7a:	d42c      	bmi.n	8000fd6 <__swsetup_r+0x82>
 8000f7c:	06dd      	lsls	r5, r3, #27
 8000f7e:	d411      	bmi.n	8000fa4 <__swsetup_r+0x50>
 8000f80:	2309      	movs	r3, #9
 8000f82:	6033      	str	r3, [r6, #0]
 8000f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	81a3      	strh	r3, [r4, #12]
 8000f8e:	e03e      	b.n	800100e <__swsetup_r+0xba>
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <__swsetup_r+0xd4>)
 8000f92:	429c      	cmp	r4, r3
 8000f94:	d101      	bne.n	8000f9a <__swsetup_r+0x46>
 8000f96:	68ac      	ldr	r4, [r5, #8]
 8000f98:	e7eb      	b.n	8000f72 <__swsetup_r+0x1e>
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <__swsetup_r+0xd8>)
 8000f9c:	429c      	cmp	r4, r3
 8000f9e:	bf08      	it	eq
 8000fa0:	68ec      	ldreq	r4, [r5, #12]
 8000fa2:	e7e6      	b.n	8000f72 <__swsetup_r+0x1e>
 8000fa4:	0758      	lsls	r0, r3, #29
 8000fa6:	d512      	bpl.n	8000fce <__swsetup_r+0x7a>
 8000fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000faa:	b141      	cbz	r1, 8000fbe <__swsetup_r+0x6a>
 8000fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fb0:	4299      	cmp	r1, r3
 8000fb2:	d002      	beq.n	8000fba <__swsetup_r+0x66>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f000 fa57 	bl	8001468 <_free_r>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8000fbe:	89a3      	ldrh	r3, [r4, #12]
 8000fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000fc4:	81a3      	strh	r3, [r4, #12]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	6063      	str	r3, [r4, #4]
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	6023      	str	r3, [r4, #0]
 8000fce:	89a3      	ldrh	r3, [r4, #12]
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	81a3      	strh	r3, [r4, #12]
 8000fd6:	6923      	ldr	r3, [r4, #16]
 8000fd8:	b94b      	cbnz	r3, 8000fee <__swsetup_r+0x9a>
 8000fda:	89a3      	ldrh	r3, [r4, #12]
 8000fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe4:	d003      	beq.n	8000fee <__swsetup_r+0x9a>
 8000fe6:	4621      	mov	r1, r4
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f000 f9fd 	bl	80013e8 <__smakebuf_r>
 8000fee:	89a0      	ldrh	r0, [r4, #12]
 8000ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ff4:	f010 0301 	ands.w	r3, r0, #1
 8000ff8:	d00a      	beq.n	8001010 <__swsetup_r+0xbc>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60a3      	str	r3, [r4, #8]
 8000ffe:	6963      	ldr	r3, [r4, #20]
 8001000:	425b      	negs	r3, r3
 8001002:	61a3      	str	r3, [r4, #24]
 8001004:	6923      	ldr	r3, [r4, #16]
 8001006:	b943      	cbnz	r3, 800101a <__swsetup_r+0xc6>
 8001008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800100c:	d1ba      	bne.n	8000f84 <__swsetup_r+0x30>
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	0781      	lsls	r1, r0, #30
 8001012:	bf58      	it	pl
 8001014:	6963      	ldrpl	r3, [r4, #20]
 8001016:	60a3      	str	r3, [r4, #8]
 8001018:	e7f4      	b.n	8001004 <__swsetup_r+0xb0>
 800101a:	2000      	movs	r0, #0
 800101c:	e7f7      	b.n	800100e <__swsetup_r+0xba>
 800101e:	bf00      	nop
 8001020:	20000034 	.word	0x20000034
 8001024:	08001d84 	.word	0x08001d84
 8001028:	08001da4 	.word	0x08001da4
 800102c:	08001d64 	.word	0x08001d64

08001030 <__sflush_r>:
 8001030:	898a      	ldrh	r2, [r1, #12]
 8001032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001034:	4605      	mov	r5, r0
 8001036:	0710      	lsls	r0, r2, #28
 8001038:	460c      	mov	r4, r1
 800103a:	d457      	bmi.n	80010ec <__sflush_r+0xbc>
 800103c:	684b      	ldr	r3, [r1, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	dc04      	bgt.n	800104c <__sflush_r+0x1c>
 8001042:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	dc01      	bgt.n	800104c <__sflush_r+0x1c>
 8001048:	2000      	movs	r0, #0
 800104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0fa      	beq.n	8001048 <__sflush_r+0x18>
 8001052:	2300      	movs	r3, #0
 8001054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001058:	682f      	ldr	r7, [r5, #0]
 800105a:	602b      	str	r3, [r5, #0]
 800105c:	d032      	beq.n	80010c4 <__sflush_r+0x94>
 800105e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	075a      	lsls	r2, r3, #29
 8001064:	d505      	bpl.n	8001072 <__sflush_r+0x42>
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	1ac0      	subs	r0, r0, r3
 800106a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800106c:	b10b      	cbz	r3, 8001072 <__sflush_r+0x42>
 800106e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001070:	1ac0      	subs	r0, r0, r3
 8001072:	2300      	movs	r3, #0
 8001074:	4602      	mov	r2, r0
 8001076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001078:	4628      	mov	r0, r5
 800107a:	6a21      	ldr	r1, [r4, #32]
 800107c:	47b0      	blx	r6
 800107e:	1c43      	adds	r3, r0, #1
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	d106      	bne.n	8001092 <__sflush_r+0x62>
 8001084:	6829      	ldr	r1, [r5, #0]
 8001086:	291d      	cmp	r1, #29
 8001088:	d82c      	bhi.n	80010e4 <__sflush_r+0xb4>
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <__sflush_r+0x100>)
 800108c:	40ca      	lsrs	r2, r1
 800108e:	07d6      	lsls	r6, r2, #31
 8001090:	d528      	bpl.n	80010e4 <__sflush_r+0xb4>
 8001092:	2200      	movs	r2, #0
 8001094:	6062      	str	r2, [r4, #4]
 8001096:	6922      	ldr	r2, [r4, #16]
 8001098:	04d9      	lsls	r1, r3, #19
 800109a:	6022      	str	r2, [r4, #0]
 800109c:	d504      	bpl.n	80010a8 <__sflush_r+0x78>
 800109e:	1c42      	adds	r2, r0, #1
 80010a0:	d101      	bne.n	80010a6 <__sflush_r+0x76>
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	b903      	cbnz	r3, 80010a8 <__sflush_r+0x78>
 80010a6:	6560      	str	r0, [r4, #84]	; 0x54
 80010a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010aa:	602f      	str	r7, [r5, #0]
 80010ac:	2900      	cmp	r1, #0
 80010ae:	d0cb      	beq.n	8001048 <__sflush_r+0x18>
 80010b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d002      	beq.n	80010be <__sflush_r+0x8e>
 80010b8:	4628      	mov	r0, r5
 80010ba:	f000 f9d5 	bl	8001468 <_free_r>
 80010be:	2000      	movs	r0, #0
 80010c0:	6360      	str	r0, [r4, #52]	; 0x34
 80010c2:	e7c2      	b.n	800104a <__sflush_r+0x1a>
 80010c4:	6a21      	ldr	r1, [r4, #32]
 80010c6:	2301      	movs	r3, #1
 80010c8:	4628      	mov	r0, r5
 80010ca:	47b0      	blx	r6
 80010cc:	1c41      	adds	r1, r0, #1
 80010ce:	d1c7      	bne.n	8001060 <__sflush_r+0x30>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0c4      	beq.n	8001060 <__sflush_r+0x30>
 80010d6:	2b1d      	cmp	r3, #29
 80010d8:	d001      	beq.n	80010de <__sflush_r+0xae>
 80010da:	2b16      	cmp	r3, #22
 80010dc:	d101      	bne.n	80010e2 <__sflush_r+0xb2>
 80010de:	602f      	str	r7, [r5, #0]
 80010e0:	e7b2      	b.n	8001048 <__sflush_r+0x18>
 80010e2:	89a3      	ldrh	r3, [r4, #12]
 80010e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e8:	81a3      	strh	r3, [r4, #12]
 80010ea:	e7ae      	b.n	800104a <__sflush_r+0x1a>
 80010ec:	690f      	ldr	r7, [r1, #16]
 80010ee:	2f00      	cmp	r7, #0
 80010f0:	d0aa      	beq.n	8001048 <__sflush_r+0x18>
 80010f2:	0793      	lsls	r3, r2, #30
 80010f4:	bf18      	it	ne
 80010f6:	2300      	movne	r3, #0
 80010f8:	680e      	ldr	r6, [r1, #0]
 80010fa:	bf08      	it	eq
 80010fc:	694b      	ldreq	r3, [r1, #20]
 80010fe:	1bf6      	subs	r6, r6, r7
 8001100:	600f      	str	r7, [r1, #0]
 8001102:	608b      	str	r3, [r1, #8]
 8001104:	2e00      	cmp	r6, #0
 8001106:	dd9f      	ble.n	8001048 <__sflush_r+0x18>
 8001108:	4633      	mov	r3, r6
 800110a:	463a      	mov	r2, r7
 800110c:	4628      	mov	r0, r5
 800110e:	6a21      	ldr	r1, [r4, #32]
 8001110:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001114:	47e0      	blx	ip
 8001116:	2800      	cmp	r0, #0
 8001118:	dc06      	bgt.n	8001128 <__sflush_r+0xf8>
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001124:	81a3      	strh	r3, [r4, #12]
 8001126:	e790      	b.n	800104a <__sflush_r+0x1a>
 8001128:	4407      	add	r7, r0
 800112a:	1a36      	subs	r6, r6, r0
 800112c:	e7ea      	b.n	8001104 <__sflush_r+0xd4>
 800112e:	bf00      	nop
 8001130:	20400001 	.word	0x20400001

08001134 <_fflush_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	690b      	ldr	r3, [r1, #16]
 8001138:	4605      	mov	r5, r0
 800113a:	460c      	mov	r4, r1
 800113c:	b913      	cbnz	r3, 8001144 <_fflush_r+0x10>
 800113e:	2500      	movs	r5, #0
 8001140:	4628      	mov	r0, r5
 8001142:	bd38      	pop	{r3, r4, r5, pc}
 8001144:	b118      	cbz	r0, 800114e <_fflush_r+0x1a>
 8001146:	6983      	ldr	r3, [r0, #24]
 8001148:	b90b      	cbnz	r3, 800114e <_fflush_r+0x1a>
 800114a:	f000 f887 	bl	800125c <__sinit>
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <_fflush_r+0x6c>)
 8001150:	429c      	cmp	r4, r3
 8001152:	d11b      	bne.n	800118c <_fflush_r+0x58>
 8001154:	686c      	ldr	r4, [r5, #4]
 8001156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0ef      	beq.n	800113e <_fflush_r+0xa>
 800115e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001160:	07d0      	lsls	r0, r2, #31
 8001162:	d404      	bmi.n	800116e <_fflush_r+0x3a>
 8001164:	0599      	lsls	r1, r3, #22
 8001166:	d402      	bmi.n	800116e <_fflush_r+0x3a>
 8001168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800116a:	f000 f915 	bl	8001398 <__retarget_lock_acquire_recursive>
 800116e:	4628      	mov	r0, r5
 8001170:	4621      	mov	r1, r4
 8001172:	f7ff ff5d 	bl	8001030 <__sflush_r>
 8001176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001178:	4605      	mov	r5, r0
 800117a:	07da      	lsls	r2, r3, #31
 800117c:	d4e0      	bmi.n	8001140 <_fflush_r+0xc>
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	059b      	lsls	r3, r3, #22
 8001182:	d4dd      	bmi.n	8001140 <_fflush_r+0xc>
 8001184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001186:	f000 f908 	bl	800139a <__retarget_lock_release_recursive>
 800118a:	e7d9      	b.n	8001140 <_fflush_r+0xc>
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <_fflush_r+0x70>)
 800118e:	429c      	cmp	r4, r3
 8001190:	d101      	bne.n	8001196 <_fflush_r+0x62>
 8001192:	68ac      	ldr	r4, [r5, #8]
 8001194:	e7df      	b.n	8001156 <_fflush_r+0x22>
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <_fflush_r+0x74>)
 8001198:	429c      	cmp	r4, r3
 800119a:	bf08      	it	eq
 800119c:	68ec      	ldreq	r4, [r5, #12]
 800119e:	e7da      	b.n	8001156 <_fflush_r+0x22>
 80011a0:	08001d84 	.word	0x08001d84
 80011a4:	08001da4 	.word	0x08001da4
 80011a8:	08001d64 	.word	0x08001d64

080011ac <std>:
 80011ac:	2300      	movs	r3, #0
 80011ae:	b510      	push	{r4, lr}
 80011b0:	4604      	mov	r4, r0
 80011b2:	e9c0 3300 	strd	r3, r3, [r0]
 80011b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011ba:	6083      	str	r3, [r0, #8]
 80011bc:	8181      	strh	r1, [r0, #12]
 80011be:	6643      	str	r3, [r0, #100]	; 0x64
 80011c0:	81c2      	strh	r2, [r0, #14]
 80011c2:	6183      	str	r3, [r0, #24]
 80011c4:	4619      	mov	r1, r3
 80011c6:	2208      	movs	r2, #8
 80011c8:	305c      	adds	r0, #92	; 0x5c
 80011ca:	f7ff fdf3 	bl	8000db4 <memset>
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <std+0x38>)
 80011d0:	6224      	str	r4, [r4, #32]
 80011d2:	6263      	str	r3, [r4, #36]	; 0x24
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <std+0x3c>)
 80011d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <std+0x40>)
 80011da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <std+0x44>)
 80011de:	6323      	str	r3, [r4, #48]	; 0x30
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	bf00      	nop
 80011e4:	08001641 	.word	0x08001641
 80011e8:	08001663 	.word	0x08001663
 80011ec:	0800169b 	.word	0x0800169b
 80011f0:	080016bf 	.word	0x080016bf

080011f4 <_cleanup_r>:
 80011f4:	4901      	ldr	r1, [pc, #4]	; (80011fc <_cleanup_r+0x8>)
 80011f6:	f000 b8af 	b.w	8001358 <_fwalk_reent>
 80011fa:	bf00      	nop
 80011fc:	08001135 	.word	0x08001135

08001200 <__sfmoreglue>:
 8001200:	2268      	movs	r2, #104	; 0x68
 8001202:	b570      	push	{r4, r5, r6, lr}
 8001204:	1e4d      	subs	r5, r1, #1
 8001206:	4355      	muls	r5, r2
 8001208:	460e      	mov	r6, r1
 800120a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800120e:	f000 f993 	bl	8001538 <_malloc_r>
 8001212:	4604      	mov	r4, r0
 8001214:	b140      	cbz	r0, 8001228 <__sfmoreglue+0x28>
 8001216:	2100      	movs	r1, #0
 8001218:	e9c0 1600 	strd	r1, r6, [r0]
 800121c:	300c      	adds	r0, #12
 800121e:	60a0      	str	r0, [r4, #8]
 8001220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001224:	f7ff fdc6 	bl	8000db4 <memset>
 8001228:	4620      	mov	r0, r4
 800122a:	bd70      	pop	{r4, r5, r6, pc}

0800122c <__sfp_lock_acquire>:
 800122c:	4801      	ldr	r0, [pc, #4]	; (8001234 <__sfp_lock_acquire+0x8>)
 800122e:	f000 b8b3 	b.w	8001398 <__retarget_lock_acquire_recursive>
 8001232:	bf00      	nop
 8001234:	200000cd 	.word	0x200000cd

08001238 <__sfp_lock_release>:
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <__sfp_lock_release+0x8>)
 800123a:	f000 b8ae 	b.w	800139a <__retarget_lock_release_recursive>
 800123e:	bf00      	nop
 8001240:	200000cd 	.word	0x200000cd

08001244 <__sinit_lock_acquire>:
 8001244:	4801      	ldr	r0, [pc, #4]	; (800124c <__sinit_lock_acquire+0x8>)
 8001246:	f000 b8a7 	b.w	8001398 <__retarget_lock_acquire_recursive>
 800124a:	bf00      	nop
 800124c:	200000ce 	.word	0x200000ce

08001250 <__sinit_lock_release>:
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <__sinit_lock_release+0x8>)
 8001252:	f000 b8a2 	b.w	800139a <__retarget_lock_release_recursive>
 8001256:	bf00      	nop
 8001258:	200000ce 	.word	0x200000ce

0800125c <__sinit>:
 800125c:	b510      	push	{r4, lr}
 800125e:	4604      	mov	r4, r0
 8001260:	f7ff fff0 	bl	8001244 <__sinit_lock_acquire>
 8001264:	69a3      	ldr	r3, [r4, #24]
 8001266:	b11b      	cbz	r3, 8001270 <__sinit+0x14>
 8001268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800126c:	f7ff bff0 	b.w	8001250 <__sinit_lock_release>
 8001270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001274:	6523      	str	r3, [r4, #80]	; 0x50
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <__sinit+0x68>)
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <__sinit+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	62a2      	str	r2, [r4, #40]	; 0x28
 800127e:	42a3      	cmp	r3, r4
 8001280:	bf08      	it	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	4620      	mov	r0, r4
 8001286:	bf08      	it	eq
 8001288:	61a3      	streq	r3, [r4, #24]
 800128a:	f000 f81f 	bl	80012cc <__sfp>
 800128e:	6060      	str	r0, [r4, #4]
 8001290:	4620      	mov	r0, r4
 8001292:	f000 f81b 	bl	80012cc <__sfp>
 8001296:	60a0      	str	r0, [r4, #8]
 8001298:	4620      	mov	r0, r4
 800129a:	f000 f817 	bl	80012cc <__sfp>
 800129e:	2200      	movs	r2, #0
 80012a0:	2104      	movs	r1, #4
 80012a2:	60e0      	str	r0, [r4, #12]
 80012a4:	6860      	ldr	r0, [r4, #4]
 80012a6:	f7ff ff81 	bl	80011ac <std>
 80012aa:	2201      	movs	r2, #1
 80012ac:	2109      	movs	r1, #9
 80012ae:	68a0      	ldr	r0, [r4, #8]
 80012b0:	f7ff ff7c 	bl	80011ac <std>
 80012b4:	2202      	movs	r2, #2
 80012b6:	2112      	movs	r1, #18
 80012b8:	68e0      	ldr	r0, [r4, #12]
 80012ba:	f7ff ff77 	bl	80011ac <std>
 80012be:	2301      	movs	r3, #1
 80012c0:	61a3      	str	r3, [r4, #24]
 80012c2:	e7d1      	b.n	8001268 <__sinit+0xc>
 80012c4:	08001d60 	.word	0x08001d60
 80012c8:	080011f5 	.word	0x080011f5

080012cc <__sfp>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	4607      	mov	r7, r0
 80012d0:	f7ff ffac 	bl	800122c <__sfp_lock_acquire>
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <__sfp+0x84>)
 80012d6:	681e      	ldr	r6, [r3, #0]
 80012d8:	69b3      	ldr	r3, [r6, #24]
 80012da:	b913      	cbnz	r3, 80012e2 <__sfp+0x16>
 80012dc:	4630      	mov	r0, r6
 80012de:	f7ff ffbd 	bl	800125c <__sinit>
 80012e2:	3648      	adds	r6, #72	; 0x48
 80012e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	d503      	bpl.n	80012f4 <__sfp+0x28>
 80012ec:	6833      	ldr	r3, [r6, #0]
 80012ee:	b30b      	cbz	r3, 8001334 <__sfp+0x68>
 80012f0:	6836      	ldr	r6, [r6, #0]
 80012f2:	e7f7      	b.n	80012e4 <__sfp+0x18>
 80012f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012f8:	b9d5      	cbnz	r5, 8001330 <__sfp+0x64>
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <__sfp+0x88>)
 80012fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001300:	60e3      	str	r3, [r4, #12]
 8001302:	6665      	str	r5, [r4, #100]	; 0x64
 8001304:	f000 f847 	bl	8001396 <__retarget_lock_init_recursive>
 8001308:	f7ff ff96 	bl	8001238 <__sfp_lock_release>
 800130c:	2208      	movs	r2, #8
 800130e:	4629      	mov	r1, r5
 8001310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001318:	6025      	str	r5, [r4, #0]
 800131a:	61a5      	str	r5, [r4, #24]
 800131c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001320:	f7ff fd48 	bl	8000db4 <memset>
 8001324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800132c:	4620      	mov	r0, r4
 800132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001330:	3468      	adds	r4, #104	; 0x68
 8001332:	e7d9      	b.n	80012e8 <__sfp+0x1c>
 8001334:	2104      	movs	r1, #4
 8001336:	4638      	mov	r0, r7
 8001338:	f7ff ff62 	bl	8001200 <__sfmoreglue>
 800133c:	4604      	mov	r4, r0
 800133e:	6030      	str	r0, [r6, #0]
 8001340:	2800      	cmp	r0, #0
 8001342:	d1d5      	bne.n	80012f0 <__sfp+0x24>
 8001344:	f7ff ff78 	bl	8001238 <__sfp_lock_release>
 8001348:	230c      	movs	r3, #12
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	e7ee      	b.n	800132c <__sfp+0x60>
 800134e:	bf00      	nop
 8001350:	08001d60 	.word	0x08001d60
 8001354:	ffff0001 	.word	0xffff0001

08001358 <_fwalk_reent>:
 8001358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800135c:	4606      	mov	r6, r0
 800135e:	4688      	mov	r8, r1
 8001360:	2700      	movs	r7, #0
 8001362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800136a:	f1b9 0901 	subs.w	r9, r9, #1
 800136e:	d505      	bpl.n	800137c <_fwalk_reent+0x24>
 8001370:	6824      	ldr	r4, [r4, #0]
 8001372:	2c00      	cmp	r4, #0
 8001374:	d1f7      	bne.n	8001366 <_fwalk_reent+0xe>
 8001376:	4638      	mov	r0, r7
 8001378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800137c:	89ab      	ldrh	r3, [r5, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d907      	bls.n	8001392 <_fwalk_reent+0x3a>
 8001382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001386:	3301      	adds	r3, #1
 8001388:	d003      	beq.n	8001392 <_fwalk_reent+0x3a>
 800138a:	4629      	mov	r1, r5
 800138c:	4630      	mov	r0, r6
 800138e:	47c0      	blx	r8
 8001390:	4307      	orrs	r7, r0
 8001392:	3568      	adds	r5, #104	; 0x68
 8001394:	e7e9      	b.n	800136a <_fwalk_reent+0x12>

08001396 <__retarget_lock_init_recursive>:
 8001396:	4770      	bx	lr

08001398 <__retarget_lock_acquire_recursive>:
 8001398:	4770      	bx	lr

0800139a <__retarget_lock_release_recursive>:
 800139a:	4770      	bx	lr

0800139c <__swhatbuf_r>:
 800139c:	b570      	push	{r4, r5, r6, lr}
 800139e:	460e      	mov	r6, r1
 80013a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a4:	4614      	mov	r4, r2
 80013a6:	2900      	cmp	r1, #0
 80013a8:	461d      	mov	r5, r3
 80013aa:	b096      	sub	sp, #88	; 0x58
 80013ac:	da08      	bge.n	80013c0 <__swhatbuf_r+0x24>
 80013ae:	2200      	movs	r2, #0
 80013b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80013b4:	602a      	str	r2, [r5, #0]
 80013b6:	061a      	lsls	r2, r3, #24
 80013b8:	d410      	bmi.n	80013dc <__swhatbuf_r+0x40>
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	e00e      	b.n	80013de <__swhatbuf_r+0x42>
 80013c0:	466a      	mov	r2, sp
 80013c2:	f000 f9a3 	bl	800170c <_fstat_r>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	dbf1      	blt.n	80013ae <__swhatbuf_r+0x12>
 80013ca:	9a01      	ldr	r2, [sp, #4]
 80013cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80013d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80013d4:	425a      	negs	r2, r3
 80013d6:	415a      	adcs	r2, r3
 80013d8:	602a      	str	r2, [r5, #0]
 80013da:	e7ee      	b.n	80013ba <__swhatbuf_r+0x1e>
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	2000      	movs	r0, #0
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	b016      	add	sp, #88	; 0x58
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080013e8 <__smakebuf_r>:
 80013e8:	898b      	ldrh	r3, [r1, #12]
 80013ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ec:	079d      	lsls	r5, r3, #30
 80013ee:	4606      	mov	r6, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	d507      	bpl.n	8001404 <__smakebuf_r+0x1c>
 80013f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80013f8:	6023      	str	r3, [r4, #0]
 80013fa:	6123      	str	r3, [r4, #16]
 80013fc:	2301      	movs	r3, #1
 80013fe:	6163      	str	r3, [r4, #20]
 8001400:	b002      	add	sp, #8
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	466a      	mov	r2, sp
 8001406:	ab01      	add	r3, sp, #4
 8001408:	f7ff ffc8 	bl	800139c <__swhatbuf_r>
 800140c:	9900      	ldr	r1, [sp, #0]
 800140e:	4605      	mov	r5, r0
 8001410:	4630      	mov	r0, r6
 8001412:	f000 f891 	bl	8001538 <_malloc_r>
 8001416:	b948      	cbnz	r0, 800142c <__smakebuf_r+0x44>
 8001418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141c:	059a      	lsls	r2, r3, #22
 800141e:	d4ef      	bmi.n	8001400 <__smakebuf_r+0x18>
 8001420:	f023 0303 	bic.w	r3, r3, #3
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	81a3      	strh	r3, [r4, #12]
 800142a:	e7e3      	b.n	80013f4 <__smakebuf_r+0xc>
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <__smakebuf_r+0x7c>)
 800142e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001430:	89a3      	ldrh	r3, [r4, #12]
 8001432:	6020      	str	r0, [r4, #0]
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	81a3      	strh	r3, [r4, #12]
 800143a:	9b00      	ldr	r3, [sp, #0]
 800143c:	6120      	str	r0, [r4, #16]
 800143e:	6163      	str	r3, [r4, #20]
 8001440:	9b01      	ldr	r3, [sp, #4]
 8001442:	b15b      	cbz	r3, 800145c <__smakebuf_r+0x74>
 8001444:	4630      	mov	r0, r6
 8001446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800144a:	f000 f971 	bl	8001730 <_isatty_r>
 800144e:	b128      	cbz	r0, 800145c <__smakebuf_r+0x74>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	81a3      	strh	r3, [r4, #12]
 800145c:	89a0      	ldrh	r0, [r4, #12]
 800145e:	4305      	orrs	r5, r0
 8001460:	81a5      	strh	r5, [r4, #12]
 8001462:	e7cd      	b.n	8001400 <__smakebuf_r+0x18>
 8001464:	080011f5 	.word	0x080011f5

08001468 <_free_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4605      	mov	r5, r0
 800146c:	2900      	cmp	r1, #0
 800146e:	d040      	beq.n	80014f2 <_free_r+0x8a>
 8001470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001474:	1f0c      	subs	r4, r1, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	bfb8      	it	lt
 800147a:	18e4      	addlt	r4, r4, r3
 800147c:	f000 f97a 	bl	8001774 <__malloc_lock>
 8001480:	4a1c      	ldr	r2, [pc, #112]	; (80014f4 <_free_r+0x8c>)
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	b933      	cbnz	r3, 8001494 <_free_r+0x2c>
 8001486:	6063      	str	r3, [r4, #4]
 8001488:	6014      	str	r4, [r2, #0]
 800148a:	4628      	mov	r0, r5
 800148c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001490:	f000 b976 	b.w	8001780 <__malloc_unlock>
 8001494:	42a3      	cmp	r3, r4
 8001496:	d908      	bls.n	80014aa <_free_r+0x42>
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	1821      	adds	r1, r4, r0
 800149c:	428b      	cmp	r3, r1
 800149e:	bf01      	itttt	eq
 80014a0:	6819      	ldreq	r1, [r3, #0]
 80014a2:	685b      	ldreq	r3, [r3, #4]
 80014a4:	1809      	addeq	r1, r1, r0
 80014a6:	6021      	streq	r1, [r4, #0]
 80014a8:	e7ed      	b.n	8001486 <_free_r+0x1e>
 80014aa:	461a      	mov	r2, r3
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	b10b      	cbz	r3, 80014b4 <_free_r+0x4c>
 80014b0:	42a3      	cmp	r3, r4
 80014b2:	d9fa      	bls.n	80014aa <_free_r+0x42>
 80014b4:	6811      	ldr	r1, [r2, #0]
 80014b6:	1850      	adds	r0, r2, r1
 80014b8:	42a0      	cmp	r0, r4
 80014ba:	d10b      	bne.n	80014d4 <_free_r+0x6c>
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	4401      	add	r1, r0
 80014c0:	1850      	adds	r0, r2, r1
 80014c2:	4283      	cmp	r3, r0
 80014c4:	6011      	str	r1, [r2, #0]
 80014c6:	d1e0      	bne.n	800148a <_free_r+0x22>
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4401      	add	r1, r0
 80014ce:	6011      	str	r1, [r2, #0]
 80014d0:	6053      	str	r3, [r2, #4]
 80014d2:	e7da      	b.n	800148a <_free_r+0x22>
 80014d4:	d902      	bls.n	80014dc <_free_r+0x74>
 80014d6:	230c      	movs	r3, #12
 80014d8:	602b      	str	r3, [r5, #0]
 80014da:	e7d6      	b.n	800148a <_free_r+0x22>
 80014dc:	6820      	ldr	r0, [r4, #0]
 80014de:	1821      	adds	r1, r4, r0
 80014e0:	428b      	cmp	r3, r1
 80014e2:	bf01      	itttt	eq
 80014e4:	6819      	ldreq	r1, [r3, #0]
 80014e6:	685b      	ldreq	r3, [r3, #4]
 80014e8:	1809      	addeq	r1, r1, r0
 80014ea:	6021      	streq	r1, [r4, #0]
 80014ec:	6063      	str	r3, [r4, #4]
 80014ee:	6054      	str	r4, [r2, #4]
 80014f0:	e7cb      	b.n	800148a <_free_r+0x22>
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	200000d0 	.word	0x200000d0

080014f8 <sbrk_aligned>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	4e0e      	ldr	r6, [pc, #56]	; (8001534 <sbrk_aligned+0x3c>)
 80014fc:	460c      	mov	r4, r1
 80014fe:	6831      	ldr	r1, [r6, #0]
 8001500:	4605      	mov	r5, r0
 8001502:	b911      	cbnz	r1, 800150a <sbrk_aligned+0x12>
 8001504:	f000 f88c 	bl	8001620 <_sbrk_r>
 8001508:	6030      	str	r0, [r6, #0]
 800150a:	4621      	mov	r1, r4
 800150c:	4628      	mov	r0, r5
 800150e:	f000 f887 	bl	8001620 <_sbrk_r>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d00a      	beq.n	800152c <sbrk_aligned+0x34>
 8001516:	1cc4      	adds	r4, r0, #3
 8001518:	f024 0403 	bic.w	r4, r4, #3
 800151c:	42a0      	cmp	r0, r4
 800151e:	d007      	beq.n	8001530 <sbrk_aligned+0x38>
 8001520:	1a21      	subs	r1, r4, r0
 8001522:	4628      	mov	r0, r5
 8001524:	f000 f87c 	bl	8001620 <_sbrk_r>
 8001528:	3001      	adds	r0, #1
 800152a:	d101      	bne.n	8001530 <sbrk_aligned+0x38>
 800152c:	f04f 34ff 	mov.w	r4, #4294967295
 8001530:	4620      	mov	r0, r4
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	200000d4 	.word	0x200000d4

08001538 <_malloc_r>:
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	1ccd      	adds	r5, r1, #3
 800153e:	f025 0503 	bic.w	r5, r5, #3
 8001542:	3508      	adds	r5, #8
 8001544:	2d0c      	cmp	r5, #12
 8001546:	bf38      	it	cc
 8001548:	250c      	movcc	r5, #12
 800154a:	2d00      	cmp	r5, #0
 800154c:	4607      	mov	r7, r0
 800154e:	db01      	blt.n	8001554 <_malloc_r+0x1c>
 8001550:	42a9      	cmp	r1, r5
 8001552:	d905      	bls.n	8001560 <_malloc_r+0x28>
 8001554:	230c      	movs	r3, #12
 8001556:	2600      	movs	r6, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4630      	mov	r0, r6
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001560:	4e2e      	ldr	r6, [pc, #184]	; (800161c <_malloc_r+0xe4>)
 8001562:	f000 f907 	bl	8001774 <__malloc_lock>
 8001566:	6833      	ldr	r3, [r6, #0]
 8001568:	461c      	mov	r4, r3
 800156a:	bb34      	cbnz	r4, 80015ba <_malloc_r+0x82>
 800156c:	4629      	mov	r1, r5
 800156e:	4638      	mov	r0, r7
 8001570:	f7ff ffc2 	bl	80014f8 <sbrk_aligned>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	4604      	mov	r4, r0
 8001578:	d14d      	bne.n	8001616 <_malloc_r+0xde>
 800157a:	6834      	ldr	r4, [r6, #0]
 800157c:	4626      	mov	r6, r4
 800157e:	2e00      	cmp	r6, #0
 8001580:	d140      	bne.n	8001604 <_malloc_r+0xcc>
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	4631      	mov	r1, r6
 8001586:	4638      	mov	r0, r7
 8001588:	eb04 0803 	add.w	r8, r4, r3
 800158c:	f000 f848 	bl	8001620 <_sbrk_r>
 8001590:	4580      	cmp	r8, r0
 8001592:	d13a      	bne.n	800160a <_malloc_r+0xd2>
 8001594:	6821      	ldr	r1, [r4, #0]
 8001596:	3503      	adds	r5, #3
 8001598:	1a6d      	subs	r5, r5, r1
 800159a:	f025 0503 	bic.w	r5, r5, #3
 800159e:	3508      	adds	r5, #8
 80015a0:	2d0c      	cmp	r5, #12
 80015a2:	bf38      	it	cc
 80015a4:	250c      	movcc	r5, #12
 80015a6:	4638      	mov	r0, r7
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff ffa5 	bl	80014f8 <sbrk_aligned>
 80015ae:	3001      	adds	r0, #1
 80015b0:	d02b      	beq.n	800160a <_malloc_r+0xd2>
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	442b      	add	r3, r5
 80015b6:	6023      	str	r3, [r4, #0]
 80015b8:	e00e      	b.n	80015d8 <_malloc_r+0xa0>
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	1b52      	subs	r2, r2, r5
 80015be:	d41e      	bmi.n	80015fe <_malloc_r+0xc6>
 80015c0:	2a0b      	cmp	r2, #11
 80015c2:	d916      	bls.n	80015f2 <_malloc_r+0xba>
 80015c4:	1961      	adds	r1, r4, r5
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	6025      	str	r5, [r4, #0]
 80015ca:	bf18      	it	ne
 80015cc:	6059      	strne	r1, [r3, #4]
 80015ce:	6863      	ldr	r3, [r4, #4]
 80015d0:	bf08      	it	eq
 80015d2:	6031      	streq	r1, [r6, #0]
 80015d4:	5162      	str	r2, [r4, r5]
 80015d6:	604b      	str	r3, [r1, #4]
 80015d8:	4638      	mov	r0, r7
 80015da:	f104 060b 	add.w	r6, r4, #11
 80015de:	f000 f8cf 	bl	8001780 <__malloc_unlock>
 80015e2:	f026 0607 	bic.w	r6, r6, #7
 80015e6:	1d23      	adds	r3, r4, #4
 80015e8:	1af2      	subs	r2, r6, r3
 80015ea:	d0b6      	beq.n	800155a <_malloc_r+0x22>
 80015ec:	1b9b      	subs	r3, r3, r6
 80015ee:	50a3      	str	r3, [r4, r2]
 80015f0:	e7b3      	b.n	800155a <_malloc_r+0x22>
 80015f2:	6862      	ldr	r2, [r4, #4]
 80015f4:	42a3      	cmp	r3, r4
 80015f6:	bf0c      	ite	eq
 80015f8:	6032      	streq	r2, [r6, #0]
 80015fa:	605a      	strne	r2, [r3, #4]
 80015fc:	e7ec      	b.n	80015d8 <_malloc_r+0xa0>
 80015fe:	4623      	mov	r3, r4
 8001600:	6864      	ldr	r4, [r4, #4]
 8001602:	e7b2      	b.n	800156a <_malloc_r+0x32>
 8001604:	4634      	mov	r4, r6
 8001606:	6876      	ldr	r6, [r6, #4]
 8001608:	e7b9      	b.n	800157e <_malloc_r+0x46>
 800160a:	230c      	movs	r3, #12
 800160c:	4638      	mov	r0, r7
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	f000 f8b6 	bl	8001780 <__malloc_unlock>
 8001614:	e7a1      	b.n	800155a <_malloc_r+0x22>
 8001616:	6025      	str	r5, [r4, #0]
 8001618:	e7de      	b.n	80015d8 <_malloc_r+0xa0>
 800161a:	bf00      	nop
 800161c:	200000d0 	.word	0x200000d0

08001620 <_sbrk_r>:
 8001620:	b538      	push	{r3, r4, r5, lr}
 8001622:	2300      	movs	r3, #0
 8001624:	4d05      	ldr	r5, [pc, #20]	; (800163c <_sbrk_r+0x1c>)
 8001626:	4604      	mov	r4, r0
 8001628:	4608      	mov	r0, r1
 800162a:	602b      	str	r3, [r5, #0]
 800162c:	f000 f9b8 	bl	80019a0 <_sbrk>
 8001630:	1c43      	adds	r3, r0, #1
 8001632:	d102      	bne.n	800163a <_sbrk_r+0x1a>
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	b103      	cbz	r3, 800163a <_sbrk_r+0x1a>
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	200000d8 	.word	0x200000d8

08001640 <__sread>:
 8001640:	b510      	push	{r4, lr}
 8001642:	460c      	mov	r4, r1
 8001644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001648:	f000 f8a0 	bl	800178c <_read_r>
 800164c:	2800      	cmp	r0, #0
 800164e:	bfab      	itete	ge
 8001650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001652:	89a3      	ldrhlt	r3, [r4, #12]
 8001654:	181b      	addge	r3, r3, r0
 8001656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800165a:	bfac      	ite	ge
 800165c:	6563      	strge	r3, [r4, #84]	; 0x54
 800165e:	81a3      	strhlt	r3, [r4, #12]
 8001660:	bd10      	pop	{r4, pc}

08001662 <__swrite>:
 8001662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001666:	461f      	mov	r7, r3
 8001668:	898b      	ldrh	r3, [r1, #12]
 800166a:	4605      	mov	r5, r0
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	460c      	mov	r4, r1
 8001670:	4616      	mov	r6, r2
 8001672:	d505      	bpl.n	8001680 <__swrite+0x1e>
 8001674:	2302      	movs	r3, #2
 8001676:	2200      	movs	r2, #0
 8001678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800167c:	f000 f868 	bl	8001750 <_lseek_r>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	4632      	mov	r2, r6
 8001684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001688:	81a3      	strh	r3, [r4, #12]
 800168a:	4628      	mov	r0, r5
 800168c:	463b      	mov	r3, r7
 800168e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001696:	f000 b817 	b.w	80016c8 <_write_r>

0800169a <__sseek>:
 800169a:	b510      	push	{r4, lr}
 800169c:	460c      	mov	r4, r1
 800169e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a2:	f000 f855 	bl	8001750 <_lseek_r>
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	bf15      	itete	ne
 80016ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80016ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016b6:	81a3      	strheq	r3, [r4, #12]
 80016b8:	bf18      	it	ne
 80016ba:	81a3      	strhne	r3, [r4, #12]
 80016bc:	bd10      	pop	{r4, pc}

080016be <__sclose>:
 80016be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c2:	f000 b813 	b.w	80016ec <_close_r>
	...

080016c8 <_write_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	2200      	movs	r2, #0
 80016d2:	4d05      	ldr	r5, [pc, #20]	; (80016e8 <_write_r+0x20>)
 80016d4:	602a      	str	r2, [r5, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	f000 f90f 	bl	80018fa <_write>
 80016dc:	1c43      	adds	r3, r0, #1
 80016de:	d102      	bne.n	80016e6 <_write_r+0x1e>
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	b103      	cbz	r3, 80016e6 <_write_r+0x1e>
 80016e4:	6023      	str	r3, [r4, #0]
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	200000d8 	.word	0x200000d8

080016ec <_close_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	2300      	movs	r3, #0
 80016f0:	4d05      	ldr	r5, [pc, #20]	; (8001708 <_close_r+0x1c>)
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	602b      	str	r3, [r5, #0]
 80016f8:	f000 f92c 	bl	8001954 <_close>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d102      	bne.n	8001706 <_close_r+0x1a>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	b103      	cbz	r3, 8001706 <_close_r+0x1a>
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	200000d8 	.word	0x200000d8

0800170c <_fstat_r>:
 800170c:	b538      	push	{r3, r4, r5, lr}
 800170e:	2300      	movs	r3, #0
 8001710:	4d06      	ldr	r5, [pc, #24]	; (800172c <_fstat_r+0x20>)
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	602b      	str	r3, [r5, #0]
 800171a:	f000 f986 	bl	8001a2a <_fstat>
 800171e:	1c43      	adds	r3, r0, #1
 8001720:	d102      	bne.n	8001728 <_fstat_r+0x1c>
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	b103      	cbz	r3, 8001728 <_fstat_r+0x1c>
 8001726:	6023      	str	r3, [r4, #0]
 8001728:	bd38      	pop	{r3, r4, r5, pc}
 800172a:	bf00      	nop
 800172c:	200000d8 	.word	0x200000d8

08001730 <_isatty_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	2300      	movs	r3, #0
 8001734:	4d05      	ldr	r5, [pc, #20]	; (800174c <_isatty_r+0x1c>)
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	f000 fadc 	bl	8001cf8 <_isatty>
 8001740:	1c43      	adds	r3, r0, #1
 8001742:	d102      	bne.n	800174a <_isatty_r+0x1a>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	b103      	cbz	r3, 800174a <_isatty_r+0x1a>
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	bd38      	pop	{r3, r4, r5, pc}
 800174c:	200000d8 	.word	0x200000d8

08001750 <_lseek_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	2200      	movs	r2, #0
 800175a:	4d05      	ldr	r5, [pc, #20]	; (8001770 <_lseek_r+0x20>)
 800175c:	602a      	str	r2, [r5, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	f000 f8b9 	bl	80018d6 <_lseek>
 8001764:	1c43      	adds	r3, r0, #1
 8001766:	d102      	bne.n	800176e <_lseek_r+0x1e>
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	b103      	cbz	r3, 800176e <_lseek_r+0x1e>
 800176c:	6023      	str	r3, [r4, #0]
 800176e:	bd38      	pop	{r3, r4, r5, pc}
 8001770:	200000d8 	.word	0x200000d8

08001774 <__malloc_lock>:
 8001774:	4801      	ldr	r0, [pc, #4]	; (800177c <__malloc_lock+0x8>)
 8001776:	f7ff be0f 	b.w	8001398 <__retarget_lock_acquire_recursive>
 800177a:	bf00      	nop
 800177c:	200000cc 	.word	0x200000cc

08001780 <__malloc_unlock>:
 8001780:	4801      	ldr	r0, [pc, #4]	; (8001788 <__malloc_unlock+0x8>)
 8001782:	f7ff be0a 	b.w	800139a <__retarget_lock_release_recursive>
 8001786:	bf00      	nop
 8001788:	200000cc 	.word	0x200000cc

0800178c <_read_r>:
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	2200      	movs	r2, #0
 8001796:	4d05      	ldr	r5, [pc, #20]	; (80017ac <_read_r+0x20>)
 8001798:	602a      	str	r2, [r5, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	f000 f845 	bl	800182a <_read>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_read_r+0x1e>
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_read_r+0x1e>
 80017a8:	6023      	str	r3, [r4, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	200000d8 	.word	0x200000d8

080017b0 <findslot>:
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <findslot+0x2c>)
 80017b2:	b510      	push	{r4, lr}
 80017b4:	4604      	mov	r4, r0
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	b118      	cbz	r0, 80017c2 <findslot+0x12>
 80017ba:	6983      	ldr	r3, [r0, #24]
 80017bc:	b90b      	cbnz	r3, 80017c2 <findslot+0x12>
 80017be:	f7ff fd4d 	bl	800125c <__sinit>
 80017c2:	2c13      	cmp	r4, #19
 80017c4:	d807      	bhi.n	80017d6 <findslot+0x26>
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <findslot+0x30>)
 80017c8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80017cc:	3201      	adds	r2, #1
 80017ce:	d002      	beq.n	80017d6 <findslot+0x26>
 80017d0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7fc      	b.n	80017d4 <findslot+0x24>
 80017da:	bf00      	nop
 80017dc:	20000034 	.word	0x20000034
 80017e0:	200000ec 	.word	0x200000ec

080017e4 <error>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	4604      	mov	r4, r0
 80017e8:	f000 faa2 	bl	8001d30 <__errno>
 80017ec:	2613      	movs	r6, #19
 80017ee:	4605      	mov	r5, r0
 80017f0:	2700      	movs	r7, #0
 80017f2:	4630      	mov	r0, r6
 80017f4:	4639      	mov	r1, r7
 80017f6:	beab      	bkpt	0x00ab
 80017f8:	4606      	mov	r6, r0
 80017fa:	4620      	mov	r0, r4
 80017fc:	602e      	str	r6, [r5, #0]
 80017fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001800 <checkerror>:
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d101      	bne.n	8001808 <checkerror+0x8>
 8001804:	f7ff bfee 	b.w	80017e4 <error>
 8001808:	4770      	bx	lr

0800180a <_swiread>:
 800180a:	b530      	push	{r4, r5, lr}
 800180c:	b085      	sub	sp, #20
 800180e:	2406      	movs	r4, #6
 8001810:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001814:	9203      	str	r2, [sp, #12]
 8001816:	ad01      	add	r5, sp, #4
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	beab      	bkpt	0x00ab
 800181e:	4604      	mov	r4, r0
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff ffed 	bl	8001800 <checkerror>
 8001826:	b005      	add	sp, #20
 8001828:	bd30      	pop	{r4, r5, pc}

0800182a <_read>:
 800182a:	b570      	push	{r4, r5, r6, lr}
 800182c:	460e      	mov	r6, r1
 800182e:	4615      	mov	r5, r2
 8001830:	f7ff ffbe 	bl	80017b0 <findslot>
 8001834:	4604      	mov	r4, r0
 8001836:	b930      	cbnz	r0, 8001846 <_read+0x1c>
 8001838:	f000 fa7a 	bl	8001d30 <__errno>
 800183c:	2309      	movs	r3, #9
 800183e:	6003      	str	r3, [r0, #0]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	462a      	mov	r2, r5
 8001848:	4631      	mov	r1, r6
 800184a:	6800      	ldr	r0, [r0, #0]
 800184c:	f7ff ffdd 	bl	800180a <_swiread>
 8001850:	1c43      	adds	r3, r0, #1
 8001852:	bf1f      	itttt	ne
 8001854:	6863      	ldrne	r3, [r4, #4]
 8001856:	1a28      	subne	r0, r5, r0
 8001858:	181b      	addne	r3, r3, r0
 800185a:	6063      	strne	r3, [r4, #4]
 800185c:	e7f2      	b.n	8001844 <_read+0x1a>

0800185e <_swilseek>:
 800185e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001860:	460c      	mov	r4, r1
 8001862:	4616      	mov	r6, r2
 8001864:	f7ff ffa4 	bl	80017b0 <findslot>
 8001868:	4605      	mov	r5, r0
 800186a:	b940      	cbnz	r0, 800187e <_swilseek+0x20>
 800186c:	f000 fa60 	bl	8001d30 <__errno>
 8001870:	2309      	movs	r3, #9
 8001872:	6003      	str	r3, [r0, #0]
 8001874:	f04f 34ff 	mov.w	r4, #4294967295
 8001878:	4620      	mov	r0, r4
 800187a:	b003      	add	sp, #12
 800187c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187e:	2e02      	cmp	r6, #2
 8001880:	d903      	bls.n	800188a <_swilseek+0x2c>
 8001882:	f000 fa55 	bl	8001d30 <__errno>
 8001886:	2316      	movs	r3, #22
 8001888:	e7f3      	b.n	8001872 <_swilseek+0x14>
 800188a:	2e01      	cmp	r6, #1
 800188c:	d112      	bne.n	80018b4 <_swilseek+0x56>
 800188e:	6843      	ldr	r3, [r0, #4]
 8001890:	18e4      	adds	r4, r4, r3
 8001892:	d4f6      	bmi.n	8001882 <_swilseek+0x24>
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	260a      	movs	r6, #10
 8001898:	466f      	mov	r7, sp
 800189a:	e9cd 3400 	strd	r3, r4, [sp]
 800189e:	4630      	mov	r0, r6
 80018a0:	4639      	mov	r1, r7
 80018a2:	beab      	bkpt	0x00ab
 80018a4:	4606      	mov	r6, r0
 80018a6:	4630      	mov	r0, r6
 80018a8:	f7ff ffaa 	bl	8001800 <checkerror>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	dbe1      	blt.n	8001874 <_swilseek+0x16>
 80018b0:	606c      	str	r4, [r5, #4]
 80018b2:	e7e1      	b.n	8001878 <_swilseek+0x1a>
 80018b4:	2e02      	cmp	r6, #2
 80018b6:	d1ed      	bne.n	8001894 <_swilseek+0x36>
 80018b8:	6803      	ldr	r3, [r0, #0]
 80018ba:	260c      	movs	r6, #12
 80018bc:	466f      	mov	r7, sp
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4630      	mov	r0, r6
 80018c2:	4639      	mov	r1, r7
 80018c4:	beab      	bkpt	0x00ab
 80018c6:	4606      	mov	r6, r0
 80018c8:	4630      	mov	r0, r6
 80018ca:	f7ff ff99 	bl	8001800 <checkerror>
 80018ce:	1c43      	adds	r3, r0, #1
 80018d0:	d0d0      	beq.n	8001874 <_swilseek+0x16>
 80018d2:	4404      	add	r4, r0
 80018d4:	e7de      	b.n	8001894 <_swilseek+0x36>

080018d6 <_lseek>:
 80018d6:	f7ff bfc2 	b.w	800185e <_swilseek>

080018da <_swiwrite>:
 80018da:	b530      	push	{r4, r5, lr}
 80018dc:	b085      	sub	sp, #20
 80018de:	2405      	movs	r4, #5
 80018e0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	ad01      	add	r5, sp, #4
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	beab      	bkpt	0x00ab
 80018ee:	4604      	mov	r4, r0
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff85 	bl	8001800 <checkerror>
 80018f6:	b005      	add	sp, #20
 80018f8:	bd30      	pop	{r4, r5, pc}

080018fa <_write>:
 80018fa:	b570      	push	{r4, r5, r6, lr}
 80018fc:	460e      	mov	r6, r1
 80018fe:	4615      	mov	r5, r2
 8001900:	f7ff ff56 	bl	80017b0 <findslot>
 8001904:	4604      	mov	r4, r0
 8001906:	b930      	cbnz	r0, 8001916 <_write+0x1c>
 8001908:	f000 fa12 	bl	8001d30 <__errno>
 800190c:	2309      	movs	r3, #9
 800190e:	6003      	str	r3, [r0, #0]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	bd70      	pop	{r4, r5, r6, pc}
 8001916:	462a      	mov	r2, r5
 8001918:	4631      	mov	r1, r6
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f7ff ffdd 	bl	80018da <_swiwrite>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	dbf5      	blt.n	8001910 <_write+0x16>
 8001924:	6862      	ldr	r2, [r4, #4]
 8001926:	1ae8      	subs	r0, r5, r3
 8001928:	4402      	add	r2, r0
 800192a:	42ab      	cmp	r3, r5
 800192c:	6062      	str	r2, [r4, #4]
 800192e:	d1f1      	bne.n	8001914 <_write+0x1a>
 8001930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff bf55 	b.w	80017e4 <error>

0800193a <_swiclose>:
 800193a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800193c:	2402      	movs	r4, #2
 800193e:	9001      	str	r0, [sp, #4]
 8001940:	ad01      	add	r5, sp, #4
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	beab      	bkpt	0x00ab
 8001948:	4604      	mov	r4, r0
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff ff58 	bl	8001800 <checkerror>
 8001950:	b003      	add	sp, #12
 8001952:	bd30      	pop	{r4, r5, pc}

08001954 <_close>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4605      	mov	r5, r0
 8001958:	f7ff ff2a 	bl	80017b0 <findslot>
 800195c:	4604      	mov	r4, r0
 800195e:	b930      	cbnz	r0, 800196e <_close+0x1a>
 8001960:	f000 f9e6 	bl	8001d30 <__errno>
 8001964:	2309      	movs	r3, #9
 8001966:	6003      	str	r3, [r0, #0]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	bd38      	pop	{r3, r4, r5, pc}
 800196e:	3d01      	subs	r5, #1
 8001970:	2d01      	cmp	r5, #1
 8001972:	d809      	bhi.n	8001988 <_close+0x34>
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <_close+0x48>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	429a      	cmp	r2, r3
 800197c:	d104      	bne.n	8001988 <_close+0x34>
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	6003      	str	r3, [r0, #0]
 8001984:	2000      	movs	r0, #0
 8001986:	e7f1      	b.n	800196c <_close+0x18>
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	f7ff ffd6 	bl	800193a <_swiclose>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1ec      	bne.n	800196c <_close+0x18>
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	e7e8      	b.n	800196c <_close+0x18>
 800199a:	bf00      	nop
 800199c:	200000ec 	.word	0x200000ec

080019a0 <_sbrk>:
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <_sbrk+0x38>)
 80019a2:	4603      	mov	r3, r0
 80019a4:	6811      	ldr	r1, [r2, #0]
 80019a6:	b510      	push	{r4, lr}
 80019a8:	b909      	cbnz	r1, 80019ae <_sbrk+0xe>
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <_sbrk+0x3c>)
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	4669      	mov	r1, sp
 80019b0:	6810      	ldr	r0, [r2, #0]
 80019b2:	4403      	add	r3, r0
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d806      	bhi.n	80019c6 <_sbrk+0x26>
 80019b8:	4909      	ldr	r1, [pc, #36]	; (80019e0 <_sbrk+0x40>)
 80019ba:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <_sbrk+0x44>)
 80019bc:	6809      	ldr	r1, [r1, #0]
 80019be:	42a1      	cmp	r1, r4
 80019c0:	d008      	beq.n	80019d4 <_sbrk+0x34>
 80019c2:	428b      	cmp	r3, r1
 80019c4:	d906      	bls.n	80019d4 <_sbrk+0x34>
 80019c6:	f000 f9b3 	bl	8001d30 <__errno>
 80019ca:	230c      	movs	r3, #12
 80019cc:	6003      	str	r3, [r0, #0]
 80019ce:	f04f 30ff 	mov.w	r0, #4294967295
 80019d2:	bd10      	pop	{r4, pc}
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e7fc      	b.n	80019d2 <_sbrk+0x32>
 80019d8:	200000dc 	.word	0x200000dc
 80019dc:	20000190 	.word	0x20000190
 80019e0:	20000098 	.word	0x20000098
 80019e4:	cafedead 	.word	0xcafedead

080019e8 <_swistat>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	460c      	mov	r4, r1
 80019ec:	f7ff fee0 	bl	80017b0 <findslot>
 80019f0:	4605      	mov	r5, r0
 80019f2:	b930      	cbnz	r0, 8001a02 <_swistat+0x1a>
 80019f4:	f000 f99c 	bl	8001d30 <__errno>
 80019f8:	2309      	movs	r3, #9
 80019fa:	6003      	str	r3, [r0, #0]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	260c      	movs	r6, #12
 8001a06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a0a:	6063      	str	r3, [r4, #4]
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	64a3      	str	r3, [r4, #72]	; 0x48
 8001a12:	4630      	mov	r0, r6
 8001a14:	4629      	mov	r1, r5
 8001a16:	beab      	bkpt	0x00ab
 8001a18:	4605      	mov	r5, r0
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff fef0 	bl	8001800 <checkerror>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	bf1c      	itt	ne
 8001a24:	6120      	strne	r0, [r4, #16]
 8001a26:	2000      	movne	r0, #0
 8001a28:	e7ea      	b.n	8001a00 <_swistat+0x18>

08001a2a <_fstat>:
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4604      	mov	r4, r0
 8001a32:	2258      	movs	r2, #88	; 0x58
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9bd 	bl	8000db4 <memset>
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a42:	f7ff bfd1 	b.w	80019e8 <_swistat>

08001a46 <_stat>:
 8001a46:	b538      	push	{r3, r4, r5, lr}
 8001a48:	460d      	mov	r5, r1
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	2258      	movs	r2, #88	; 0x58
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff f9af 	bl	8000db4 <memset>
 8001a56:	4620      	mov	r0, r4
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f000 f811 	bl	8001a80 <_swiopen>
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	4604      	mov	r4, r0
 8001a62:	d00b      	beq.n	8001a7c <_stat+0x36>
 8001a64:	686b      	ldr	r3, [r5, #4]
 8001a66:	4629      	mov	r1, r5
 8001a68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001a6c:	606b      	str	r3, [r5, #4]
 8001a6e:	f7ff ffbb 	bl	80019e8 <_swistat>
 8001a72:	4605      	mov	r5, r0
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff ff6d 	bl	8001954 <_close>
 8001a7a:	462c      	mov	r4, r5
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}

08001a80 <_swiopen>:
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a84:	4607      	mov	r7, r0
 8001a86:	460e      	mov	r6, r1
 8001a88:	2500      	movs	r5, #0
 8001a8a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001b30 <_swiopen+0xb0>
 8001a8e:	b097      	sub	sp, #92	; 0x5c
 8001a90:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001a94:	1c61      	adds	r1, r4, #1
 8001a96:	d037      	beq.n	8001b08 <_swiopen+0x88>
 8001a98:	3501      	adds	r5, #1
 8001a9a:	2d14      	cmp	r5, #20
 8001a9c:	d1f8      	bne.n	8001a90 <_swiopen+0x10>
 8001a9e:	f000 f947 	bl	8001d30 <__errno>
 8001aa2:	2318      	movs	r3, #24
 8001aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8001aa8:	6003      	str	r3, [r0, #0]
 8001aaa:	e03d      	b.n	8001b28 <_swiopen+0xa8>
 8001aac:	f240 6301 	movw	r3, #1537	; 0x601
 8001ab0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001ab4:	07b2      	lsls	r2, r6, #30
 8001ab6:	bf48      	it	mi
 8001ab8:	f044 0402 	orrmi.w	r4, r4, #2
 8001abc:	421e      	tst	r6, r3
 8001abe:	bf18      	it	ne
 8001ac0:	f044 0404 	orrne.w	r4, r4, #4
 8001ac4:	0733      	lsls	r3, r6, #28
 8001ac6:	bf48      	it	mi
 8001ac8:	f024 0404 	bicmi.w	r4, r4, #4
 8001acc:	4638      	mov	r0, r7
 8001ace:	bf48      	it	mi
 8001ad0:	f044 0408 	orrmi.w	r4, r4, #8
 8001ad4:	9700      	str	r7, [sp, #0]
 8001ad6:	f7fe fb4b 	bl	8000170 <strlen>
 8001ada:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001ade:	2401      	movs	r4, #1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	beab      	bkpt	0x00ab
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	db08      	blt.n	8001afe <_swiopen+0x7e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001af2:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001af6:	462c      	mov	r4, r5
 8001af8:	f8c8 3004 	str.w	r3, [r8, #4]
 8001afc:	e014      	b.n	8001b28 <_swiopen+0xa8>
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fe70 	bl	80017e4 <error>
 8001b04:	4604      	mov	r4, r0
 8001b06:	e00f      	b.n	8001b28 <_swiopen+0xa8>
 8001b08:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001b0c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001b10:	46e9      	mov	r9, sp
 8001b12:	d1cb      	bne.n	8001aac <_swiopen+0x2c>
 8001b14:	4649      	mov	r1, r9
 8001b16:	4638      	mov	r0, r7
 8001b18:	f7ff ff95 	bl	8001a46 <_stat>
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d0c5      	beq.n	8001aac <_swiopen+0x2c>
 8001b20:	f000 f906 	bl	8001d30 <__errno>
 8001b24:	2311      	movs	r3, #17
 8001b26:	6003      	str	r3, [r0, #0]
 8001b28:	4620      	mov	r0, r4
 8001b2a:	b017      	add	sp, #92	; 0x5c
 8001b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b30:	200000ec 	.word	0x200000ec

08001b34 <_get_semihosting_exts>:
 8001b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001b38:	4606      	mov	r6, r0
 8001b3a:	460f      	mov	r7, r1
 8001b3c:	482a      	ldr	r0, [pc, #168]	; (8001be8 <_get_semihosting_exts+0xb4>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4615      	mov	r5, r2
 8001b42:	f7ff ff9d 	bl	8001a80 <_swiopen>
 8001b46:	4604      	mov	r4, r0
 8001b48:	462a      	mov	r2, r5
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff f931 	bl	8000db4 <memset>
 8001b52:	1c63      	adds	r3, r4, #1
 8001b54:	d016      	beq.n	8001b84 <_get_semihosting_exts+0x50>
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff fe2a 	bl	80017b0 <findslot>
 8001b5c:	f04f 080c 	mov.w	r8, #12
 8001b60:	4681      	mov	r9, r0
 8001b62:	4640      	mov	r0, r8
 8001b64:	4649      	mov	r1, r9
 8001b66:	beab      	bkpt	0x00ab
 8001b68:	4680      	mov	r8, r0
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	f7ff fe48 	bl	8001800 <checkerror>
 8001b70:	2803      	cmp	r0, #3
 8001b72:	dd02      	ble.n	8001b7a <_get_semihosting_exts+0x46>
 8001b74:	1ec3      	subs	r3, r0, #3
 8001b76:	42ab      	cmp	r3, r5
 8001b78:	dc08      	bgt.n	8001b8c <_get_semihosting_exts+0x58>
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff feea 	bl	8001954 <_close>
 8001b80:	f04f 34ff 	mov.w	r4, #4294967295
 8001b84:	4620      	mov	r0, r4
 8001b86:	b003      	add	sp, #12
 8001b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	4620      	mov	r0, r4
 8001b90:	eb0d 0102 	add.w	r1, sp, r2
 8001b94:	f7ff fe49 	bl	800182a <_read>
 8001b98:	2803      	cmp	r0, #3
 8001b9a:	ddee      	ble.n	8001b7a <_get_semihosting_exts+0x46>
 8001b9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ba0:	2b53      	cmp	r3, #83	; 0x53
 8001ba2:	d1ea      	bne.n	8001b7a <_get_semihosting_exts+0x46>
 8001ba4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001ba8:	2b48      	cmp	r3, #72	; 0x48
 8001baa:	d1e6      	bne.n	8001b7a <_get_semihosting_exts+0x46>
 8001bac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001bb0:	2b46      	cmp	r3, #70	; 0x46
 8001bb2:	d1e2      	bne.n	8001b7a <_get_semihosting_exts+0x46>
 8001bb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bb8:	2b42      	cmp	r3, #66	; 0x42
 8001bba:	d1de      	bne.n	8001b7a <_get_semihosting_exts+0x46>
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4639      	mov	r1, r7
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff fe4c 	bl	800185e <_swilseek>
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	dbd7      	blt.n	8001b7a <_get_semihosting_exts+0x46>
 8001bca:	462a      	mov	r2, r5
 8001bcc:	4631      	mov	r1, r6
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fe2b 	bl	800182a <_read>
 8001bd4:	4605      	mov	r5, r0
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff febc 	bl	8001954 <_close>
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff fe0f 	bl	8001800 <checkerror>
 8001be2:	4604      	mov	r4, r0
 8001be4:	e7ce      	b.n	8001b84 <_get_semihosting_exts+0x50>
 8001be6:	bf00      	nop
 8001be8:	08001dc4 	.word	0x08001dc4

08001bec <initialise_semihosting_exts>:
 8001bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4d09      	ldr	r5, [pc, #36]	; (8001c18 <initialise_semihosting_exts+0x2c>)
 8001bf4:	4c09      	ldr	r4, [pc, #36]	; (8001c1c <initialise_semihosting_exts+0x30>)
 8001bf6:	a801      	add	r0, sp, #4
 8001bf8:	6029      	str	r1, [r5, #0]
 8001bfa:	6022      	str	r2, [r4, #0]
 8001bfc:	f7ff ff9a 	bl	8001b34 <_get_semihosting_exts>
 8001c00:	2800      	cmp	r0, #0
 8001c02:	dd07      	ble.n	8001c14 <initialise_semihosting_exts+0x28>
 8001c04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001c08:	f003 0201 	and.w	r2, r3, #1
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	602a      	str	r2, [r5, #0]
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	b003      	add	sp, #12
 8001c16:	bd30      	pop	{r4, r5, pc}
 8001c18:	2000009c 	.word	0x2000009c
 8001c1c:	200000a0 	.word	0x200000a0

08001c20 <_has_ext_stdout_stderr>:
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4c04      	ldr	r4, [pc, #16]	; (8001c34 <_has_ext_stdout_stderr+0x14>)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da01      	bge.n	8001c2e <_has_ext_stdout_stderr+0xe>
 8001c2a:	f7ff ffdf 	bl	8001bec <initialise_semihosting_exts>
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	bf00      	nop
 8001c34:	200000a0 	.word	0x200000a0

08001c38 <initialise_monitor_handles>:
 8001c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	2400      	movs	r4, #0
 8001c40:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001ce4 <initialise_monitor_handles+0xac>
 8001c44:	b085      	sub	sp, #20
 8001c46:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c4a:	af01      	add	r7, sp, #4
 8001c4c:	9303      	str	r3, [sp, #12]
 8001c4e:	2501      	movs	r5, #1
 8001c50:	9402      	str	r4, [sp, #8]
 8001c52:	4628      	mov	r0, r5
 8001c54:	4639      	mov	r1, r7
 8001c56:	beab      	bkpt	0x00ab
 8001c58:	4605      	mov	r5, r0
 8001c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8001ce8 <initialise_monitor_handles+0xb0>
 8001c62:	4623      	mov	r3, r4
 8001c64:	4c21      	ldr	r4, [pc, #132]	; (8001cec <initialise_monitor_handles+0xb4>)
 8001c66:	f8c8 5000 	str.w	r5, [r8]
 8001c6a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	2b14      	cmp	r3, #20
 8001c72:	d1fa      	bne.n	8001c6a <initialise_monitor_handles+0x32>
 8001c74:	f7ff ffd4 	bl	8001c20 <_has_ext_stdout_stderr>
 8001c78:	4d1d      	ldr	r5, [pc, #116]	; (8001cf0 <initialise_monitor_handles+0xb8>)
 8001c7a:	b1d0      	cbz	r0, 8001cb2 <initialise_monitor_handles+0x7a>
 8001c7c:	f04f 0a03 	mov.w	sl, #3
 8001c80:	2304      	movs	r3, #4
 8001c82:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c86:	2601      	movs	r6, #1
 8001c88:	f8cd a00c 	str.w	sl, [sp, #12]
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	4630      	mov	r0, r6
 8001c90:	4639      	mov	r1, r7
 8001c92:	beab      	bkpt	0x00ab
 8001c94:	4683      	mov	fp, r0
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <initialise_monitor_handles+0xbc>)
 8001c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c9c:	f8c3 b000 	str.w	fp, [r3]
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	f8cd a00c 	str.w	sl, [sp, #12]
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	4630      	mov	r0, r6
 8001caa:	4639      	mov	r1, r7
 8001cac:	beab      	bkpt	0x00ab
 8001cae:	4606      	mov	r6, r0
 8001cb0:	602e      	str	r6, [r5, #0]
 8001cb2:	2600      	movs	r6, #0
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	6066      	str	r6, [r4, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	bf02      	ittt	eq
 8001cbc:	4b0d      	ldreq	r3, [pc, #52]	; (8001cf4 <initialise_monitor_handles+0xbc>)
 8001cbe:	681b      	ldreq	r3, [r3, #0]
 8001cc0:	602b      	streq	r3, [r5, #0]
 8001cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8001cc6:	6023      	str	r3, [r4, #0]
 8001cc8:	f7ff ffaa 	bl	8001c20 <_has_ext_stdout_stderr>
 8001ccc:	b130      	cbz	r0, 8001cdc <initialise_monitor_handles+0xa4>
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <initialise_monitor_handles+0xbc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001cd6:	682b      	ldr	r3, [r5, #0]
 8001cd8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001cdc:	b005      	add	sp, #20
 8001cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08001dda 	.word	0x08001dda
 8001ce8:	200000e4 	.word	0x200000e4
 8001cec:	200000ec 	.word	0x200000ec
 8001cf0:	200000e0 	.word	0x200000e0
 8001cf4:	200000e8 	.word	0x200000e8

08001cf8 <_isatty>:
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	f7ff fd59 	bl	80017b0 <findslot>
 8001cfe:	2509      	movs	r5, #9
 8001d00:	4604      	mov	r4, r0
 8001d02:	b920      	cbnz	r0, 8001d0e <_isatty+0x16>
 8001d04:	f000 f814 	bl	8001d30 <__errno>
 8001d08:	6005      	str	r5, [r0, #0]
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	4628      	mov	r0, r5
 8001d10:	4621      	mov	r1, r4
 8001d12:	beab      	bkpt	0x00ab
 8001d14:	4604      	mov	r4, r0
 8001d16:	2c01      	cmp	r4, #1
 8001d18:	d0f7      	beq.n	8001d0a <_isatty+0x12>
 8001d1a:	f000 f809 	bl	8001d30 <__errno>
 8001d1e:	2400      	movs	r4, #0
 8001d20:	4605      	mov	r5, r0
 8001d22:	2613      	movs	r6, #19
 8001d24:	4630      	mov	r0, r6
 8001d26:	4621      	mov	r1, r4
 8001d28:	beab      	bkpt	0x00ab
 8001d2a:	4606      	mov	r6, r0
 8001d2c:	602e      	str	r6, [r5, #0]
 8001d2e:	e7ec      	b.n	8001d0a <_isatty+0x12>

08001d30 <__errno>:
 8001d30:	4b01      	ldr	r3, [pc, #4]	; (8001d38 <__errno+0x8>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000034 	.word	0x20000034

08001d3c <_init>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

08001d48 <_fini>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr
