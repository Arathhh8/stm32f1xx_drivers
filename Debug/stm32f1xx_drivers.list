
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ee4  08000ee4  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ee4  08000ee4  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee4  08000ee4  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee4  08000ee4  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ee8  08000ee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000414  08001300  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08001300  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000134d  00000000  00000000  0002043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065a  00000000  00000000  0002178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00021de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000128  00000000  00000000  00021f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a1f  00000000  00000000  00022080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002091  00000000  00000000  00024a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a638  00000000  00000000  00026b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00031168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004b8  00000000  00000000  000311b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000414 	.word	0x20000414
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ecc 	.word	0x08000ecc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000418 	.word	0x20000418
 800016c:	08000ecc 	.word	0x08000ecc

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart3_handle;


void delay(void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <delay+0x28>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	0003d08f 	.word	0x0003d08f

080001ac <USART3_Init>:


void USART3_Init(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0

	usart3_handle.pUSARTx = USART3;
 80001b0:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <USART3_Init+0x3c>)
 80001b2:	4a0e      	ldr	r2, [pc, #56]	; (80001ec <USART3_Init+0x40>)
 80001b4:	601a      	str	r2, [r3, #0]
	usart3_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80001b6:	4b0c      	ldr	r3, [pc, #48]	; (80001e8 <USART3_Init+0x3c>)
 80001b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80001bc:	609a      	str	r2, [r3, #8]
	usart3_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001be:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <USART3_Init+0x3c>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	73da      	strb	r2, [r3, #15]
	usart3_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <USART3_Init+0x3c>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	711a      	strb	r2, [r3, #4]
	usart3_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <USART3_Init+0x3c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	731a      	strb	r2, [r3, #12]
	usart3_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <USART3_Init+0x3c>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	735a      	strb	r2, [r3, #13]
	usart3_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <USART3_Init+0x3c>)
 80001d8:	2200      	movs	r2, #0
 80001da:	739a      	strb	r2, [r3, #14]

	USART_Init(&usart3_handle);
 80001dc:	4802      	ldr	r0, [pc, #8]	; (80001e8 <USART3_Init+0x3c>)
 80001de:	f000 fcd7 	bl	8000b90 <USART_Init>

}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000430 	.word	0x20000430
 80001ec:	40004800 	.word	0x40004800

080001f0 <USART2_GPIOInit>:


void USART2_GPIOInit(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOB;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <USART2_GPIOInit+0x40>)
 80001f8:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 80001fa:	2302      	movs	r3, #2
 80001fc:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 80001fe:	2300      	movs	r3, #0
 8000200:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 8000202:	2301      	movs	r3, #1
 8000204:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 8000206:	2303      	movs	r3, #3
 8000208:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF_PP;
 800020a:	2302      	movs	r3, #2
 800020c:	737b      	strb	r3, [r7, #13]

	// USAT2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800020e:	230a      	movs	r3, #10
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f92f 	bl	8000478 <GPIO_Init>

	// USAT2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 800021a:	230b      	movs	r3, #11
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f929 	bl	8000478 <GPIO_Init>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010c00 	.word	0x40010c00

08000234 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;
	// This is Btn gpio configuration
	GpioBtn.pGPIOx = GPIOA;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <GPIO_ButtonInit+0x2c>)
 800023c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800023e:	2300      	movs	r3, #0
 8000240:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN_PUPD;
 8000242:	2302      	movs	r3, #2
 8000244:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 800024a:	2301      	movs	r3, #1
 800024c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f911 	bl	8000478 <GPIO_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40010800 	.word	0x40010800

08000264 <main>:

int main(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000268:	f7ff ffe4 	bl	8000234 <GPIO_ButtonInit>

	USART2_GPIOInit();
 800026c:	f7ff ffc0 	bl	80001f0 <USART2_GPIOInit>

	USART3_Init();
 8000270:	f7ff ff9c 	bl	80001ac <USART3_Init>

	USART_PeripheralControl(USART3, ENABLE);
 8000274:	2101      	movs	r1, #1
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0x40>)
 8000278:	f000 fde8 	bl	8000e4c <USART_PeripheralControl>

	while(1){

		// wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800027c:	bf00      	nop
 800027e:	2100      	movs	r1, #0
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <main+0x44>)
 8000282:	f000 fb3b 	bl	80008fc <GPIO_ReadFromInputPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1f8      	bne.n	800027e <main+0x1a>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 800028c:	f7ff ff78 	bl	8000180 <delay>

		USART_SendData(&usart3_handle, (uint8_t*)msg, strlen(msg));
 8000290:	4806      	ldr	r0, [pc, #24]	; (80002ac <main+0x48>)
 8000292:	f7ff ff6d 	bl	8000170 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	461a      	mov	r2, r3
 800029a:	4904      	ldr	r1, [pc, #16]	; (80002ac <main+0x48>)
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <main+0x4c>)
 800029e:	f000 fd02 	bl	8000ca6 <USART_SendData>
		while(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002a2:	e7eb      	b.n	800027c <main+0x18>
 80002a4:	40004800 	.word	0x40004800
 80002a8:	40010800 	.word	0x40010800
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000430 	.word	0x20000430

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002be:	490d      	ldr	r1, [pc, #52]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c4:	e002      	b.n	80002cc <LoopCopyDataInit>

080002c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ca:	3304      	adds	r3, #4

080002cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d0:	d3f9      	bcc.n	80002c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d2:	4a0a      	ldr	r2, [pc, #40]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d8:	e001      	b.n	80002de <LoopFillZerobss>

080002da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002dc:	3204      	adds	r2, #4

080002de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e0:	d3fb      	bcc.n	80002da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 fdcf 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffbd 	bl	8000264 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 80002f8:	08000eec 	.word	0x08000eec
  ldr r2, =_sbss
 80002fc:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000300:	20000454 	.word	0x20000454

08000304 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	2b01      	cmp	r3, #1
 8000318:	f040 8099 	bne.w	800044e <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a4e      	ldr	r2, [pc, #312]	; (8000458 <GPIO_PeriClockControl+0x150>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 8000324:	4b4d      	ldr	r3, [pc, #308]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a4c      	ldr	r2, [pc, #304]	; (800045c <GPIO_PeriClockControl+0x154>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 8000330:	e08d      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a4a      	ldr	r2, [pc, #296]	; (8000460 <GPIO_PeriClockControl+0x158>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 800033a:	4b48      	ldr	r3, [pc, #288]	; (800045c <GPIO_PeriClockControl+0x154>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a47      	ldr	r2, [pc, #284]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	6193      	str	r3, [r2, #24]
}
 8000346:	e082      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a46      	ldr	r2, [pc, #280]	; (8000464 <GPIO_PeriClockControl+0x15c>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a41      	ldr	r2, [pc, #260]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
}
 800035c:	e077      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a41      	ldr	r2, [pc, #260]	; (8000468 <GPIO_PeriClockControl+0x160>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 8000366:	4b3d      	ldr	r3, [pc, #244]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a3c      	ldr	r2, [pc, #240]	; (800045c <GPIO_PeriClockControl+0x154>)
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	6193      	str	r3, [r2, #24]
}
 8000372:	e06c      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a3d      	ldr	r2, [pc, #244]	; (800046c <GPIO_PeriClockControl+0x164>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 800037c:	4b37      	ldr	r3, [pc, #220]	; (800045c <GPIO_PeriClockControl+0x154>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a36      	ldr	r2, [pc, #216]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000386:	6193      	str	r3, [r2, #24]
}
 8000388:	e061      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a38      	ldr	r2, [pc, #224]	; (8000470 <GPIO_PeriClockControl+0x168>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 8000392:	4b32      	ldr	r3, [pc, #200]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a31      	ldr	r2, [pc, #196]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6193      	str	r3, [r2, #24]
}
 800039e:	e056      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a34      	ldr	r2, [pc, #208]	; (8000474 <GPIO_PeriClockControl+0x16c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a2b      	ldr	r2, [pc, #172]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b2:	6193      	str	r3, [r2, #24]
}
 80003b4:	e04b      	b.n	800044e <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a27      	ldr	r2, [pc, #156]	; (8000458 <GPIO_PeriClockControl+0x150>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 80003be:	4b27      	ldr	r3, [pc, #156]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003c4:	f023 0304 	bic.w	r3, r3, #4
 80003c8:	6193      	str	r3, [r2, #24]
}
 80003ca:	e040      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a24      	ldr	r2, [pc, #144]	; (8000460 <GPIO_PeriClockControl+0x158>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a20      	ldr	r2, [pc, #128]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003da:	f023 0308 	bic.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
}
 80003e0:	e035      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <GPIO_PeriClockControl+0x15c>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a1b      	ldr	r2, [pc, #108]	; (800045c <GPIO_PeriClockControl+0x154>)
 80003f0:	f023 0310 	bic.w	r3, r3, #16
 80003f4:	6193      	str	r3, [r2, #24]
}
 80003f6:	e02a      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <GPIO_PeriClockControl+0x160>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000406:	f023 0320 	bic.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
}
 800040c:	e01f      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a16      	ldr	r2, [pc, #88]	; (800046c <GPIO_PeriClockControl+0x164>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <GPIO_PeriClockControl+0x154>)
 800041c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000420:	6193      	str	r3, [r2, #24]
}
 8000422:	e014      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a12      	ldr	r2, [pc, #72]	; (8000470 <GPIO_PeriClockControl+0x168>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <GPIO_PeriClockControl+0x154>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000436:	6193      	str	r3, [r2, #24]
}
 8000438:	e009      	b.n	800044e <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <GPIO_PeriClockControl+0x16c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d105      	bne.n	800044e <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <GPIO_PeriClockControl+0x154>)
 8000448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800044c:	6193      	str	r3, [r2, #24]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40010800 	.word	0x40010800
 800045c:	40021000 	.word	0x40021000
 8000460:	40010c00 	.word	0x40010c00
 8000464:	40011000 	.word	0x40011000
 8000468:	40011400 	.word	0x40011400
 800046c:	40011800 	.word	0x40011800
 8000470:	40011c00 	.word	0x40011c00
 8000474:	40012000 	.word	0x40012000

08000478 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2101      	movs	r1, #1
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff3c 	bl	8000308 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	2b07      	cmp	r3, #7
 8000496:	d820      	bhi.n	80004da <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	799b      	ldrb	r3, [r3, #6]
 800049c:	461a      	mov	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	400a      	ands	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	e020      	b.n	800051c <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	799b      	ldrb	r3, [r3, #6]
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	3b08      	subs	r3, #8
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6859      	ldr	r1, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	430a      	orrs	r2, r1
 800051a:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d84b      	bhi.n	80005c0 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	2b07      	cmp	r3, #7
 800052e:	d822      	bhi.n	8000576 <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	3302      	adds	r3, #2
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	3302      	adds	r3, #2
 8000552:	2103      	movs	r1, #3
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	43db      	mvns	r3, r3
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	400a      	ands	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	6819      	ldr	r1, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	430a      	orrs	r2, r1
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	e114      	b.n	80007a0 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	3b08      	subs	r3, #8
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	3302      	adds	r3, #2
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	3b08      	subs	r3, #8
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	3302      	adds	r3, #2
 800059c:	2103      	movs	r1, #3
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	400a      	ands	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6859      	ldr	r1, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	430a      	orrs	r2, r1
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	e0ef      	b.n	80007a0 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d85e      	bhi.n	8000686 <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	2b07      	cmp	r3, #7
 80005ce:	d820      	bhi.n	8000612 <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	3302      	adds	r3, #2
 80005d8:	2202      	movs	r2, #2
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	3302      	adds	r3, #2
 80005ee:	2103      	movs	r1, #3
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	400a      	ands	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	430a      	orrs	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e021      	b.n	8000656 <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	3b08      	subs	r3, #8
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	3302      	adds	r3, #2
 800061c:	2202      	movs	r2, #2
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	3b08      	subs	r3, #8
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	3302      	adds	r3, #2
 8000634:	2103      	movs	r1, #3
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	400a      	ands	r2, r1
 8000644:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6859      	ldr	r1, [r3, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	430a      	orrs	r2, r1
 8000654:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b8b      	ldr	r3, [pc, #556]	; (8000884 <GPIO_Init+0x40c>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a87      	ldr	r2, [pc, #540]	; (8000884 <GPIO_Init+0x40c>)
 8000668:	430b      	orrs	r3, r1
 800066a:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	4b85      	ldr	r3, [pc, #532]	; (8000884 <GPIO_Init+0x40c>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a81      	ldr	r2, [pc, #516]	; (8000884 <GPIO_Init+0x40c>)
 8000680:	400b      	ands	r3, r1
 8000682:	6093      	str	r3, [r2, #8]
 8000684:	e035      	b.n	80006f2 <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d817      	bhi.n	80006be <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	4b7d      	ldr	r3, [pc, #500]	; (8000884 <GPIO_Init+0x40c>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a79      	ldr	r2, [pc, #484]	; (8000884 <GPIO_Init+0x40c>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a4:	4b77      	ldr	r3, [pc, #476]	; (8000884 <GPIO_Init+0x40c>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a73      	ldr	r2, [pc, #460]	; (8000884 <GPIO_Init+0x40c>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	60d3      	str	r3, [r2, #12]
 80006bc:	e019      	b.n	80006f2 <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d815      	bhi.n	80006f2 <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c6:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <GPIO_Init+0x40c>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a6b      	ldr	r2, [pc, #428]	; (8000884 <GPIO_Init+0x40c>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006dc:	4b69      	ldr	r3, [pc, #420]	; (8000884 <GPIO_Init+0x40c>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a65      	ldr	r2, [pc, #404]	; (8000884 <GPIO_Init+0x40c>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	089b      	lsrs	r3, r3, #2
 80006f8:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	f003 0303 	and.w	r3, r3, #3
 8000702:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a5f      	ldr	r2, [pc, #380]	; (8000888 <GPIO_Init+0x410>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d02b      	beq.n	8000766 <GPIO_Init+0x2ee>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a5e      	ldr	r2, [pc, #376]	; (800088c <GPIO_Init+0x414>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d024      	beq.n	8000762 <GPIO_Init+0x2ea>
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a5c      	ldr	r2, [pc, #368]	; (8000890 <GPIO_Init+0x418>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d01d      	beq.n	800075e <GPIO_Init+0x2e6>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a5b      	ldr	r2, [pc, #364]	; (8000894 <GPIO_Init+0x41c>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d016      	beq.n	800075a <GPIO_Init+0x2e2>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a59      	ldr	r2, [pc, #356]	; (8000898 <GPIO_Init+0x420>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d00f      	beq.n	8000756 <GPIO_Init+0x2de>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a58      	ldr	r2, [pc, #352]	; (800089c <GPIO_Init+0x424>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d008      	beq.n	8000752 <GPIO_Init+0x2da>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a56      	ldr	r2, [pc, #344]	; (80008a0 <GPIO_Init+0x428>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <GPIO_Init+0x2d6>
 800074a:	2306      	movs	r3, #6
 800074c:	e00c      	b.n	8000768 <GPIO_Init+0x2f0>
 800074e:	2300      	movs	r3, #0
 8000750:	e00a      	b.n	8000768 <GPIO_Init+0x2f0>
 8000752:	2305      	movs	r3, #5
 8000754:	e008      	b.n	8000768 <GPIO_Init+0x2f0>
 8000756:	2304      	movs	r3, #4
 8000758:	e006      	b.n	8000768 <GPIO_Init+0x2f0>
 800075a:	2303      	movs	r3, #3
 800075c:	e004      	b.n	8000768 <GPIO_Init+0x2f0>
 800075e:	2302      	movs	r3, #2
 8000760:	e002      	b.n	8000768 <GPIO_Init+0x2f0>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <GPIO_Init+0x2f0>
 8000766:	2300      	movs	r3, #0
 8000768:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <GPIO_Init+0x42c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <GPIO_Init+0x42c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 8000776:	7a7a      	ldrb	r2, [r7, #9]
 8000778:	7abb      	ldrb	r3, [r7, #10]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa02 f103 	lsl.w	r1, r2, r3
 8000780:	4a49      	ldr	r2, [pc, #292]	; (80008a8 <GPIO_Init+0x430>)
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	3302      	adds	r3, #2
 8000786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <GPIO_Init+0x40c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	4611      	mov	r1, r2
 8000794:	2201      	movs	r2, #1
 8000796:	408a      	lsls	r2, r1
 8000798:	4611      	mov	r1, r2
 800079a:	4a3a      	ldr	r2, [pc, #232]	; (8000884 <GPIO_Init+0x40c>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	79db      	ldrb	r3, [r3, #7]
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68da      	ldr	r2, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	4619      	mov	r1, r3
 80007c0:	2301      	movs	r3, #1
 80007c2:	408b      	lsls	r3, r1
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	400a      	ands	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68d9      	ldr	r1, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	430a      	orrs	r2, r1
 80007de:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7a1b      	ldrb	r3, [r3, #8]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d11d      	bne.n	8000828 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a1b      	ldrb	r3, [r3, #8]
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	2301      	movs	r3, #1
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68d9      	ldr	r1, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	430a      	orrs	r2, r1
 8000826:	60da      	str	r2, [r3, #12]
	}

//	// 5. Configure the alt functionality
	temp = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode == GPIO_MODE_AF_OD )){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7a5b      	ldrb	r3, [r3, #9]
 8000830:	2b03      	cmp	r3, #3
 8000832:	d15f      	bne.n	80008f4 <GPIO_Init+0x47c>
		// configure the alternate function registers
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	791b      	ldrb	r3, [r3, #4]
 8000838:	2b07      	cmp	r3, #7
 800083a:	d837      	bhi.n	80008ac <GPIO_Init+0x434>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a5b      	ldrb	r3, [r3, #9]
 8000840:	461a      	mov	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	3302      	adds	r3, #2
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	3302      	adds	r3, #2
 800085e:	2103      	movs	r1, #3
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	400a      	ands	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
			pGPIOHandle->pGPIOx->CRH |= temp;
		}
	}
}
 8000880:	e038      	b.n	80008f4 <GPIO_Init+0x47c>
 8000882:	bf00      	nop
 8000884:	40010400 	.word	0x40010400
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00
 8000890:	40011000 	.word	0x40011000
 8000894:	40011400 	.word	0x40011400
 8000898:	40011800 	.word	0x40011800
 800089c:	40011c00 	.word	0x40011c00
 80008a0:	40012000 	.word	0x40012000
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010000 	.word	0x40010000
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7a5b      	ldrb	r3, [r3, #9]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	3b08      	subs	r3, #8
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	3302      	adds	r3, #2
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	3b08      	subs	r3, #8
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	2103      	movs	r1, #3
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	400a      	ands	r2, r1
 80008e2:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6859      	ldr	r1, [r3, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	605a      	str	r2, [r3, #4]
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <GPIO_ReadFromInputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	fa22 f303 	lsr.w	r3, r2, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
	return value;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
	...

08000928 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};


uint32_t RCC_GetPCLK1Value(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = (RCC->CFGR >> 2) & 0x3;
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <RCC_GetPCLK1Value+0x9c>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	089b      	lsrs	r3, r3, #2
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 800093c:	7a7b      	ldrb	r3, [r7, #9]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <RCC_GetPCLK1Value+0x20>
		SystemClk = 8000000;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <RCC_GetPCLK1Value+0xa0>)
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e00b      	b.n	8000960 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 8000948:	7a7b      	ldrb	r3, [r7, #9]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d102      	bne.n	8000954 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <RCC_GetPCLK1Value+0xa0>)
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e005      	b.n	8000960 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 8000954:	7a7b      	ldrb	r3, [r7, #9]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d102      	bne.n	8000960 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 800095a:	f000 f889 	bl	8000a70 <RCC_GetPLLOutputClock>
 800095e:	60f8      	str	r0, [r7, #12]
	}

	//ahbp
	temp = (RCC->CFGR >> 4) & 0xF;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <RCC_GetPCLK1Value+0x9c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	091b      	lsrs	r3, r3, #4
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 800096e:	7a3b      	ldrb	r3, [r7, #8]
 8000970:	2b07      	cmp	r3, #7
 8000972:	d802      	bhi.n	800097a <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	72fb      	strb	r3, [r7, #11]
 8000978:	e005      	b.n	8000986 <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_PreScaler[temp - 8];
 800097a:	7a3b      	ldrb	r3, [r7, #8]
 800097c:	3b08      	subs	r3, #8
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <RCC_GetPCLK1Value+0xa4>)
 8000980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000984:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = (RCC->CFGR >> 8) & 0x7;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <RCC_GetPCLK1Value+0x9c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 8000994:	7a3b      	ldrb	r3, [r7, #8]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d802      	bhi.n	80009a0 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	72bb      	strb	r3, [r7, #10]
 800099e:	e004      	b.n	80009aa <RCC_GetPCLK1Value+0x82>
	}else{
		ahbp = APB1_PreScaler[temp - 4];
 80009a0:	7a3b      	ldrb	r3, [r7, #8]
 80009a2:	3b04      	subs	r3, #4
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <RCC_GetPCLK1Value+0xa8>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	72fb      	strb	r3, [r7, #11]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80009b2:	7abb      	ldrb	r3, [r7, #10]
 80009b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009ba:	687b      	ldr	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40021000 	.word	0x40021000
 80009c8:	007a1200 	.word	0x007a1200
 80009cc:	20000400 	.word	0x20000400
 80009d0:	20000410 	.word	0x20000410

080009d4 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <RCC_GetPCLK2Value+0x8c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f003 0303 	and.w	r3, r3, #3
 80009ea:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0){
 80009ec:	7a7b      	ldrb	r3, [r7, #9]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <RCC_GetPCLK2Value+0x24>
		SystemClock = 8000000;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <RCC_GetPCLK2Value+0x90>)
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	e001      	b.n	80009fc <RCC_GetPCLK2Value+0x28>
	}else{
		SystemClock = 8000000;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <RCC_GetPCLK2Value+0x90>)
 80009fa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <RCC_GetPCLK2Value+0x8c>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	091b      	lsrs	r3, r3, #4
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d802      	bhi.n	8000a14 <RCC_GetPCLK2Value+0x40>
		ahbp = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	72fb      	strb	r3, [r7, #11]
 8000a12:	e005      	b.n	8000a20 <RCC_GetPCLK2Value+0x4c>
	}else{
       ahbp = AHB_PreScaler[tmp-8];
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b08      	subs	r3, #8
 8000a18:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <RCC_GetPCLK2Value+0x94>)
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 11 ) & 0x7;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <RCC_GetPCLK2Value+0x8c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	0adb      	lsrs	r3, r3, #11
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04){
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d802      	bhi.n	8000a38 <RCC_GetPCLK2Value+0x64>
		apb2p = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	72bb      	strb	r3, [r7, #10]
 8000a36:	e004      	b.n	8000a42 <RCC_GetPCLK2Value+0x6e>
	}else{
		apb2p = APB1_PreScaler[tmp-4];
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <RCC_GetPCLK2Value+0x98>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000a52:	683b      	ldr	r3, [r7, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	007a1200 	.word	0x007a1200
 8000a68:	20000400 	.word	0x20000400
 8000a6c:	20000410 	.word	0x20000410

08000a70 <RCC_GetPLLOutputClock>:


uint32_t RCC_GetPLLOutputClock(){
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <USART_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d136      	bne.n	8000b00 <USART_PeriClockControl+0x80>
			if(pUSARTx == USART1){
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a38      	ldr	r2, [pc, #224]	; (8000b78 <USART_PeriClockControl+0xf8>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <USART_PeriClockControl+0x28>
				USART1_PCLK_EN();
 8000a9a:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6193      	str	r3, [r2, #24]
				UART4_PCLK_DI();
			}else if(pUSARTx == UART5){
				UART5_PCLK_DI();
			}
		}
}
 8000aa6:	e061      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART2){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <USART_PeriClockControl+0x100>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <USART_PeriClockControl+0x3e>
				USART2_PCLK_EN();
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	61d3      	str	r3, [r2, #28]
}
 8000abc:	e056      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART3){
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <USART_PeriClockControl+0x104>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <USART_PeriClockControl+0x54>
				USART3_PCLK_EN();
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	61d3      	str	r3, [r2, #28]
}
 8000ad2:	e04b      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART4){
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a2c      	ldr	r2, [pc, #176]	; (8000b88 <USART_PeriClockControl+0x108>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <USART_PeriClockControl+0x6a>
				UART4_PCLK_EN();
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae6:	61d3      	str	r3, [r2, #28]
}
 8000ae8:	e040      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART5){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <USART_PeriClockControl+0x10c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d13c      	bne.n	8000b6c <USART_PeriClockControl+0xec>
				UART5_PCLK_EN();
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000afc:	61d3      	str	r3, [r2, #28]
}
 8000afe:	e035      	b.n	8000b6c <USART_PeriClockControl+0xec>
			if(pUSARTx == USART1){
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <USART_PeriClockControl+0xf8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d106      	bne.n	8000b16 <USART_PeriClockControl+0x96>
				USART1_PCLK_DI();
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b12:	6193      	str	r3, [r2, #24]
}
 8000b14:	e02a      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART2){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <USART_PeriClockControl+0x100>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d106      	bne.n	8000b2c <USART_PeriClockControl+0xac>
				USART2_PCLK_DI();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b28:	61d3      	str	r3, [r2, #28]
}
 8000b2a:	e01f      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == USART3){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a15      	ldr	r2, [pc, #84]	; (8000b84 <USART_PeriClockControl+0x104>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d106      	bne.n	8000b42 <USART_PeriClockControl+0xc2>
				USART3_PCLK_DI();
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	61d3      	str	r3, [r2, #28]
}
 8000b40:	e014      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART4){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <USART_PeriClockControl+0x108>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <USART_PeriClockControl+0xd8>
				UART4_PCLK_DI();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b54:	61d3      	str	r3, [r2, #28]
}
 8000b56:	e009      	b.n	8000b6c <USART_PeriClockControl+0xec>
			}else if(pUSARTx == UART5){
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <USART_PeriClockControl+0x10c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d105      	bne.n	8000b6c <USART_PeriClockControl+0xec>
				UART5_PCLK_DI();
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b62:	69db      	ldr	r3, [r3, #28]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <USART_PeriClockControl+0xfc>)
 8000b66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b6a:	61d3      	str	r3, [r2, #28]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40004800 	.word	0x40004800
 8000b88:	40004c00 	.word	0x40004c00
 8000b8c:	40005000 	.word	0x40005000

08000b90 <USART_Init>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	// Temporary variable
	uint32_t tempreg=0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff6c 	bl	8000a80 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e014      	b.n	8000be4 <USART_Init+0x54>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	791b      	ldrb	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d104      	bne.n	8000bcc <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e00b      	b.n	8000be4 <USART_Init+0x54>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d107      	bne.n	8000be4 <USART_Init+0x54>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= (1 << USART_CR1_RE);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_TE);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7b5b      	ldrb	r3, [r3, #13]
 8000be8:	031b      	lsls	r3, r3, #12
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7b9b      	ldrb	r3, [r3, #14]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d104      	bne.n	8000c04 <USART_Init+0x74>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e00b      	b.n	8000c1c <USART_Init+0x8c>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b9b      	ldrb	r3, [r3, #14]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d107      	bne.n	8000c1c <USART_Init+0x8c>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1a:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68d9      	ldr	r1, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7b1b      	ldrb	r3, [r3, #12]
 8000c34:	031b      	lsls	r3, r3, #12
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS){
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7bdb      	ldrb	r3, [r3, #15]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d104      	bne.n	8000c5c <USART_Init+0xcc>
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e014      	b.n	8000c86 <USART_Init+0xf6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7bdb      	ldrb	r3, [r3, #15]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d104      	bne.n	8000c6e <USART_Init+0xde>
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	e00b      	b.n	8000c86 <USART_Init+0xf6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7bdb      	ldrb	r3, [r3, #15]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d107      	bne.n	8000c86 <USART_Init+0xf6>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7c:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	615a      	str	r2, [r3, #20]
/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here

	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f000 f86b 	bl	8000d74 <USART_SetBaudRate>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <USART_SendData>:
 * @return            -
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len){
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//uint8_t data;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e036      	b.n	8000d26 <USART_SendData+0x80>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000cb8:	bf00      	nop
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f843 	bl	8000d4c <USART_GetFlagStatus>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f6      	beq.n	8000cba <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	7b5b      	ldrb	r3, [r3, #13]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d118      	bne.n	8000d06 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ce6:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	7b9b      	ldrb	r3, [r3, #14]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d106      	bne.n	8000cfe <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	e010      	b.n	8000d20 <USART_SendData+0x7a>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	e00c      	b.n	8000d20 <USART_SendData+0x7a>
		}
		else
		{
			//This is 8bit data transfer
			//data = pUSARTHandle->pUSARTx->DR;
			pUSARTHandle->pUSARTx->DR |= (*pTxBuffer & (uint8_t)0xFF);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3c4      	bcc.n	8000cb8 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000d2e:	bf00      	nop
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f808 	bl	8000d4c <USART_GetFlagStatus>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f6      	beq.n	8000d30 <USART_SendData+0x8a>
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <USART_GetFlagStatus>:

}



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t FlagName){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]

	if(pUSARTx->SR & FlagName){
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <USART_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <USART_SetBaudRate>:
 * @return            -
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a2f      	ldr	r2, [pc, #188]	; (8000e44 <USART_SetBaudRate+0xd0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d103      	bne.n	8000d92 <USART_SetBaudRate+0x1e>
	   //USART1 is hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000d8a:	f7ff fe23 	bl	80009d4 <RCC_GetPCLK2Value>
 8000d8e:	61f8      	str	r0, [r7, #28]
 8000d90:	e002      	b.n	8000d98 <USART_SetBaudRate+0x24>
	}else{
	   PCLKx = RCC_GetPCLK1Value();
 8000d92:	f7ff fdc9 	bl	8000928 <RCC_GetPCLK1Value>
 8000d96:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8)){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00b      	beq.n	8000dbc <USART_SetBaudRate+0x48>
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	009a      	lsls	r2, r3, #2
 8000dae:	441a      	add	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	e00a      	b.n	8000dd2 <USART_SetBaudRate+0x5e>
	}else{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000dbc:	69fa      	ldr	r2, [r7, #28]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	009a      	lsls	r2, r3, #2
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <USART_SetBaudRate+0xd4>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00a      	beq.n	8000e18 <USART_SetBaudRate+0xa4>
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	3332      	adds	r3, #50	; 0x32
 8000e08:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <USART_SetBaudRate+0xd4>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <USART_SetBaudRate+0xb8>

	}else{
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	3332      	adds	r3, #50	; 0x32
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <USART_SetBaudRate+0xd4>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	095b      	lsrs	r3, r3, #5
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	609a      	str	r2, [r3, #8]
	//pUSARTx->DR = 0x85;
	//pUSARTx->BRR = 0x683;
}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40013800 	.word	0x40013800
 8000e48:	51eb851f 	.word	0x51eb851f

08000e4c <USART_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d106      	bne.n	8000e6c <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000e6a:	e005      	b.n	8000e78 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	2600      	movs	r6, #0
 8000e88:	4d0c      	ldr	r5, [pc, #48]	; (8000ebc <__libc_init_array+0x38>)
 8000e8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ec0 <__libc_init_array+0x3c>)
 8000e8c:	1b64      	subs	r4, r4, r5
 8000e8e:	10a4      	asrs	r4, r4, #2
 8000e90:	42a6      	cmp	r6, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	f000 f81a 	bl	8000ecc <_init>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	4d0a      	ldr	r5, [pc, #40]	; (8000ec4 <__libc_init_array+0x40>)
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <__libc_init_array+0x44>)
 8000e9e:	1b64      	subs	r4, r4, r5
 8000ea0:	10a4      	asrs	r4, r4, #2
 8000ea2:	42a6      	cmp	r6, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eac:	4798      	blx	r3
 8000eae:	3601      	adds	r6, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb6:	4798      	blx	r3
 8000eb8:	3601      	adds	r6, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000ee4 	.word	0x08000ee4
 8000ec0:	08000ee4 	.word	0x08000ee4
 8000ec4:	08000ee4 	.word	0x08000ee4
 8000ec8:	08000ee8 	.word	0x08000ee8

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr
