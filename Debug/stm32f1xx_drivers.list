
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000948  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a78  08000a80  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  4 .ARM          00000000  08000a78  08000a78  00010a80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a78  08000a80  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a80  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a80  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000919  00000000  00000000  00010aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000290  00000000  00000000  000113c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00011658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a0  00000000  00000000  00011720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020c3  00000000  00000000  000117c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010ff  00000000  00000000  00013883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008fb9  00000000  00000000  00014982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0001d98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a60 	.word	0x08000a60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a60 	.word	0x08000a60

08000170 <delay>:

#define HIGH 1
#define LOW  0
#define BTN_PRESSED LOW

void delay(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0

	// this will introduce ~200ms delay when system clock is 16 MHz
	for(uint32_t i = 0; i < 500000/2; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0003d08f 	.word	0x0003d08f

0800019c <main>:

int main(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GpioBtn;
	memset(&GpioLed,0,sizeof(GpioLed));				/*  set all structure to 0   */
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	220c      	movs	r2, #12
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 fc50 	bl	8000a50 <memset>
	memset(&GpioBtn,0,sizeof(GpioBtn));
 80001b0:	463b      	mov	r3, r7
 80001b2:	220c      	movs	r2, #12
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f000 fc4a 	bl	8000a50 <memset>

	GpioLed.pGPIOx = GPIOC;
 80001bc:	4b1c      	ldr	r3, [pc, #112]	; (8000230 <main+0x94>)
 80001be:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001c0:	230d      	movs	r3, #13
 80001c2:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_PP;
 80001c4:	2300      	movs	r3, #0
 80001c6:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_2;
 80001c8:	2302      	movs	r3, #2
 80001ca:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_MODE_OUT_PP;
 80001cc:	2300      	movs	r3, #0
 80001ce:	753b      	strb	r3, [r7, #20]
	//GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PP;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	4817      	ldr	r0, [pc, #92]	; (8000230 <main+0x94>)
 80001d4:	f000 f86a 	bl	80002ac <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f91d 	bl	800041c <GPIO_Init>

	GpioBtn.pGPIOx = GPIOB;
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <main+0x98>)
 80001e4:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 80001e6:	2309      	movs	r3, #9
 80001e8:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80001ea:	2304      	movs	r3, #4
 80001ec:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_MODE_IN_RESET_STATE;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = NO_CONFIG;
 80001f2:	2307      	movs	r3, #7
 80001f4:	753b      	strb	r3, [r7, #20]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_MODE_PU;
 80001f6:	2301      	movs	r3, #1
 80001f8:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 80001fa:	2101      	movs	r1, #1
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <main+0x98>)
 80001fe:	f000 f855 	bl	80002ac <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 8000202:	463b      	mov	r3, r7
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f909 	bl	800041c <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_13, GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	210d      	movs	r1, #13
 800020e:	4808      	ldr	r0, [pc, #32]	; (8000230 <main+0x94>)
 8000210:	f000 faf2 	bl	80007f8 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_13, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	210d      	movs	r1, #13
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <main+0x94>)
 800021a:	f000 faed 	bl	80007f8 <GPIO_WriteToOutputPin>
	// IRQ Configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 800021e:	210f      	movs	r1, #15
 8000220:	2017      	movs	r0, #23
 8000222:	f000 fba3 	bl	800096c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	2017      	movs	r0, #23
 800022a:	f000 fb1d 	bl	8000868 <GPIO_IRQInterruptConfig>

	while(1){
 800022e:	e7fe      	b.n	800022e <main+0x92>
 8000230:	40011000 	.word	0x40011000
 8000234:	40010c00 	.word	0x40010c00

08000238 <EXTI9_5_IRQHandler>:

	return 0;
}


void EXTI9_5_IRQHandler(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0

	delay(); // 200ms
 800023c:	f7ff ff98 	bl	8000170 <delay>

	GPIO_IRQHandling(GPIO_PIN_NO_9); // clear the pending event from EXTI line
 8000240:	2009      	movs	r0, #9
 8000242:	f000 fbc1 	bl	80009c8 <GPIO_IRQHandling>

	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_NO_13);
 8000246:	210d      	movs	r1, #13
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <EXTI9_5_IRQHandler+0x1c>)
 800024a:	f000 faf9 	bl	8000840 <GPIO_ToggleOutputPin>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40011000 	.word	0x40011000

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 fbbf 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ff87 	bl	800019c <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000a80 	.word	0x08000a80
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	f040 8099 	bne.w	80003f2 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a4e      	ldr	r2, [pc, #312]	; (80003fc <GPIO_PeriClockControl+0x150>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 80002c8:	4b4d      	ldr	r3, [pc, #308]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a4c      	ldr	r2, [pc, #304]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 80002d4:	e08d      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a4a      	ldr	r2, [pc, #296]	; (8000404 <GPIO_PeriClockControl+0x158>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 80002de:	4b48      	ldr	r3, [pc, #288]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a47      	ldr	r2, [pc, #284]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002e4:	f043 0308 	orr.w	r3, r3, #8
 80002e8:	6193      	str	r3, [r2, #24]
}
 80002ea:	e082      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a46      	ldr	r2, [pc, #280]	; (8000408 <GPIO_PeriClockControl+0x15c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a41      	ldr	r2, [pc, #260]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
}
 8000300:	e077      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a41      	ldr	r2, [pc, #260]	; (800040c <GPIO_PeriClockControl+0x160>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800030a:	4b3d      	ldr	r3, [pc, #244]	; (8000400 <GPIO_PeriClockControl+0x154>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a3c      	ldr	r2, [pc, #240]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6193      	str	r3, [r2, #24]
}
 8000316:	e06c      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a3d      	ldr	r2, [pc, #244]	; (8000410 <GPIO_PeriClockControl+0x164>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000320:	4b37      	ldr	r3, [pc, #220]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032a:	6193      	str	r3, [r2, #24]
}
 800032c:	e061      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a38      	ldr	r2, [pc, #224]	; (8000414 <GPIO_PeriClockControl+0x168>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 8000336:	4b32      	ldr	r3, [pc, #200]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a31      	ldr	r2, [pc, #196]	; (8000400 <GPIO_PeriClockControl+0x154>)
 800033c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000340:	6193      	str	r3, [r2, #24]
}
 8000342:	e056      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a34      	ldr	r2, [pc, #208]	; (8000418 <GPIO_PeriClockControl+0x16c>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <GPIO_PeriClockControl+0x154>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a2b      	ldr	r2, [pc, #172]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000356:	6193      	str	r3, [r2, #24]
}
 8000358:	e04b      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a27      	ldr	r2, [pc, #156]	; (80003fc <GPIO_PeriClockControl+0x150>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 8000362:	4b27      	ldr	r3, [pc, #156]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a26      	ldr	r2, [pc, #152]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000368:	f023 0304 	bic.w	r3, r3, #4
 800036c:	6193      	str	r3, [r2, #24]
}
 800036e:	e040      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a24      	ldr	r2, [pc, #144]	; (8000404 <GPIO_PeriClockControl+0x158>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <GPIO_PeriClockControl+0x154>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <GPIO_PeriClockControl+0x154>)
 800037e:	f023 0308 	bic.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
}
 8000384:	e035      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a1f      	ldr	r2, [pc, #124]	; (8000408 <GPIO_PeriClockControl+0x15c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <GPIO_PeriClockControl+0x154>)
 8000394:	f023 0310 	bic.w	r3, r3, #16
 8000398:	6193      	str	r3, [r2, #24]
}
 800039a:	e02a      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <GPIO_PeriClockControl+0x160>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a15      	ldr	r2, [pc, #84]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003aa:	f023 0320 	bic.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
}
 80003b0:	e01f      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <GPIO_PeriClockControl+0x164>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a10      	ldr	r2, [pc, #64]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003c4:	6193      	str	r3, [r2, #24]
}
 80003c6:	e014      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <GPIO_PeriClockControl+0x168>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003da:	6193      	str	r3, [r2, #24]
}
 80003dc:	e009      	b.n	80003f2 <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <GPIO_PeriClockControl+0x16c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d105      	bne.n	80003f2 <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <GPIO_PeriClockControl+0x154>)
 80003ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003f0:	6193      	str	r3, [r2, #24]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40010800 	.word	0x40010800
 8000400:	40021000 	.word	0x40021000
 8000404:	40010c00 	.word	0x40010c00
 8000408:	40011000 	.word	0x40011000
 800040c:	40011400 	.word	0x40011400
 8000410:	40011800 	.word	0x40011800
 8000414:	40011c00 	.word	0x40011c00
 8000418:	40012000 	.word	0x40012000

0800041c <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	2b07      	cmp	r3, #7
 800042e:	d820      	bhi.n	8000472 <GPIO_Init+0x56>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	799b      	ldrb	r3, [r3, #6]
 8000434:	461a      	mov	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6819      	ldr	r1, [r3, #0]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	430a      	orrs	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	e020      	b.n	80004b4 <GPIO_Init+0x98>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	799b      	ldrb	r3, [r3, #6]
 8000476:	461a      	mov	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	3b08      	subs	r3, #8
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	2103      	movs	r1, #3
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	43db      	mvns	r3, r3
 800049a:	4619      	mov	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	400a      	ands	r2, r1
 80004a2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6859      	ldr	r1, [r3, #4]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d84b      	bhi.n	8000558 <GPIO_Init+0x13c>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	2b07      	cmp	r3, #7
 80004c6:	d822      	bhi.n	800050e <GPIO_Init+0xf2>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	461a      	mov	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	3302      	adds	r3, #2
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	3302      	adds	r3, #2
 80004ea:	2103      	movs	r1, #3
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6819      	ldr	r1, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	430a      	orrs	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	e114      	b.n	8000738 <GPIO_Init+0x31c>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	3b08      	subs	r3, #8
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	3302      	adds	r3, #2
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	685a      	ldr	r2, [r3, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	3b08      	subs	r3, #8
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	3302      	adds	r3, #2
 8000534:	2103      	movs	r1, #3
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6859      	ldr	r1, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	430a      	orrs	r2, r1
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	e0ef      	b.n	8000738 <GPIO_Init+0x31c>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b04      	cmp	r3, #4
 800055e:	d85e      	bhi.n	800061e <GPIO_Init+0x202>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	2b07      	cmp	r3, #7
 8000566:	d820      	bhi.n	80005aa <GPIO_Init+0x18e>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	3302      	adds	r3, #2
 8000570:	2202      	movs	r2, #2
 8000572:	fa02 f303 	lsl.w	r3, r2, r3
 8000576:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	3302      	adds	r3, #2
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	400a      	ands	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6819      	ldr	r1, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	e021      	b.n	80005ee <GPIO_Init+0x1d2>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	3b08      	subs	r3, #8
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	3302      	adds	r3, #2
 80005b4:	2202      	movs	r2, #2
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	3b08      	subs	r3, #8
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	3302      	adds	r3, #2
 80005cc:	2103      	movs	r1, #3
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	400a      	ands	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6859      	ldr	r1, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ee:	4b78      	ldr	r3, [pc, #480]	; (80007d0 <GPIO_Init+0x3b4>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7912      	ldrb	r2, [r2, #4]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a74      	ldr	r2, [pc, #464]	; (80007d0 <GPIO_Init+0x3b4>)
 8000600:	430b      	orrs	r3, r1
 8000602:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000604:	4b72      	ldr	r3, [pc, #456]	; (80007d0 <GPIO_Init+0x3b4>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	43d2      	mvns	r2, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a6e      	ldr	r2, [pc, #440]	; (80007d0 <GPIO_Init+0x3b4>)
 8000618:	400b      	ands	r3, r1
 800061a:	6093      	str	r3, [r2, #8]
 800061c:	e035      	b.n	800068a <GPIO_Init+0x26e>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	795b      	ldrb	r3, [r3, #5]
 8000622:	2b05      	cmp	r3, #5
 8000624:	d817      	bhi.n	8000656 <GPIO_Init+0x23a>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000626:	4b6a      	ldr	r3, [pc, #424]	; (80007d0 <GPIO_Init+0x3b4>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7912      	ldrb	r2, [r2, #4]
 800062e:	4611      	mov	r1, r2
 8000630:	2201      	movs	r2, #1
 8000632:	408a      	lsls	r2, r1
 8000634:	4611      	mov	r1, r2
 8000636:	4a66      	ldr	r2, [pc, #408]	; (80007d0 <GPIO_Init+0x3b4>)
 8000638:	430b      	orrs	r3, r1
 800063a:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	4b64      	ldr	r3, [pc, #400]	; (80007d0 <GPIO_Init+0x3b4>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	43d2      	mvns	r2, r2
 800064c:	4611      	mov	r1, r2
 800064e:	4a60      	ldr	r2, [pc, #384]	; (80007d0 <GPIO_Init+0x3b4>)
 8000650:	400b      	ands	r3, r1
 8000652:	60d3      	str	r3, [r2, #12]
 8000654:	e019      	b.n	800068a <GPIO_Init+0x26e>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	795b      	ldrb	r3, [r3, #5]
 800065a:	2b06      	cmp	r3, #6
 800065c:	d815      	bhi.n	800068a <GPIO_Init+0x26e>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <GPIO_Init+0x3b4>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	7912      	ldrb	r2, [r2, #4]
 8000666:	4611      	mov	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	408a      	lsls	r2, r1
 800066c:	4611      	mov	r1, r2
 800066e:	4a58      	ldr	r2, [pc, #352]	; (80007d0 <GPIO_Init+0x3b4>)
 8000670:	430b      	orrs	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000674:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <GPIO_Init+0x3b4>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	7912      	ldrb	r2, [r2, #4]
 800067c:	4611      	mov	r1, r2
 800067e:	2201      	movs	r2, #1
 8000680:	408a      	lsls	r2, r1
 8000682:	4611      	mov	r1, r2
 8000684:	4a52      	ldr	r2, [pc, #328]	; (80007d0 <GPIO_Init+0x3b4>)
 8000686:	430b      	orrs	r3, r1
 8000688:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0303 	and.w	r3, r3, #3
 800069a:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a4c      	ldr	r2, [pc, #304]	; (80007d4 <GPIO_Init+0x3b8>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d02b      	beq.n	80006fe <GPIO_Init+0x2e2>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a4b      	ldr	r2, [pc, #300]	; (80007d8 <GPIO_Init+0x3bc>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d024      	beq.n	80006fa <GPIO_Init+0x2de>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a49      	ldr	r2, [pc, #292]	; (80007dc <GPIO_Init+0x3c0>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d01d      	beq.n	80006f6 <GPIO_Init+0x2da>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a48      	ldr	r2, [pc, #288]	; (80007e0 <GPIO_Init+0x3c4>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d016      	beq.n	80006f2 <GPIO_Init+0x2d6>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <GPIO_Init+0x3c8>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d00f      	beq.n	80006ee <GPIO_Init+0x2d2>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a45      	ldr	r2, [pc, #276]	; (80007e8 <GPIO_Init+0x3cc>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d008      	beq.n	80006ea <GPIO_Init+0x2ce>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a43      	ldr	r2, [pc, #268]	; (80007ec <GPIO_Init+0x3d0>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d101      	bne.n	80006e6 <GPIO_Init+0x2ca>
 80006e2:	2306      	movs	r3, #6
 80006e4:	e00c      	b.n	8000700 <GPIO_Init+0x2e4>
 80006e6:	2300      	movs	r3, #0
 80006e8:	e00a      	b.n	8000700 <GPIO_Init+0x2e4>
 80006ea:	2305      	movs	r3, #5
 80006ec:	e008      	b.n	8000700 <GPIO_Init+0x2e4>
 80006ee:	2304      	movs	r3, #4
 80006f0:	e006      	b.n	8000700 <GPIO_Init+0x2e4>
 80006f2:	2303      	movs	r3, #3
 80006f4:	e004      	b.n	8000700 <GPIO_Init+0x2e4>
 80006f6:	2302      	movs	r3, #2
 80006f8:	e002      	b.n	8000700 <GPIO_Init+0x2e4>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <GPIO_Init+0x2e4>
 80006fe:	2300      	movs	r3, #0
 8000700:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 8000702:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <GPIO_Init+0x3d4>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a3a      	ldr	r2, [pc, #232]	; (80007f0 <GPIO_Init+0x3d4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 800070e:	7a7a      	ldrb	r2, [r7, #9]
 8000710:	7abb      	ldrb	r3, [r7, #10]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	fa02 f103 	lsl.w	r1, r2, r3
 8000718:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <GPIO_Init+0x3d8>)
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	3302      	adds	r3, #2
 800071e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <GPIO_Init+0x3b4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	7912      	ldrb	r2, [r2, #4]
 800072a:	4611      	mov	r1, r2
 800072c:	2201      	movs	r2, #1
 800072e:	408a      	lsls	r2, r1
 8000730:	4611      	mov	r1, r2
 8000732:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <GPIO_Init+0x3b4>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	79db      	ldrb	r3, [r3, #7]
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	2301      	movs	r3, #1
 800075a:	408b      	lsls	r3, r1
 800075c:	43db      	mvns	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	400a      	ands	r2, r1
 8000766:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d9      	ldr	r1, [r3, #12]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	430a      	orrs	r2, r1
 8000776:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	2b07      	cmp	r3, #7
 8000782:	d11d      	bne.n	80007c0 <GPIO_Init+0x3a4>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a1b      	ldrb	r3, [r3, #8]
 8000788:	461a      	mov	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68da      	ldr	r2, [r3, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	2301      	movs	r3, #1
 80007a2:	408b      	lsls	r3, r1
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68d9      	ldr	r1, [r3, #12]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	430a      	orrs	r2, r1
 80007be:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
	//if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
		// configure the alternate function registers
	//}
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40010400 	.word	0x40010400
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40011000 	.word	0x40011000
 80007e0:	40011400 	.word	0x40011400
 80007e4:	40011800 	.word	0x40011800
 80007e8:	40011c00 	.word	0x40011c00
 80007ec:	40012000 	.word	0x40012000
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010000 	.word	0x40010000

080007f8 <GPIO_WriteToOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
 8000804:	4613      	mov	r3, r2
 8000806:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET){
 8000808:	78bb      	ldrb	r3, [r7, #2]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d109      	bne.n	8000822 <GPIO_WriteToOutputPin+0x2a>
		// write 1 to the output data register at the bit field corresponding pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	78fa      	ldrb	r2, [r7, #3]
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60da      	str	r2, [r3, #12]
	}else{
		// write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000820:	e009      	b.n	8000836 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	78fa      	ldrb	r2, [r7, #3]
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
 800082e:	43d2      	mvns	r2, r2
 8000830:	401a      	ands	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60da      	str	r2, [r3, #12]
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <GPIO_ToggleOutputPin>:
 * @return				- 0 or 1
 *
 * @Note				- none
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	78fa      	ldrb	r2, [r7, #3]
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	405a      	eors	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60da      	str	r2, [r3, #12]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <GPIO_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR Handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE){
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d133      	bne.n	80008e6 <GPIO_IRQInterruptConfig+0x7e>
		if(IRQNumber <= 31){
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b1f      	cmp	r3, #31
 8000882:	d80a      	bhi.n	800089a <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <GPIO_IRQInterruptConfig+0xf0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f202 	lsl.w	r2, r1, r2
 8000890:	4611      	mov	r1, r2
 8000892:	4a31      	ldr	r2, [pc, #196]	; (8000958 <GPIO_IRQInterruptConfig+0xf0>)
 8000894:	430b      	orrs	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
		}else if(IRQNumber >= 64 && IRQNumber < 96){
			// program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000898:	e059      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b1f      	cmp	r3, #31
 800089e:	d90f      	bls.n	80008c0 <GPIO_IRQInterruptConfig+0x58>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b3f      	cmp	r3, #63	; 0x3f
 80008a4:	d80c      	bhi.n	80008c0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <GPIO_IRQInterruptConfig+0xf4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	79fa      	ldrb	r2, [r7, #7]
 80008ac:	f002 021f 	and.w	r2, r2, #31
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <GPIO_IRQInterruptConfig+0xf4>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e046      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b3f      	cmp	r3, #63	; 0x3f
 80008c4:	d943      	bls.n	800094e <GPIO_IRQInterruptConfig+0xe6>
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b5f      	cmp	r3, #95	; 0x5f
 80008ca:	d840      	bhi.n	800094e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER1 |= (1 << IRQNumber % 64);
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <GPIO_IRQInterruptConfig+0xf4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <GPIO_IRQInterruptConfig+0xf4>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	e033      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31){
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d80a      	bhi.n	8000902 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <GPIO_IRQInterruptConfig+0xf8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <GPIO_IRQInterruptConfig+0xf8>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	e025      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64){ //32 to 63
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b1f      	cmp	r3, #31
 8000906:	d90f      	bls.n	8000928 <GPIO_IRQInterruptConfig+0xc0>
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b3f      	cmp	r3, #63	; 0x3f
 800090c:	d80c      	bhi.n	8000928 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <GPIO_IRQInterruptConfig+0xfc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	79fa      	ldrb	r2, [r7, #7]
 8000914:	f002 021f 	and.w	r2, r2, #31
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4a10      	ldr	r2, [pc, #64]	; (8000964 <GPIO_IRQInterruptConfig+0xfc>)
 8000922:	430b      	orrs	r3, r1
 8000924:	6013      	str	r3, [r2, #0]
 8000926:	e012      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber >= 64 && IRQNumber < 96){
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	2b3f      	cmp	r3, #63	; 0x3f
 800092c:	d90f      	bls.n	800094e <GPIO_IRQInterruptConfig+0xe6>
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b5f      	cmp	r3, #95	; 0x5f
 8000932:	d80c      	bhi.n	800094e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <GPIO_IRQInterruptConfig+0x100>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <GPIO_IRQInterruptConfig+0x100>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	e7ff      	b.n	800094e <GPIO_IRQInterruptConfig+0xe6>
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000e104 	.word	0xe000e104
 8000960:	e000e180 	.word	0xe000e180
 8000964:	e000e184 	.word	0xe000e184
 8000968:	e000e188 	.word	0xe000e188

0800096c <GPIO_IRQPriorityConfig>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	// 1. First lets find out the IPR register  (iprx = interrupt priority register)
	uint8_t iprx = IRQNumber / 4;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	3304      	adds	r3, #4
 8000992:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + (iprx)) |= (IRQPriority << shift_amount);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800099c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	79b9      	ldrb	r1, [r7, #6]
 80009a4:	7b7b      	ldrb	r3, [r7, #13]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009b4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009b8:	430a      	orrs	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
	...

080009c8 <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1 << PinNumber)){
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <GPIO_IRQHandling+0x3c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4013      	ands	r3, r2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d009      	beq.n	80009f8 <GPIO_IRQHandling+0x30>
		// clear
		EXTI->PR |= (1 << PinNumber);
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <GPIO_IRQHandling+0x3c>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	2101      	movs	r1, #1
 80009ec:	fa01 f202 	lsl.w	r2, r1, r2
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <GPIO_IRQHandling+0x3c>)
 80009f4:	430b      	orrs	r3, r1
 80009f6:	6153      	str	r3, [r2, #20]
	}
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40010400 	.word	0x40010400

08000a08 <__libc_init_array>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4d0c      	ldr	r5, [pc, #48]	; (8000a40 <__libc_init_array+0x38>)
 8000a0e:	4c0d      	ldr	r4, [pc, #52]	; (8000a44 <__libc_init_array+0x3c>)
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	42a6      	cmp	r6, r4
 8000a16:	d109      	bne.n	8000a2c <__libc_init_array+0x24>
 8000a18:	f000 f822 	bl	8000a60 <_init>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	4d0a      	ldr	r5, [pc, #40]	; (8000a48 <__libc_init_array+0x40>)
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <__libc_init_array+0x44>)
 8000a22:	1b64      	subs	r4, r4, r5
 8000a24:	10a4      	asrs	r4, r4, #2
 8000a26:	42a6      	cmp	r6, r4
 8000a28:	d105      	bne.n	8000a36 <__libc_init_array+0x2e>
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a30:	4798      	blx	r3
 8000a32:	3601      	adds	r6, #1
 8000a34:	e7ee      	b.n	8000a14 <__libc_init_array+0xc>
 8000a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3a:	4798      	blx	r3
 8000a3c:	3601      	adds	r6, #1
 8000a3e:	e7f2      	b.n	8000a26 <__libc_init_array+0x1e>
 8000a40:	08000a78 	.word	0x08000a78
 8000a44:	08000a78 	.word	0x08000a78
 8000a48:	08000a78 	.word	0x08000a78
 8000a4c:	08000a7c 	.word	0x08000a7c

08000a50 <memset>:
 8000a50:	4603      	mov	r3, r0
 8000a52:	4402      	add	r2, r0
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d100      	bne.n	8000a5a <memset+0xa>
 8000a58:	4770      	bx	lr
 8000a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a5e:	e7f9      	b.n	8000a54 <memset+0x4>

08000a60 <_init>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr

08000a6c <_fini>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr
