
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  4 .ARM          00000000  08000b58  08000b58  00010b60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b58  08000b60  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b58  08000b58  00010b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b5c  08000b5c  00010b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000b60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000b60  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ec6  00000000  00000000  00010b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c8  00000000  00000000  00011a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00011e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00011f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000214b  00000000  00000000  00012040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017af  00000000  00000000  0001418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009154  00000000  00000000  0001593a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001ea8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000404  00000000  00000000  0001eae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b34 	.word	0x08000b34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b34 	.word	0x08000b34

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <SPI2_GPIOInits>:
 * 	 PB14 --> SPI2_MISO
 *	 PB13 --> SPI2_SCK
 *	 PB12 --> SPI2_NSS
 */

void SPI2_GPIOInits(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000186:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <SPI2_GPIOInits+0x34>)
 8000188:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_PP;
 800018a:	2302      	movs	r3, #2
 800018c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_OUT_MHZ_50;
 800018e:	2303      	movs	r3, #3
 8000190:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000192:	230d      	movs	r3, #13
 8000194:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f935 	bl	8000408 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800019e:	230f      	movs	r3, #15
 80001a0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 f92f 	bl	8000408 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	// NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 80001aa:	bf00      	nop
 80001ac:	3710      	adds	r7, #16
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <SPI2_Inits>:

void SPI2_Inits(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80001be:	4b0c      	ldr	r3, [pc, #48]	; (80001f0 <SPI2_Inits+0x38>)
 80001c0:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80001c2:	2301      	movs	r3, #1
 80001c4:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001c6:	2301      	movs	r3, #1
 80001c8:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // generates SLCK of 8 MHz
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80001d2:	2300      	movs	r3, #0
 80001d4:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80001d6:	2300      	movs	r3, #0
 80001d8:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // Software slave managment enabled for NSS pin
 80001da:	2301      	movs	r3, #1
 80001dc:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fb5b 	bl	800089c <SPI_Init>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40003800 	.word	0x40003800

080001f4 <main>:

int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 80001fa:	4a10      	ldr	r2, [pc, #64]	; (800023c <main+0x48>)
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000200:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000204:	f7ff ffbc 	bl	8000180 <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000208:	f7ff ffd6 	bl	80001b8 <SPI2_Inits>

	// This makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	480c      	ldr	r0, [pc, #48]	; (8000240 <main+0x4c>)
 8000210:	f000 fc50 	bl	8000ab4 <SPI_SSIConfig>

	// Enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 8000214:	2101      	movs	r1, #1
 8000216:	480a      	ldr	r0, [pc, #40]	; (8000240 <main+0x4c>)
 8000218:	f000 fc31 	bl	8000a7e <SPI_PeripheralControl>

	// Function to send data
	SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	4618      	mov	r0, r3
 8000220:	f7ff ffa6 	bl	8000170 <strlen>
 8000224:	4602      	mov	r2, r0
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4619      	mov	r1, r3
 800022a:	4805      	ldr	r0, [pc, #20]	; (8000240 <main+0x4c>)
 800022c:	f000 fbf0 	bl	8000a10 <SPI_SendData>

	SPI_PeripheralControl(SPI2, DISABLE);
 8000230:	2100      	movs	r1, #0
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <main+0x4c>)
 8000234:	f000 fc23 	bl	8000a7e <SPI_PeripheralControl>

	while(1);
 8000238:	e7fe      	b.n	8000238 <main+0x44>
 800023a:	bf00      	nop
 800023c:	08000b4c 	.word	0x08000b4c
 8000240:	40003800 	.word	0x40003800

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 fc3b 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ffbd 	bl	80001f4 <main>

0800027a <LoopForever>:

LoopForever:
    b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000b60 	.word	0x08000b60
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	2000001c 	.word	0x2000001c

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <GPIO_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t  EnorDi){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	f040 8099 	bne.w	80003de <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a4e      	ldr	r2, [pc, #312]	; (80003e8 <GPIO_PeriClockControl+0x150>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 80002b4:	4b4d      	ldr	r3, [pc, #308]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a4c      	ldr	r2, [pc, #304]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		}else if(pGPIOx == GPIOG){
			GPIOG_PCLK_DI();}
		}
	}
}
 80002c0:	e08d      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a4a      	ldr	r2, [pc, #296]	; (80003f0 <GPIO_PeriClockControl+0x158>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 80002ca:	4b48      	ldr	r3, [pc, #288]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a47      	ldr	r2, [pc, #284]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	6193      	str	r3, [r2, #24]
}
 80002d6:	e082      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a46      	ldr	r2, [pc, #280]	; (80003f4 <GPIO_PeriClockControl+0x15c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 80002e0:	4b42      	ldr	r3, [pc, #264]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a41      	ldr	r2, [pc, #260]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
}
 80002ec:	e077      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a41      	ldr	r2, [pc, #260]	; (80003f8 <GPIO_PeriClockControl+0x160>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 80002f6:	4b3d      	ldr	r3, [pc, #244]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a3c      	ldr	r2, [pc, #240]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80002fc:	f043 0320 	orr.w	r3, r3, #32
 8000300:	6193      	str	r3, [r2, #24]
}
 8000302:	e06c      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a3d      	ldr	r2, [pc, #244]	; (80003fc <GPIO_PeriClockControl+0x164>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 800030c:	4b37      	ldr	r3, [pc, #220]	; (80003ec <GPIO_PeriClockControl+0x154>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a36      	ldr	r2, [pc, #216]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000316:	6193      	str	r3, [r2, #24]
}
 8000318:	e061      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a38      	ldr	r2, [pc, #224]	; (8000400 <GPIO_PeriClockControl+0x168>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 8000322:	4b32      	ldr	r3, [pc, #200]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a31      	ldr	r2, [pc, #196]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800032c:	6193      	str	r3, [r2, #24]
}
 800032e:	e056      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a34      	ldr	r2, [pc, #208]	; (8000404 <GPIO_PeriClockControl+0x16c>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <GPIO_PeriClockControl+0x154>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a2b      	ldr	r2, [pc, #172]	; (80003ec <GPIO_PeriClockControl+0x154>)
 800033e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000342:	6193      	str	r3, [r2, #24]
}
 8000344:	e04b      	b.n	80003de <GPIO_PeriClockControl+0x146>
		if(pGPIOx == GPIOA){
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a27      	ldr	r2, [pc, #156]	; (80003e8 <GPIO_PeriClockControl+0x150>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0xc4>
			GPIOA_PCLK_DI();
 800034e:	4b27      	ldr	r3, [pc, #156]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a26      	ldr	r2, [pc, #152]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000354:	f023 0304 	bic.w	r3, r3, #4
 8000358:	6193      	str	r3, [r2, #24]
}
 800035a:	e040      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOB){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a24      	ldr	r2, [pc, #144]	; (80003f0 <GPIO_PeriClockControl+0x158>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0xda>
			GPIOB_PCLK_DI();
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <GPIO_PeriClockControl+0x154>)
 800036a:	f023 0308 	bic.w	r3, r3, #8
 800036e:	6193      	str	r3, [r2, #24]
}
 8000370:	e035      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOC){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <GPIO_PeriClockControl+0x15c>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0xf0>
			GPIOC_PCLK_DI();
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <GPIO_PeriClockControl+0x154>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000380:	f023 0310 	bic.w	r3, r3, #16
 8000384:	6193      	str	r3, [r2, #24]
}
 8000386:	e02a      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOD){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <GPIO_PeriClockControl+0x160>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x106>
			GPIOD_PCLK_DI();
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a15      	ldr	r2, [pc, #84]	; (80003ec <GPIO_PeriClockControl+0x154>)
 8000396:	f023 0320 	bic.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
}
 800039c:	e01f      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOE){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a16      	ldr	r2, [pc, #88]	; (80003fc <GPIO_PeriClockControl+0x164>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x11c>
			GPIOE_PCLK_DI();
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a10      	ldr	r2, [pc, #64]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003b0:	6193      	str	r3, [r2, #24]
}
 80003b2:	e014      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOF){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <GPIO_PeriClockControl+0x168>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x132>
			GPIOF_PCLK_DI();
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003c6:	6193      	str	r3, [r2, #24]
}
 80003c8:	e009      	b.n	80003de <GPIO_PeriClockControl+0x146>
		}else if(pGPIOx == GPIOG){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <GPIO_PeriClockControl+0x16c>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d105      	bne.n	80003de <GPIO_PeriClockControl+0x146>
			GPIOG_PCLK_DI();}
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <GPIO_PeriClockControl+0x154>)
 80003d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003dc:	6193      	str	r3, [r2, #24]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	40011000 	.word	0x40011000
 80003f8:	40011400 	.word	0x40011400
 80003fc:	40011800 	.word	0x40011800
 8000400:	40011c00 	.word	0x40011c00
 8000404:	40012000 	.word	0x40012000

08000408 <GPIO_Init>:
 */

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporal variable
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]

	// Enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2101      	movs	r1, #1
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff3c 	bl	8000298 <GPIO_PeriClockControl>

	// 1. Configure the speed
	//temp = 2;
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d820      	bhi.n	800046a <GPIO_Init+0x62>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	799b      	ldrb	r3, [r3, #6]
 800042c:	461a      	mov	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	43db      	mvns	r3, r3
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	400a      	ands	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp; //setting
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	430a      	orrs	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e020      	b.n	80004ac <GPIO_Init+0xa4>
	}else{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	799b      	ldrb	r3, [r3, #6]
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	3b08      	subs	r3, #8
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	685a      	ldr	r2, [r3, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	2103      	movs	r1, #3
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	4619      	mov	r1, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	400a      	ands	r2, r1
 800049a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6859      	ldr	r1, [r3, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	605a      	str	r2, [r3, #4]
	}

	// 2. Configure the mode of gpio pin
	temp = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_AF_OD){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d84b      	bhi.n	8000550 <GPIO_Init+0x148>
		// then non interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d822      	bhi.n	8000506 <GPIO_Init+0xfe>
			// then the GPIO select is between Pin0 and Pin7 -> CRL
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	3302      	adds	r3, #2
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	3302      	adds	r3, #2
 80004e2:	2103      	movs	r1, #3
 80004e4:	fa01 f303 	lsl.w	r3, r1, r3
 80004e8:	43db      	mvns	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	400a      	ands	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->CRL |= temp;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6819      	ldr	r1, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	e114      	b.n	8000730 <GPIO_Init+0x328>
		}else{
			// then the GPIO select is between Pin8 and Pin16 -> CRH
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	461a      	mov	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	3b08      	subs	r3, #8
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	3302      	adds	r3, #2
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	3b08      	subs	r3, #8
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	3302      	adds	r3, #2
 800052c:	2103      	movs	r1, #3
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	605a      	str	r2, [r3, #4]
			pGPIOHandle->pGPIOx->CRH |= temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	430a      	orrs	r2, r1
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	e0ef      	b.n	8000730 <GPIO_Init+0x328>
		}

	}else{
		// this part will code later . (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT){
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	2b04      	cmp	r3, #4
 8000556:	d85e      	bhi.n	8000616 <GPIO_Init+0x20e>
			// 1. Configure the FTSR (Falling trigger detection register)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d820      	bhi.n	80005a2 <GPIO_Init+0x19a>
				// then the GPIO select is between Pin0 and Pin7 -> CRL
				temp = (2 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // conf pupd
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	3302      	adds	r3, #2
 8000568:	2202      	movs	r2, #2
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRL &= ~(0x3 << (2 + 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
				pGPIOHandle->pGPIOx->CRL |= temp;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e021      	b.n	80005e6 <GPIO_Init+0x1de>
			}else{
				// then the GPIO select is between Pin8 and Pin16 -> CRH
				temp = (2 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); // conf pupd
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	3b08      	subs	r3, #8
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	3302      	adds	r3, #2
 80005ac:	2202      	movs	r2, #2
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->CRH &= ~(0x3 << (2 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //clearing
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	3b08      	subs	r3, #8
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	3302      	adds	r3, #2
 80005c4:	2103      	movs	r1, #3
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	400a      	ands	r2, r1
 80005d4:	605a      	str	r2, [r3, #4]
				pGPIOHandle->pGPIOx->CRH |= temp;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	6859      	ldr	r1, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]
			}
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e6:	4b77      	ldr	r3, [pc, #476]	; (80007c4 <GPIO_Init+0x3bc>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a73      	ldr	r2, [pc, #460]	; (80007c4 <GPIO_Init+0x3bc>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b71      	ldr	r3, [pc, #452]	; (80007c4 <GPIO_Init+0x3bc>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a6d      	ldr	r2, [pc, #436]	; (80007c4 <GPIO_Init+0x3bc>)
 8000610:	400b      	ands	r3, r1
 8000612:	6093      	str	r3, [r2, #8]
 8000614:	e035      	b.n	8000682 <GPIO_Init+0x27a>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT){
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795b      	ldrb	r3, [r3, #5]
 800061a:	2b05      	cmp	r3, #5
 800061c:	d817      	bhi.n	800064e <GPIO_Init+0x246>
			// 1. Configure the RTSR (Rising trigger detection register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b69      	ldr	r3, [pc, #420]	; (80007c4 <GPIO_Init+0x3bc>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a65      	ldr	r2, [pc, #404]	; (80007c4 <GPIO_Init+0x3bc>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <GPIO_Init+0x3bc>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a5f      	ldr	r2, [pc, #380]	; (80007c4 <GPIO_Init+0x3bc>)
 8000648:	400b      	ands	r3, r1
 800064a:	60d3      	str	r3, [r2, #12]
 800064c:	e019      	b.n	8000682 <GPIO_Init+0x27a>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	2b06      	cmp	r3, #6
 8000654:	d815      	bhi.n	8000682 <GPIO_Init+0x27a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <GPIO_Init+0x3bc>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	4611      	mov	r1, r2
 8000666:	4a57      	ldr	r2, [pc, #348]	; (80007c4 <GPIO_Init+0x3bc>)
 8000668:	430b      	orrs	r3, r1
 800066a:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800066c:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <GPIO_Init+0x3bc>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7912      	ldrb	r2, [r2, #4]
 8000674:	4611      	mov	r1, r2
 8000676:	2201      	movs	r2, #1
 8000678:	408a      	lsls	r2, r1
 800067a:	4611      	mov	r1, r2
 800067c:	4a51      	ldr	r2, [pc, #324]	; (80007c4 <GPIO_Init+0x3bc>)
 800067e:	430b      	orrs	r3, r1
 8000680:	6093      	str	r3, [r2, #8]
		}

		// 2. Config the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	72fb      	strb	r3, [r7, #11]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	72bb      	strb	r3, [r7, #10]
			uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a4b      	ldr	r2, [pc, #300]	; (80007c8 <GPIO_Init+0x3c0>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d02b      	beq.n	80006f6 <GPIO_Init+0x2ee>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a4a      	ldr	r2, [pc, #296]	; (80007cc <GPIO_Init+0x3c4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d024      	beq.n	80006f2 <GPIO_Init+0x2ea>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a48      	ldr	r2, [pc, #288]	; (80007d0 <GPIO_Init+0x3c8>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d01d      	beq.n	80006ee <GPIO_Init+0x2e6>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <GPIO_Init+0x3cc>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d016      	beq.n	80006ea <GPIO_Init+0x2e2>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a45      	ldr	r2, [pc, #276]	; (80007d8 <GPIO_Init+0x3d0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d00f      	beq.n	80006e6 <GPIO_Init+0x2de>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a44      	ldr	r2, [pc, #272]	; (80007dc <GPIO_Init+0x3d4>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d008      	beq.n	80006e2 <GPIO_Init+0x2da>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <GPIO_Init+0x3d8>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <GPIO_Init+0x2d6>
 80006da:	2306      	movs	r3, #6
 80006dc:	e00c      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006de:	2300      	movs	r3, #0
 80006e0:	e00a      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006e2:	2305      	movs	r3, #5
 80006e4:	e008      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006e6:	2304      	movs	r3, #4
 80006e8:	e006      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006ea:	2303      	movs	r3, #3
 80006ec:	e004      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006ee:	2302      	movs	r3, #2
 80006f0:	e002      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <GPIO_Init+0x2f0>
 80006f6:	2300      	movs	r3, #0
 80006f8:	727b      	strb	r3, [r7, #9]
			AFIO_PCLK_EN();
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <GPIO_Init+0x3dc>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <GPIO_Init+0x3dc>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
			AFIO->EXTICR[temp1] = portCode << (temp2 * 4);
 8000706:	7a7a      	ldrb	r2, [r7, #9]
 8000708:	7abb      	ldrb	r3, [r7, #10]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	fa02 f103 	lsl.w	r1, r2, r3
 8000710:	4a35      	ldr	r2, [pc, #212]	; (80007e8 <GPIO_Init+0x3e0>)
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	3302      	adds	r3, #2
 8000716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <GPIO_Init+0x3bc>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	4611      	mov	r1, r2
 800072a:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <GPIO_Init+0x3bc>)
 800072c:	430b      	orrs	r3, r1
 800072e:	6013      	str	r3, [r2, #0]
	}

	// 3. Configure pupd settings
	temp = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	79db      	ldrb	r3, [r3, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68da      	ldr	r2, [r3, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	4619      	mov	r1, r3
 8000750:	2301      	movs	r3, #1
 8000752:	408b      	lsls	r3, r1
 8000754:	43db      	mvns	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	400a      	ands	r2, r1
 800075e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->ODR |= temp;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68d9      	ldr	r1, [r3, #12]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	430a      	orrs	r2, r1
 800076e:	60da      	str	r2, [r3, #12]

	// 4. Configure the optype   PUSH-PULL or OPEN DRAIN
	temp = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType == NO_CONFIG){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7a1b      	ldrb	r3, [r3, #8]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d11d      	bne.n	80007b8 <GPIO_Init+0x3b0>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7a1b      	ldrb	r3, [r3, #8]
 8000780:	461a      	mov	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	2301      	movs	r3, #1
 800079a:	408b      	lsls	r3, r1
 800079c:	43db      	mvns	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	400a      	ands	r2, r1
 80007a6:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->ODR |= temp;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68d9      	ldr	r1, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	60da      	str	r2, [r3, #12]
	}

	// 5. Configure the alt functionality
	temp = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
	//if(temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_AF_PP )){
		// configure the alternate function registers
	//}
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40010400 	.word	0x40010400
 80007c8:	40010800 	.word	0x40010800
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	40011000 	.word	0x40011000
 80007d4:	40011400 	.word	0x40011400
 80007d8:	40011800 	.word	0x40011800
 80007dc:	40011c00 	.word	0x40011c00
 80007e0:	40012000 	.word	0x40012000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010000 	.word	0x40010000

080007ec <SPI_PeriClockControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t  EnorDi){
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d120      	bne.n	8000840 <SPI_PeriClockControl+0x54>
		if(pSPIx == SPI1){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <SPI_PeriClockControl+0xa0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d106      	bne.n	8000814 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}else if(pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000812:	e035      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <SPI_PeriClockControl+0xa8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d106      	bne.n	800082a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	61d3      	str	r3, [r2, #28]
}
 8000828:	e02a      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <SPI_PeriClockControl+0xac>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d126      	bne.n	8000880 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	61d3      	str	r3, [r2, #28]
}
 800083e:	e01f      	b.n	8000880 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <SPI_PeriClockControl+0xa0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d106      	bne.n	8000856 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800084e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000852:	6193      	str	r3, [r2, #24]
}
 8000854:	e014      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI2){
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <SPI_PeriClockControl+0xa8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000868:	61d3      	str	r3, [r2, #28]
}
 800086a:	e009      	b.n	8000880 <SPI_PeriClockControl+0x94>
		}else if(pSPIx == SPI3){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SPI_PeriClockControl+0xac>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d105      	bne.n	8000880 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <SPI_PeriClockControl+0xa4>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SPI_PeriClockControl+0xa4>)
 800087a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800087e:	61d3      	str	r3, [r2, #28]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40013000 	.word	0x40013000
 8000890:	40021000 	.word	0x40021000
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00

0800089c <SPI_Init>:
 * @return				-
 *
 * @Note				-
 */

void SPI_Init(SPI_Handle_t *pSPIHandle){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	// Enable peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff9e 	bl	80007ec <SPI_PeriClockControl>

	// First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;  // temporal register
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

	// 1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

	// 2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10c      	bne.n	80008f4 <SPI_Init+0x58>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e0:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	430a      	orrs	r2, r1
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	e02c      	b.n	800094e <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	795b      	ldrb	r3, [r3, #5]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d10c      	bne.n	8000916 <SPI_Init+0x7a>
		// BIDIMODE should be set
		tempreg |= (1 << 15);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000902:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	430a      	orrs	r2, r1
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e01b      	b.n	800094e <SPI_Init+0xb2>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d117      	bne.n	800094e <SPI_Init+0xb2>
		// BIDIMODE should be cleared
		tempreg &= ~(1 << 15);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000924:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	430a      	orrs	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
		// RXONLY bit must be set
		tempreg &= ~(1 << 10);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800093c:	60fb      	str	r3, [r7, #12]
		pSPIHandle->pSPIx->CR1 |= tempreg;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]
	}

	// 3. Configure the Sclk Speed SPI_SclkSpeed;
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << 3;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	461a      	mov	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4313      	orrs	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6819      	ldr	r1, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	02db      	lsls	r3, r3, #11
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4313      	orrs	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	430a      	orrs	r2, r1
 8000988:	601a      	str	r2, [r3, #0]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6819      	ldr	r1, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	601a      	str	r2, [r3, #0]

	//6. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7a5b      	ldrb	r3, [r3, #9]
 80009ac:	461a      	mov	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]

	//7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << 9;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7a9b      	ldrb	r3, [r3, #10]
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
	pSPIHandle->pSPIx->CR1 |= tempreg;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	430a      	orrs	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <SPI_GetFlagStatus>:
	}else if(pSPIx == SPI3){
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689a      	ldr	r2, [r3, #8]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <SPI_SendData>:
 * @Note				- This is blocking call
 */



void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000a1c:	e027      	b.n	8000a6e <SPI_SendData+0x5e>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a1e:	bf00      	nop
 8000a20:	2102      	movs	r1, #2
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff ffe1 	bl	80009ea <SPI_GetFlagStatus>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00e      	beq.n	8000a58 <SPI_SendData+0x48>
			// 16 BIT DFF
			// 1. Load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	60da      	str	r2, [r3, #12]
			Len--;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
			Len--;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	e00a      	b.n	8000a6e <SPI_SendData+0x5e>
		}else{
			// 8 BIT
			// 1. Load the data in to the DR
			pSPIx->DR = *pTxBuffer;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	60da      	str	r2, [r3, #12]
			Len--;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1d4      	bne.n	8000a1e <SPI_SendData+0xe>
		}
	}
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <SPI_PeripheralControl>:
 * @return				- none
 *
 * @Note				- none
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	460b      	mov	r3, r1
 8000a88:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d106      	bne.n	8000a9e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a9c:	e005      	b.n	8000aaa <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d106      	bne.n	8000ad4 <SPI_SSIConfig+0x20>
			pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	601a      	str	r2, [r3, #0]
	}else{
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000ad2:	e005      	b.n	8000ae0 <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2600      	movs	r6, #0
 8000af0:	4d0c      	ldr	r5, [pc, #48]	; (8000b24 <__libc_init_array+0x38>)
 8000af2:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <__libc_init_array+0x3c>)
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	42a6      	cmp	r6, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	f000 f81a 	bl	8000b34 <_init>
 8000b00:	2600      	movs	r6, #0
 8000b02:	4d0a      	ldr	r5, [pc, #40]	; (8000b2c <__libc_init_array+0x40>)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <__libc_init_array+0x44>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	42a6      	cmp	r6, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b14:	4798      	blx	r3
 8000b16:	3601      	adds	r6, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1e:	4798      	blx	r3
 8000b20:	3601      	adds	r6, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	08000b58 	.word	0x08000b58
 8000b28:	08000b58 	.word	0x08000b58
 8000b2c:	08000b58 	.word	0x08000b58
 8000b30:	08000b5c 	.word	0x08000b5c

08000b34 <_init>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr

08000b40 <_fini>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	bf00      	nop
 8000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b46:	bc08      	pop	{r3}
 8000b48:	469e      	mov	lr, r3
 8000b4a:	4770      	bx	lr
